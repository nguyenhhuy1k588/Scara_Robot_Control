
Tes-motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bf4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08007d08  08007d08  00017d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081d8  080081d8  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  080081d8  080081d8  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081d8  080081d8  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081d8  080081d8  000181d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081dc  080081dc  000181dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080081e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  200001f8  080083d8  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000688  080083d8  00020688  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f847  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002671  00000000  00000000  0002fa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  000320e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00032ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195d9  00000000  00000000  00033b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011918  00000000  00000000  0004d171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ccd5  00000000  00000000  0005ea89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb75e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c04  00000000  00000000  000eb7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007cec 	.word	0x08007cec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	08007cec 	.word	0x08007cec

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_d2uiz>:
 8000a20:	004a      	lsls	r2, r1, #1
 8000a22:	d211      	bcs.n	8000a48 <__aeabi_d2uiz+0x28>
 8000a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a28:	d211      	bcs.n	8000a4e <__aeabi_d2uiz+0x2e>
 8000a2a:	d50d      	bpl.n	8000a48 <__aeabi_d2uiz+0x28>
 8000a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a34:	d40e      	bmi.n	8000a54 <__aeabi_d2uiz+0x34>
 8000a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	4770      	bx	lr
 8000a48:	f04f 0000 	mov.w	r0, #0
 8000a4c:	4770      	bx	lr
 8000a4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a52:	d102      	bne.n	8000a5a <__aeabi_d2uiz+0x3a>
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0000 	mov.w	r0, #0
 8000a5e:	4770      	bx	lr

08000a60 <__aeabi_d2f>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a68:	bf24      	itt	cs
 8000a6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a72:	d90d      	bls.n	8000a90 <__aeabi_d2f+0x30>
 8000a74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a88:	bf08      	it	eq
 8000a8a:	f020 0001 	biceq.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a94:	d121      	bne.n	8000ada <__aeabi_d2f+0x7a>
 8000a96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a9a:	bfbc      	itt	lt
 8000a9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	4770      	bxlt	lr
 8000aa2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aaa:	f1c2 0218 	rsb	r2, r2, #24
 8000aae:	f1c2 0c20 	rsb	ip, r2, #32
 8000ab2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aba:	bf18      	it	ne
 8000abc:	f040 0001 	orrne.w	r0, r0, #1
 8000ac0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000acc:	ea40 000c 	orr.w	r0, r0, ip
 8000ad0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad8:	e7cc      	b.n	8000a74 <__aeabi_d2f+0x14>
 8000ada:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ade:	d107      	bne.n	8000af0 <__aeabi_d2f+0x90>
 8000ae0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae4:	bf1e      	ittt	ne
 8000ae6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aee:	4770      	bxne	lr
 8000af0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_frsub>:
 8000b00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b04:	e002      	b.n	8000b0c <__addsf3>
 8000b06:	bf00      	nop

08000b08 <__aeabi_fsub>:
 8000b08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b0c <__addsf3>:
 8000b0c:	0042      	lsls	r2, r0, #1
 8000b0e:	bf1f      	itttt	ne
 8000b10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b14:	ea92 0f03 	teqne	r2, r3
 8000b18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b20:	d06a      	beq.n	8000bf8 <__addsf3+0xec>
 8000b22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b2a:	bfc1      	itttt	gt
 8000b2c:	18d2      	addgt	r2, r2, r3
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	4048      	eorgt	r0, r1
 8000b32:	4041      	eorgt	r1, r0
 8000b34:	bfb8      	it	lt
 8000b36:	425b      	neglt	r3, r3
 8000b38:	2b19      	cmp	r3, #25
 8000b3a:	bf88      	it	hi
 8000b3c:	4770      	bxhi	lr
 8000b3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b5a:	bf18      	it	ne
 8000b5c:	4249      	negne	r1, r1
 8000b5e:	ea92 0f03 	teq	r2, r3
 8000b62:	d03f      	beq.n	8000be4 <__addsf3+0xd8>
 8000b64:	f1a2 0201 	sub.w	r2, r2, #1
 8000b68:	fa41 fc03 	asr.w	ip, r1, r3
 8000b6c:	eb10 000c 	adds.w	r0, r0, ip
 8000b70:	f1c3 0320 	rsb	r3, r3, #32
 8000b74:	fa01 f103 	lsl.w	r1, r1, r3
 8000b78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b7c:	d502      	bpl.n	8000b84 <__addsf3+0x78>
 8000b7e:	4249      	negs	r1, r1
 8000b80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b88:	d313      	bcc.n	8000bb2 <__addsf3+0xa6>
 8000b8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8e:	d306      	bcc.n	8000b9e <__addsf3+0x92>
 8000b90:	0840      	lsrs	r0, r0, #1
 8000b92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b96:	f102 0201 	add.w	r2, r2, #1
 8000b9a:	2afe      	cmp	r2, #254	; 0xfe
 8000b9c:	d251      	bcs.n	8000c42 <__addsf3+0x136>
 8000b9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ba2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba6:	bf08      	it	eq
 8000ba8:	f020 0001 	biceq.w	r0, r0, #1
 8000bac:	ea40 0003 	orr.w	r0, r0, r3
 8000bb0:	4770      	bx	lr
 8000bb2:	0049      	lsls	r1, r1, #1
 8000bb4:	eb40 0000 	adc.w	r0, r0, r0
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	bf28      	it	cs
 8000bbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bc0:	d2ed      	bcs.n	8000b9e <__addsf3+0x92>
 8000bc2:	fab0 fc80 	clz	ip, r0
 8000bc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bca:	ebb2 020c 	subs.w	r2, r2, ip
 8000bce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bd2:	bfaa      	itet	ge
 8000bd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd8:	4252      	neglt	r2, r2
 8000bda:	4318      	orrge	r0, r3
 8000bdc:	bfbc      	itt	lt
 8000bde:	40d0      	lsrlt	r0, r2
 8000be0:	4318      	orrlt	r0, r3
 8000be2:	4770      	bx	lr
 8000be4:	f092 0f00 	teq	r2, #0
 8000be8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bec:	bf06      	itte	eq
 8000bee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bf2:	3201      	addeq	r2, #1
 8000bf4:	3b01      	subne	r3, #1
 8000bf6:	e7b5      	b.n	8000b64 <__addsf3+0x58>
 8000bf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c00:	bf18      	it	ne
 8000c02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c06:	d021      	beq.n	8000c4c <__addsf3+0x140>
 8000c08:	ea92 0f03 	teq	r2, r3
 8000c0c:	d004      	beq.n	8000c18 <__addsf3+0x10c>
 8000c0e:	f092 0f00 	teq	r2, #0
 8000c12:	bf08      	it	eq
 8000c14:	4608      	moveq	r0, r1
 8000c16:	4770      	bx	lr
 8000c18:	ea90 0f01 	teq	r0, r1
 8000c1c:	bf1c      	itt	ne
 8000c1e:	2000      	movne	r0, #0
 8000c20:	4770      	bxne	lr
 8000c22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c26:	d104      	bne.n	8000c32 <__addsf3+0x126>
 8000c28:	0040      	lsls	r0, r0, #1
 8000c2a:	bf28      	it	cs
 8000c2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c30:	4770      	bx	lr
 8000c32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c36:	bf3c      	itt	cc
 8000c38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bxcc	lr
 8000c3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4a:	4770      	bx	lr
 8000c4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c50:	bf16      	itet	ne
 8000c52:	4608      	movne	r0, r1
 8000c54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c58:	4601      	movne	r1, r0
 8000c5a:	0242      	lsls	r2, r0, #9
 8000c5c:	bf06      	itte	eq
 8000c5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c62:	ea90 0f01 	teqeq	r0, r1
 8000c66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c6a:	4770      	bx	lr

08000c6c <__aeabi_ui2f>:
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	e004      	b.n	8000c7c <__aeabi_i2f+0x8>
 8000c72:	bf00      	nop

08000c74 <__aeabi_i2f>:
 8000c74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c78:	bf48      	it	mi
 8000c7a:	4240      	negmi	r0, r0
 8000c7c:	ea5f 0c00 	movs.w	ip, r0
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c88:	4601      	mov	r1, r0
 8000c8a:	f04f 0000 	mov.w	r0, #0
 8000c8e:	e01c      	b.n	8000cca <__aeabi_l2f+0x2a>

08000c90 <__aeabi_ul2f>:
 8000c90:	ea50 0201 	orrs.w	r2, r0, r1
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e00a      	b.n	8000cb4 <__aeabi_l2f+0x14>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_l2f>:
 8000ca0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cac:	d502      	bpl.n	8000cb4 <__aeabi_l2f+0x14>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	ea5f 0c01 	movs.w	ip, r1
 8000cb8:	bf02      	ittt	eq
 8000cba:	4684      	moveq	ip, r0
 8000cbc:	4601      	moveq	r1, r0
 8000cbe:	2000      	moveq	r0, #0
 8000cc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc4:	bf08      	it	eq
 8000cc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cce:	fabc f28c 	clz	r2, ip
 8000cd2:	3a08      	subs	r2, #8
 8000cd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd8:	db10      	blt.n	8000cfc <__aeabi_l2f+0x5c>
 8000cda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cde:	4463      	add	r3, ip
 8000ce0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce4:	f1c2 0220 	rsb	r2, r2, #32
 8000ce8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	eb43 0002 	adc.w	r0, r3, r2
 8000cf4:	bf08      	it	eq
 8000cf6:	f020 0001 	biceq.w	r0, r0, #1
 8000cfa:	4770      	bx	lr
 8000cfc:	f102 0220 	add.w	r2, r2, #32
 8000d00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_fmul>:
 8000d1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d24:	bf1e      	ittt	ne
 8000d26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2a:	ea92 0f0c 	teqne	r2, ip
 8000d2e:	ea93 0f0c 	teqne	r3, ip
 8000d32:	d06f      	beq.n	8000e14 <__aeabi_fmul+0xf8>
 8000d34:	441a      	add	r2, r3
 8000d36:	ea80 0c01 	eor.w	ip, r0, r1
 8000d3a:	0240      	lsls	r0, r0, #9
 8000d3c:	bf18      	it	ne
 8000d3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d42:	d01e      	beq.n	8000d82 <__aeabi_fmul+0x66>
 8000d44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d50:	fba0 3101 	umull	r3, r1, r0, r1
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d5c:	bf3e      	ittt	cc
 8000d5e:	0049      	lslcc	r1, r1, #1
 8000d60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d64:	005b      	lslcc	r3, r3, #1
 8000d66:	ea40 0001 	orr.w	r0, r0, r1
 8000d6a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d6e:	2afd      	cmp	r2, #253	; 0xfd
 8000d70:	d81d      	bhi.n	8000dae <__aeabi_fmul+0x92>
 8000d72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7a:	bf08      	it	eq
 8000d7c:	f020 0001 	biceq.w	r0, r0, #1
 8000d80:	4770      	bx	lr
 8000d82:	f090 0f00 	teq	r0, #0
 8000d86:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d8a:	bf08      	it	eq
 8000d8c:	0249      	lsleq	r1, r1, #9
 8000d8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d96:	3a7f      	subs	r2, #127	; 0x7f
 8000d98:	bfc2      	ittt	gt
 8000d9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000da2:	4770      	bxgt	lr
 8000da4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	3a01      	subs	r2, #1
 8000dae:	dc5d      	bgt.n	8000e6c <__aeabi_fmul+0x150>
 8000db0:	f112 0f19 	cmn.w	r2, #25
 8000db4:	bfdc      	itt	le
 8000db6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dba:	4770      	bxle	lr
 8000dbc:	f1c2 0200 	rsb	r2, r2, #0
 8000dc0:	0041      	lsls	r1, r0, #1
 8000dc2:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc6:	f1c2 0220 	rsb	r2, r2, #32
 8000dca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dce:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dd2:	f140 0000 	adc.w	r0, r0, #0
 8000dd6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dda:	bf08      	it	eq
 8000ddc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de0:	4770      	bx	lr
 8000de2:	f092 0f00 	teq	r2, #0
 8000de6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0040      	lsleq	r0, r0, #1
 8000dee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000df2:	3a01      	subeq	r2, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fmul+0xce>
 8000df6:	ea40 000c 	orr.w	r0, r0, ip
 8000dfa:	f093 0f00 	teq	r3, #0
 8000dfe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0049      	lsleq	r1, r1, #1
 8000e06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e0a:	3b01      	subeq	r3, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xe6>
 8000e0e:	ea41 010c 	orr.w	r1, r1, ip
 8000e12:	e78f      	b.n	8000d34 <__aeabi_fmul+0x18>
 8000e14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	bf18      	it	ne
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d00a      	beq.n	8000e3a <__aeabi_fmul+0x11e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1d8      	bne.n	8000de2 <__aeabi_fmul+0xc6>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	4770      	bx	lr
 8000e3a:	f090 0f00 	teq	r0, #0
 8000e3e:	bf17      	itett	ne
 8000e40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e44:	4608      	moveq	r0, r1
 8000e46:	f091 0f00 	teqne	r1, #0
 8000e4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e4e:	d014      	beq.n	8000e7a <__aeabi_fmul+0x15e>
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d101      	bne.n	8000e5a <__aeabi_fmul+0x13e>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	d10f      	bne.n	8000e7a <__aeabi_fmul+0x15e>
 8000e5a:	ea93 0f0c 	teq	r3, ip
 8000e5e:	d103      	bne.n	8000e68 <__aeabi_fmul+0x14c>
 8000e60:	024b      	lsls	r3, r1, #9
 8000e62:	bf18      	it	ne
 8000e64:	4608      	movne	r0, r1
 8000e66:	d108      	bne.n	8000e7a <__aeabi_fmul+0x15e>
 8000e68:	ea80 0001 	eor.w	r0, r0, r1
 8000e6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e78:	4770      	bx	lr
 8000e7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e82:	4770      	bx	lr

08000e84 <__aeabi_fdiv>:
 8000e84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e8c:	bf1e      	ittt	ne
 8000e8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e92:	ea92 0f0c 	teqne	r2, ip
 8000e96:	ea93 0f0c 	teqne	r3, ip
 8000e9a:	d069      	beq.n	8000f70 <__aeabi_fdiv+0xec>
 8000e9c:	eba2 0203 	sub.w	r2, r2, r3
 8000ea0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea4:	0249      	lsls	r1, r1, #9
 8000ea6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eaa:	d037      	beq.n	8000f1c <__aeabi_fdiv+0x98>
 8000eac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	bf38      	it	cc
 8000ec0:	005b      	lslcc	r3, r3, #1
 8000ec2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ec6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	bf24      	itt	cs
 8000ece:	1a5b      	subcs	r3, r3, r1
 8000ed0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed8:	bf24      	itt	cs
 8000eda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ede:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ee2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ee6:	bf24      	itt	cs
 8000ee8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef4:	bf24      	itt	cs
 8000ef6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000efa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	bf18      	it	ne
 8000f02:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f06:	d1e0      	bne.n	8000eca <__aeabi_fdiv+0x46>
 8000f08:	2afd      	cmp	r2, #253	; 0xfd
 8000f0a:	f63f af50 	bhi.w	8000dae <__aeabi_fmul+0x92>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f14:	bf08      	it	eq
 8000f16:	f020 0001 	biceq.w	r0, r0, #1
 8000f1a:	4770      	bx	lr
 8000f1c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f20:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f24:	327f      	adds	r2, #127	; 0x7f
 8000f26:	bfc2      	ittt	gt
 8000f28:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f2c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f30:	4770      	bxgt	lr
 8000f32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	3a01      	subs	r2, #1
 8000f3c:	e737      	b.n	8000dae <__aeabi_fmul+0x92>
 8000f3e:	f092 0f00 	teq	r2, #0
 8000f42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0040      	lsleq	r0, r0, #1
 8000f4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4e:	3a01      	subeq	r2, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fdiv+0xc2>
 8000f52:	ea40 000c 	orr.w	r0, r0, ip
 8000f56:	f093 0f00 	teq	r3, #0
 8000f5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0049      	lsleq	r1, r1, #1
 8000f62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f66:	3b01      	subeq	r3, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xda>
 8000f6a:	ea41 010c 	orr.w	r1, r1, ip
 8000f6e:	e795      	b.n	8000e9c <__aeabi_fdiv+0x18>
 8000f70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f74:	ea92 0f0c 	teq	r2, ip
 8000f78:	d108      	bne.n	8000f8c <__aeabi_fdiv+0x108>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	f47f af7d 	bne.w	8000e7a <__aeabi_fmul+0x15e>
 8000f80:	ea93 0f0c 	teq	r3, ip
 8000f84:	f47f af70 	bne.w	8000e68 <__aeabi_fmul+0x14c>
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e776      	b.n	8000e7a <__aeabi_fmul+0x15e>
 8000f8c:	ea93 0f0c 	teq	r3, ip
 8000f90:	d104      	bne.n	8000f9c <__aeabi_fdiv+0x118>
 8000f92:	024b      	lsls	r3, r1, #9
 8000f94:	f43f af4c 	beq.w	8000e30 <__aeabi_fmul+0x114>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e76e      	b.n	8000e7a <__aeabi_fmul+0x15e>
 8000f9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa0:	bf18      	it	ne
 8000fa2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fa6:	d1ca      	bne.n	8000f3e <__aeabi_fdiv+0xba>
 8000fa8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fac:	f47f af5c 	bne.w	8000e68 <__aeabi_fmul+0x14c>
 8000fb0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb4:	f47f af3c 	bne.w	8000e30 <__aeabi_fmul+0x114>
 8000fb8:	e75f      	b.n	8000e7a <__aeabi_fmul+0x15e>
 8000fba:	bf00      	nop

08000fbc <__gesf2>:
 8000fbc:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc0:	e006      	b.n	8000fd0 <__cmpsf2+0x4>
 8000fc2:	bf00      	nop

08000fc4 <__lesf2>:
 8000fc4:	f04f 0c01 	mov.w	ip, #1
 8000fc8:	e002      	b.n	8000fd0 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__cmpsf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fd4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe0:	bf18      	it	ne
 8000fe2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fe6:	d011      	beq.n	800100c <__cmpsf2+0x40>
 8000fe8:	b001      	add	sp, #4
 8000fea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fee:	bf18      	it	ne
 8000ff0:	ea90 0f01 	teqne	r0, r1
 8000ff4:	bf58      	it	pl
 8000ff6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ffa:	bf88      	it	hi
 8000ffc:	17c8      	asrhi	r0, r1, #31
 8000ffe:	bf38      	it	cc
 8001000:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001004:	bf18      	it	ne
 8001006:	f040 0001 	orrne.w	r0, r0, #1
 800100a:	4770      	bx	lr
 800100c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001010:	d102      	bne.n	8001018 <__cmpsf2+0x4c>
 8001012:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001016:	d105      	bne.n	8001024 <__cmpsf2+0x58>
 8001018:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800101c:	d1e4      	bne.n	8000fe8 <__cmpsf2+0x1c>
 800101e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001022:	d0e1      	beq.n	8000fe8 <__cmpsf2+0x1c>
 8001024:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <__aeabi_cfrcmple>:
 800102c:	4684      	mov	ip, r0
 800102e:	4608      	mov	r0, r1
 8001030:	4661      	mov	r1, ip
 8001032:	e7ff      	b.n	8001034 <__aeabi_cfcmpeq>

08001034 <__aeabi_cfcmpeq>:
 8001034:	b50f      	push	{r0, r1, r2, r3, lr}
 8001036:	f7ff ffc9 	bl	8000fcc <__cmpsf2>
 800103a:	2800      	cmp	r0, #0
 800103c:	bf48      	it	mi
 800103e:	f110 0f00 	cmnmi.w	r0, #0
 8001042:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001044 <__aeabi_fcmpeq>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff fff4 	bl	8001034 <__aeabi_cfcmpeq>
 800104c:	bf0c      	ite	eq
 800104e:	2001      	moveq	r0, #1
 8001050:	2000      	movne	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmplt>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffea 	bl	8001034 <__aeabi_cfcmpeq>
 8001060:	bf34      	ite	cc
 8001062:	2001      	movcc	r0, #1
 8001064:	2000      	movcs	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmple>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffe0 	bl	8001034 <__aeabi_cfcmpeq>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpge>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffd2 	bl	800102c <__aeabi_cfrcmple>
 8001088:	bf94      	ite	ls
 800108a:	2001      	movls	r0, #1
 800108c:	2000      	movhi	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmpgt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffc8 	bl	800102c <__aeabi_cfrcmple>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_f2uiz>:
 80010a8:	0042      	lsls	r2, r0, #1
 80010aa:	d20e      	bcs.n	80010ca <__aeabi_f2uiz+0x22>
 80010ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010b0:	d30b      	bcc.n	80010ca <__aeabi_f2uiz+0x22>
 80010b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ba:	d409      	bmi.n	80010d0 <__aeabi_f2uiz+0x28>
 80010bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c4:	fa23 f002 	lsr.w	r0, r3, r2
 80010c8:	4770      	bx	lr
 80010ca:	f04f 0000 	mov.w	r0, #0
 80010ce:	4770      	bx	lr
 80010d0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010d4:	d101      	bne.n	80010da <__aeabi_f2uiz+0x32>
 80010d6:	0242      	lsls	r2, r0, #9
 80010d8:	d102      	bne.n	80010e0 <__aeabi_f2uiz+0x38>
 80010da:	f04f 30ff 	mov.w	r0, #4294967295
 80010de:	4770      	bx	lr
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <__aeabi_d2lz>:
 80010e8:	b538      	push	{r3, r4, r5, lr}
 80010ea:	4605      	mov	r5, r0
 80010ec:	460c      	mov	r4, r1
 80010ee:	2200      	movs	r2, #0
 80010f0:	2300      	movs	r3, #0
 80010f2:	4628      	mov	r0, r5
 80010f4:	4621      	mov	r1, r4
 80010f6:	f7ff fc6b 	bl	80009d0 <__aeabi_dcmplt>
 80010fa:	b928      	cbnz	r0, 8001108 <__aeabi_d2lz+0x20>
 80010fc:	4628      	mov	r0, r5
 80010fe:	4621      	mov	r1, r4
 8001100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001104:	f000 b80a 	b.w	800111c <__aeabi_d2ulz>
 8001108:	4628      	mov	r0, r5
 800110a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800110e:	f000 f805 	bl	800111c <__aeabi_d2ulz>
 8001112:	4240      	negs	r0, r0
 8001114:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001118:	bd38      	pop	{r3, r4, r5, pc}
 800111a:	bf00      	nop

0800111c <__aeabi_d2ulz>:
 800111c:	b5d0      	push	{r4, r6, r7, lr}
 800111e:	2200      	movs	r2, #0
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <__aeabi_d2ulz+0x34>)
 8001122:	4606      	mov	r6, r0
 8001124:	460f      	mov	r7, r1
 8001126:	f7ff f9e1 	bl	80004ec <__aeabi_dmul>
 800112a:	f7ff fc79 	bl	8000a20 <__aeabi_d2uiz>
 800112e:	4604      	mov	r4, r0
 8001130:	f7ff f962 	bl	80003f8 <__aeabi_ui2d>
 8001134:	2200      	movs	r2, #0
 8001136:	4b07      	ldr	r3, [pc, #28]	; (8001154 <__aeabi_d2ulz+0x38>)
 8001138:	f7ff f9d8 	bl	80004ec <__aeabi_dmul>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4630      	mov	r0, r6
 8001142:	4639      	mov	r1, r7
 8001144:	f7ff f81a 	bl	800017c <__aeabi_dsub>
 8001148:	f7ff fc6a 	bl	8000a20 <__aeabi_d2uiz>
 800114c:	4621      	mov	r1, r4
 800114e:	bdd0      	pop	{r4, r6, r7, pc}
 8001150:	3df00000 	.word	0x3df00000
 8001154:	41f00000 	.word	0x41f00000

08001158 <COMMAND_LINE_Receive>:
		{"SET", Push_cmd_to_Ring_Buffer},
		{"GET",},
		{NULL,NULL}
};
void COMMAND_LINE_Receive(uint8_t rx_data)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	if(rx_data != ';')
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b3b      	cmp	r3, #59	; 0x3b
 8001166:	d00a      	beq.n	800117e <COMMAND_LINE_Receive+0x26>
	{
		cl_buf[cl_pointer++] = rx_data;
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <COMMAND_LINE_Receive+0x44>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	b2d1      	uxtb	r1, r2
 8001170:	4a0a      	ldr	r2, [pc, #40]	; (800119c <COMMAND_LINE_Receive+0x44>)
 8001172:	7011      	strb	r1, [r2, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <COMMAND_LINE_Receive+0x48>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	5453      	strb	r3, [r2, r1]
	else
	{
		cl_buf[cl_pointer] = '\0';
		cl_flag = 1;
	}
}
 800117c:	e008      	b.n	8001190 <COMMAND_LINE_Receive+0x38>
		cl_buf[cl_pointer] = '\0';
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <COMMAND_LINE_Receive+0x44>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <COMMAND_LINE_Receive+0x48>)
 8001186:	2100      	movs	r1, #0
 8001188:	5499      	strb	r1, [r3, r2]
		cl_flag = 1;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <COMMAND_LINE_Receive+0x4c>)
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000313 	.word	0x20000313
 80011a0:	20000214 	.word	0x20000214
 80011a4:	20000314 	.word	0x20000314

080011a8 <find_command_infor>:
void COMMAND_LINE_Init()
{

}

cli_command_info_t *find_command_infor(uint8_t *cmd){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	cli_command_info_t *command=cli_command_info;
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <find_command_infor+0x38>)
 80011b2:	60fb      	str	r3, [r7, #12]
	while(command != NULL){
 80011b4:	e00d      	b.n	80011d2 <find_command_infor+0x2a>
		if(strcmp(command->cmd_name,cmd)==0){
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7fe ffc7 	bl	8000150 <strcmp>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <find_command_infor+0x24>
			return command;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	e005      	b.n	80011d8 <find_command_infor+0x30>
		}
		command++;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3308      	adds	r3, #8
 80011d0:	60fb      	str	r3, [r7, #12]
	while(command != NULL){
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1ee      	bne.n	80011b6 <find_command_infor+0xe>
	}
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000000 	.word	0x20000000

080011e4 <Push_cmd_to_Ring_Buffer>:
void Push_cmd_to_Ring_Buffer(uint8_t *cmd, uint8_t *object, float val){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
	Packed_cmd_t Packed_cmd={cmd,object,val};
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	61fb      	str	r3, [r7, #28]
	if(strcmp(object,"X")==0) RING_BUFFER_Push(&ring_buffer_theta1, Packed_cmd);
 80011fc:	4915      	ldr	r1, [pc, #84]	; (8001254 <Push_cmd_to_Ring_Buffer+0x70>)
 80011fe:	68b8      	ldr	r0, [r7, #8]
 8001200:	f7fe ffa6 	bl	8000150 <strcmp>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d105      	bne.n	8001216 <Push_cmd_to_Ring_Buffer+0x32>
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001210:	4811      	ldr	r0, [pc, #68]	; (8001258 <Push_cmd_to_Ring_Buffer+0x74>)
 8001212:	f000 f8fb 	bl	800140c <RING_BUFFER_Push>
	if(strcmp(object,"Y")==0) RING_BUFFER_Push(&ring_buffer_theta2, Packed_cmd);
 8001216:	4911      	ldr	r1, [pc, #68]	; (800125c <Push_cmd_to_Ring_Buffer+0x78>)
 8001218:	68b8      	ldr	r0, [r7, #8]
 800121a:	f7fe ff99 	bl	8000150 <strcmp>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d105      	bne.n	8001230 <Push_cmd_to_Ring_Buffer+0x4c>
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800122a:	480d      	ldr	r0, [pc, #52]	; (8001260 <Push_cmd_to_Ring_Buffer+0x7c>)
 800122c:	f000 f8ee 	bl	800140c <RING_BUFFER_Push>
	if(strcmp(object,"Z")==0) RING_BUFFER_Push(&ring_buffer_theta3, Packed_cmd);
 8001230:	490c      	ldr	r1, [pc, #48]	; (8001264 <Push_cmd_to_Ring_Buffer+0x80>)
 8001232:	68b8      	ldr	r0, [r7, #8]
 8001234:	f7fe ff8c 	bl	8000150 <strcmp>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d105      	bne.n	800124a <Push_cmd_to_Ring_Buffer+0x66>
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001244:	4808      	ldr	r0, [pc, #32]	; (8001268 <Push_cmd_to_Ring_Buffer+0x84>)
 8001246:	f000 f8e1 	bl	800140c <RING_BUFFER_Push>
}
 800124a:	bf00      	nop
 800124c:	3720      	adds	r7, #32
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	08007d10 	.word	0x08007d10
 8001258:	2000052c 	.word	0x2000052c
 800125c:	08007d14 	.word	0x08007d14
 8001260:	20000538 	.word	0x20000538
 8001264:	08007d18 	.word	0x08007d18
 8001268:	20000544 	.word	0x20000544

0800126c <Cmd_control_handle>:

void Cmd_control_handle(RING_BUFFER_HandleTypeDef *ring_buffer,Scara_Theta *Theta){
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
	if(RING_BUFFER_Available(ring_buffer) && Theta->Dir == DIR_IDLE ){
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f92b 	bl	80014d2 <RING_BUFFER_Available>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00e      	beq.n	80012a0 <Cmd_control_handle+0x34>
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	7c1b      	ldrb	r3, [r3, #16]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d10a      	bne.n	80012a0 <Cmd_control_handle+0x34>
		Packed_cmd_t Packed_cmd;
		RING_BUFFER_Pop(ring_buffer, &Packed_cmd);
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	4619      	mov	r1, r3
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f8ee 	bl	8001472 <RING_BUFFER_Pop>
		Run_theta(Theta, Packed_cmd.value);
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	4619      	mov	r1, r3
 800129a:	6838      	ldr	r0, [r7, #0]
 800129c:	f000 f804 	bl	80012a8 <Run_theta>
	}
}
 80012a0:	bf00      	nop
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <Run_theta>:
void Run_theta(Scara_Theta *Scara_Theta, float despos){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	Trapezoidal_Profile(Scara_Theta->Cur_Theta,despos,&(Scara_Theta->Vel),Scara_Theta->Type);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6998      	ldr	r0, [r3, #24]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	7f1b      	ldrb	r3, [r3, #28]
 80012c0:	6839      	ldr	r1, [r7, #0]
 80012c2:	f000 fb05 	bl	80018d0 <Trapezoidal_Profile>
	Scara_Theta->Des_Theta = despos;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	615a      	str	r2, [r3, #20]
	if(Scara_Theta->Vel.N_step > 0){						//Set direction of theta
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d02e      	beq.n	8001332 <Run_theta+0x8a>
		if(Scara_Theta->Des_Theta > Scara_Theta->Cur_Theta){
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695a      	ldr	r2, [r3, #20]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4619      	mov	r1, r3
 80012de:	4610      	mov	r0, r2
 80012e0:	f7ff fed8 	bl	8001094 <__aeabi_fcmpgt>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00b      	beq.n	8001302 <Run_theta+0x5a>
			HAL_GPIO_WritePin(Scara_Theta->Joint.p_Motor_GPIOx, Scara_Theta->Joint.Motor_Dir_Pin, GPIO_PIN_SET);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6898      	ldr	r0, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	899b      	ldrh	r3, [r3, #12]
 80012f2:	2201      	movs	r2, #1
 80012f4:	4619      	mov	r1, r3
 80012f6:	f001 fbcf 	bl	8002a98 <HAL_GPIO_WritePin>
			Scara_Theta->Dir = DIR_BKW;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	741a      	strb	r2, [r3, #16]
 8001300:	e00a      	b.n	8001318 <Run_theta+0x70>
		}else{
			HAL_GPIO_WritePin(Scara_Theta->Joint.p_Motor_GPIOx, Scara_Theta->Joint.Motor_Dir_Pin, GPIO_PIN_RESET);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6898      	ldr	r0, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	899b      	ldrh	r3, [r3, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	4619      	mov	r1, r3
 800130e:	f001 fbc3 	bl	8002a98 <HAL_GPIO_WritePin>
			Scara_Theta->Dir = DIR_FRW;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	741a      	strb	r2, [r3, #16]
		}
		Scara_Theta->Joint.p_Motor_TIM->Instance->CNT =0;//reset timer
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_PWM_Start_IT(Scara_Theta->Joint.p_Motor_TIM, Scara_Theta->Joint.Motor_Chanel);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	4619      	mov	r1, r3
 800132c:	4610      	mov	r0, r2
 800132e:	f002 f883 	bl	8003438 <HAL_TIM_PWM_Start_IT>
	}
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <COMMAND_LINE_Handle>:
void COMMAND_LINE_Handle(){
 800133c:	b580      	push	{r7, lr}
 800133e:	b08e      	sub	sp, #56	; 0x38
 8001340:	af00      	add	r7, sp, #0
	if(cl_flag)
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <COMMAND_LINE_Handle+0x90>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d03b      	beq.n	80013c2 <COMMAND_LINE_Handle+0x86>
	{
		char *arg_list[10];
		uint8_t arg_num = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		char *temp_token = strtok((char *)cl_buf, ",");
 8001350:	491f      	ldr	r1, [pc, #124]	; (80013d0 <COMMAND_LINE_Handle+0x94>)
 8001352:	4820      	ldr	r0, [pc, #128]	; (80013d4 <COMMAND_LINE_Handle+0x98>)
 8001354:	f004 fce8 	bl	8005d28 <strtok>
 8001358:	6338      	str	r0, [r7, #48]	; 0x30
		while(temp_token != NULL)
 800135a:	e00f      	b.n	800137c <COMMAND_LINE_Handle+0x40>
		{
			arg_list[arg_num++] = temp_token;
 800135c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001360:	1c5a      	adds	r2, r3, #1
 8001362:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	3338      	adds	r3, #56	; 0x38
 800136a:	443b      	add	r3, r7
 800136c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800136e:	f843 2c38 	str.w	r2, [r3, #-56]
			temp_token = strtok(NULL, ",");
 8001372:	4917      	ldr	r1, [pc, #92]	; (80013d0 <COMMAND_LINE_Handle+0x94>)
 8001374:	2000      	movs	r0, #0
 8001376:	f004 fcd7 	bl	8005d28 <strtok>
 800137a:	6338      	str	r0, [r7, #48]	; 0x30
		while(temp_token != NULL)
 800137c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1ec      	bne.n	800135c <COMMAND_LINE_Handle+0x20>
////				uint8_t temp_str0[] = {CLOSE_VALVE};
////				Push_Command_To_Ring_Buffer(tx_frame_data[0], 1, 7, 1, sizeof(temp_str0), temp_str0);
////			}
//
//		}
		cli_command_info_t *command = find_command_infor((uint8_t*)arg_list[0]);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff0f 	bl	80011a8 <find_command_infor>
 800138a:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(command != NULL){
 800138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138e:	2b00      	cmp	r3, #0
 8001390:	d011      	beq.n	80013b6 <COMMAND_LINE_Handle+0x7a>
			float val=atof(arg_list[2]);
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	4618      	mov	r0, r3
 8001396:	f003 fd87 	bl	8004ea8 <atof>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fb5d 	bl	8000a60 <__aeabi_d2f>
 80013a6:	4603      	mov	r3, r0
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
			command->func(arg_list[0], arg_list[1],val);
 80013aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	6838      	ldr	r0, [r7, #0]
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013b4:	4798      	blx	r3
		}
		cl_pointer = 0;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <COMMAND_LINE_Handle+0x9c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
		cl_flag = 0;
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <COMMAND_LINE_Handle+0x90>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
	}
}
 80013c2:	bf00      	nop
 80013c4:	3738      	adds	r7, #56	; 0x38
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000314 	.word	0x20000314
 80013d0:	08007d1c 	.word	0x08007d1c
 80013d4:	20000214 	.word	0x20000214
 80013d8:	20000313 	.word	0x20000313

080013dc <RING_BUFFER_Init>:
#include "ring_buffer.h"


void RING_BUFFER_Init(RING_BUFFER_HandleTypeDef *p_ring_buffer, Packed_cmd_t *p_buffer, uint16_t p_max_length){
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	4613      	mov	r3, r2
 80013e8:	80fb      	strh	r3, [r7, #6]
	p_ring_buffer->buffer = p_buffer;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	68ba      	ldr	r2, [r7, #8]
 80013ee:	601a      	str	r2, [r3, #0]
	p_ring_buffer->head = 0;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2200      	movs	r2, #0
 80013f4:	809a      	strh	r2, [r3, #4]
	p_ring_buffer->tail = 0;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	80da      	strh	r2, [r3, #6]
	p_ring_buffer->max_length = p_max_length;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	88fa      	ldrh	r2, [r7, #6]
 8001400:	811a      	strh	r2, [r3, #8]
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <RING_BUFFER_Push>:

int8_t RING_BUFFER_Push(RING_BUFFER_HandleTypeDef *p_ring_buffer, Packed_cmd_t p_data){
 800140c:	b490      	push	{r4, r7}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	4638      	mov	r0, r7
 8001416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint16_t t_next;

	t_next = p_ring_buffer->head + 1;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	889b      	ldrh	r3, [r3, #4]
 800141e:	3301      	adds	r3, #1
 8001420:	82fb      	strh	r3, [r7, #22]
	if(t_next >= p_ring_buffer->max_length)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	891b      	ldrh	r3, [r3, #8]
 8001426:	8afa      	ldrh	r2, [r7, #22]
 8001428:	429a      	cmp	r2, r3
 800142a:	d301      	bcc.n	8001430 <RING_BUFFER_Push+0x24>
		t_next = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	82fb      	strh	r3, [r7, #22]

	if(t_next == p_ring_buffer->tail)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	88db      	ldrh	r3, [r3, #6]
 8001434:	8afa      	ldrh	r2, [r7, #22]
 8001436:	429a      	cmp	r2, r3
 8001438:	d102      	bne.n	8001440 <RING_BUFFER_Push+0x34>
		return -1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	e013      	b.n	8001468 <RING_BUFFER_Push+0x5c>

	p_ring_buffer->buffer[p_ring_buffer->head] = p_data;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	889b      	ldrh	r3, [r3, #4]
 8001448:	4619      	mov	r1, r3
 800144a:	460b      	mov	r3, r1
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	440b      	add	r3, r1
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	461c      	mov	r4, r3
 8001456:	463b      	mov	r3, r7
 8001458:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800145c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	p_ring_buffer->head = t_next;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	8afa      	ldrh	r2, [r7, #22]
 8001464:	809a      	strh	r2, [r3, #4]

	return 0;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bc90      	pop	{r4, r7}
 8001470:	4770      	bx	lr

08001472 <RING_BUFFER_Pop>:

int8_t RING_BUFFER_Pop(RING_BUFFER_HandleTypeDef *p_ring_buffer, Packed_cmd_t *p_data){
 8001472:	b480      	push	{r7}
 8001474:	b085      	sub	sp, #20
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	6039      	str	r1, [r7, #0]
	uint16_t t_next;

	if(p_ring_buffer->tail == p_ring_buffer->head)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	88da      	ldrh	r2, [r3, #6]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	889b      	ldrh	r3, [r3, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	d102      	bne.n	800148e <RING_BUFFER_Pop+0x1c>
		return -1;
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
 800148c:	e01c      	b.n	80014c8 <RING_BUFFER_Pop+0x56>

	t_next = p_ring_buffer->tail + 1;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	88db      	ldrh	r3, [r3, #6]
 8001492:	3301      	adds	r3, #1
 8001494:	81fb      	strh	r3, [r7, #14]
	if(t_next >= p_ring_buffer->max_length)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	891b      	ldrh	r3, [r3, #8]
 800149a:	89fa      	ldrh	r2, [r7, #14]
 800149c:	429a      	cmp	r2, r3
 800149e:	d301      	bcc.n	80014a4 <RING_BUFFER_Pop+0x32>
		t_next = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	81fb      	strh	r3, [r7, #14]

	*p_data = p_ring_buffer->buffer[p_ring_buffer->tail];
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	88db      	ldrh	r3, [r3, #6]
 80014ac:	4619      	mov	r1, r3
 80014ae:	460b      	mov	r3, r1
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	440b      	add	r3, r1
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	441a      	add	r2, r3
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80014bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	p_ring_buffer->tail = t_next;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	89fa      	ldrh	r2, [r7, #14]
 80014c4:	80da      	strh	r2, [r3, #6]

	return 0;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <RING_BUFFER_Available>:

uint16_t RING_BUFFER_Available(RING_BUFFER_HandleTypeDef *p_ring_buffer){
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
	return (p_ring_buffer->head == p_ring_buffer->tail) ? 0 : 1;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	889a      	ldrh	r2, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	88db      	ldrh	r3, [r3, #6]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	bf14      	ite	ne
 80014e6:	2301      	movne	r3, #1
 80014e8:	2300      	moveq	r3, #0
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	b29b      	uxth	r3, r3
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150c:	4b38      	ldr	r3, [pc, #224]	; (80015f0 <MX_GPIO_Init+0xf8>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a37      	ldr	r2, [pc, #220]	; (80015f0 <MX_GPIO_Init+0xf8>)
 8001512:	f043 0310 	orr.w	r3, r3, #16
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b35      	ldr	r3, [pc, #212]	; (80015f0 <MX_GPIO_Init+0xf8>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001524:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <MX_GPIO_Init+0xf8>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a31      	ldr	r2, [pc, #196]	; (80015f0 <MX_GPIO_Init+0xf8>)
 800152a:	f043 0320 	orr.w	r3, r3, #32
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <MX_GPIO_Init+0xf8>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0320 	and.w	r3, r3, #32
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153c:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <MX_GPIO_Init+0xf8>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a2b      	ldr	r2, [pc, #172]	; (80015f0 <MX_GPIO_Init+0xf8>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <MX_GPIO_Init+0xf8>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <MX_GPIO_Init+0xf8>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a25      	ldr	r2, [pc, #148]	; (80015f0 <MX_GPIO_Init+0xf8>)
 800155a:	f043 0308 	orr.w	r3, r3, #8
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <MX_GPIO_Init+0xf8>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001572:	4820      	ldr	r0, [pc, #128]	; (80015f4 <MX_GPIO_Init+0xfc>)
 8001574:	f001 fa90 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	2182      	movs	r1, #130	; 0x82
 800157c:	481e      	ldr	r0, [pc, #120]	; (80015f8 <MX_GPIO_Init+0x100>)
 800157e:	f001 fa8b 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001588:	481c      	ldr	r0, [pc, #112]	; (80015fc <MX_GPIO_Init+0x104>)
 800158a:	f001 fa85 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800158e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2302      	movs	r3, #2
 800159e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	4619      	mov	r1, r3
 80015a6:	4813      	ldr	r0, [pc, #76]	; (80015f4 <MX_GPIO_Init+0xfc>)
 80015a8:	f001 f8f2 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80015ac:	2382      	movs	r3, #130	; 0x82
 80015ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2302      	movs	r3, #2
 80015ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	4619      	mov	r1, r3
 80015c2:	480d      	ldr	r0, [pc, #52]	; (80015f8 <MX_GPIO_Init+0x100>)
 80015c4:	f001 f8e4 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	4619      	mov	r1, r3
 80015e0:	4806      	ldr	r0, [pc, #24]	; (80015fc <MX_GPIO_Init+0x104>)
 80015e2:	f001 f8d5 	bl	8002790 <HAL_GPIO_Init>

}
 80015e6:	bf00      	nop
 80015e8:	3720      	adds	r7, #32
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40011000 	.word	0x40011000
 80015f8:	40010800 	.word	0x40010800
 80015fc:	40010c00 	.word	0x40010c00

08001600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001606:	f000 fea1 	bl	800234c <HAL_Init>

  /* USER CODE BEGIN Init */
  Init_Theta_Joint(&Theta1, &htim1, TIM_CHANNEL_1, GPIOB, GPIO_PIN_15, JOINT_REVOLUTE_3);
 800160a:	2301      	movs	r3, #1
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <main+0xa8>)
 8001616:	2200      	movs	r2, #0
 8001618:	4924      	ldr	r1, [pc, #144]	; (80016ac <main+0xac>)
 800161a:	4825      	ldr	r0, [pc, #148]	; (80016b0 <main+0xb0>)
 800161c:	f000 f8f9 	bl	8001812 <Init_Theta_Joint>
  Init_Theta_Joint(&Theta2, &htim2, TIM_CHANNEL_1, GPIOA, GPIO_PIN_1, JOINT_REVOLUTE_9);
 8001620:	2302      	movs	r3, #2
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	2302      	movs	r3, #2
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <main+0xb4>)
 800162a:	2200      	movs	r2, #0
 800162c:	4922      	ldr	r1, [pc, #136]	; (80016b8 <main+0xb8>)
 800162e:	4823      	ldr	r0, [pc, #140]	; (80016bc <main+0xbc>)
 8001630:	f000 f8ef 	bl	8001812 <Init_Theta_Joint>
  Init_Theta_Joint(&Theta3, &htim3, TIM_CHANNEL_1, GPIOA, GPIO_PIN_7, JOINT_PRISMATIC);
 8001634:	2300      	movs	r3, #0
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <main+0xb4>)
 800163e:	2200      	movs	r2, #0
 8001640:	491f      	ldr	r1, [pc, #124]	; (80016c0 <main+0xc0>)
 8001642:	4820      	ldr	r0, [pc, #128]	; (80016c4 <main+0xc4>)
 8001644:	f000 f8e5 	bl	8001812 <Init_Theta_Joint>
  RING_BUFFER_Init(&ring_buffer_theta1, Packed_cmd_theta1, MAX_LENGTH_RING_BUFFER);
 8001648:	220a      	movs	r2, #10
 800164a:	491f      	ldr	r1, [pc, #124]	; (80016c8 <main+0xc8>)
 800164c:	481f      	ldr	r0, [pc, #124]	; (80016cc <main+0xcc>)
 800164e:	f7ff fec5 	bl	80013dc <RING_BUFFER_Init>
  RING_BUFFER_Init(&ring_buffer_theta2, Packed_cmd_theta2, MAX_LENGTH_RING_BUFFER);
 8001652:	220a      	movs	r2, #10
 8001654:	491e      	ldr	r1, [pc, #120]	; (80016d0 <main+0xd0>)
 8001656:	481f      	ldr	r0, [pc, #124]	; (80016d4 <main+0xd4>)
 8001658:	f7ff fec0 	bl	80013dc <RING_BUFFER_Init>
  RING_BUFFER_Init(&ring_buffer_theta3, Packed_cmd_theta3, MAX_LENGTH_RING_BUFFER);
 800165c:	220a      	movs	r2, #10
 800165e:	491e      	ldr	r1, [pc, #120]	; (80016d8 <main+0xd8>)
 8001660:	481e      	ldr	r0, [pc, #120]	; (80016dc <main+0xdc>)
 8001662:	f7ff febb 	bl	80013dc <RING_BUFFER_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001666:	f000 f83f 	bl	80016e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166a:	f7ff ff45 	bl	80014f8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800166e:	f000 fb65 	bl	8001d3c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001672:	f000 fc05 	bl	8001e80 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001676:	f000 fc79 	bl	8001f6c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800167a:	f000 fdc5 	bl	8002208 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim1);
//  Trapezoidal_Profile(0,540,&(Theta1.Vel),Theta1.Type);
//  HAL_TIM_PWM_Start_IT(Theta1.Joint.p_Motor_TIM, Theta1.Joint.Motor_Chanel);
  HAL_UART_Receive_IT(&huart2, &rxdata, 1);
 800167e:	2201      	movs	r2, #1
 8001680:	4917      	ldr	r1, [pc, #92]	; (80016e0 <main+0xe0>)
 8001682:	4818      	ldr	r0, [pc, #96]	; (80016e4 <main+0xe4>)
 8001684:	f002 fed9 	bl	800443a <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	  HAL_Delay(5000);
	  COMMAND_LINE_Handle();
 8001688:	f7ff fe58 	bl	800133c <COMMAND_LINE_Handle>
	  Cmd_control_handle(&ring_buffer_theta1,&Theta1);
 800168c:	4908      	ldr	r1, [pc, #32]	; (80016b0 <main+0xb0>)
 800168e:	480f      	ldr	r0, [pc, #60]	; (80016cc <main+0xcc>)
 8001690:	f7ff fdec 	bl	800126c <Cmd_control_handle>
	  Cmd_control_handle(&ring_buffer_theta2,&Theta2);
 8001694:	4909      	ldr	r1, [pc, #36]	; (80016bc <main+0xbc>)
 8001696:	480f      	ldr	r0, [pc, #60]	; (80016d4 <main+0xd4>)
 8001698:	f7ff fde8 	bl	800126c <Cmd_control_handle>
	  Cmd_control_handle(&ring_buffer_theta3,&Theta3);
 800169c:	4909      	ldr	r1, [pc, #36]	; (80016c4 <main+0xc4>)
 800169e:	480f      	ldr	r0, [pc, #60]	; (80016dc <main+0xdc>)
 80016a0:	f7ff fde4 	bl	800126c <Cmd_control_handle>
  {
 80016a4:	e7f0      	b.n	8001688 <main+0x88>
 80016a6:	bf00      	nop
 80016a8:	40010c00 	.word	0x40010c00
 80016ac:	20000554 	.word	0x20000554
 80016b0:	20000318 	.word	0x20000318
 80016b4:	40010800 	.word	0x40010800
 80016b8:	2000059c 	.word	0x2000059c
 80016bc:	20000350 	.word	0x20000350
 80016c0:	200005e4 	.word	0x200005e4
 80016c4:	20000388 	.word	0x20000388
 80016c8:	200003c4 	.word	0x200003c4
 80016cc:	2000052c 	.word	0x2000052c
 80016d0:	2000043c 	.word	0x2000043c
 80016d4:	20000538 	.word	0x20000538
 80016d8:	200004b4 	.word	0x200004b4
 80016dc:	20000544 	.word	0x20000544
 80016e0:	200003c0 	.word	0x200003c0
 80016e4:	2000062c 	.word	0x2000062c

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b090      	sub	sp, #64	; 0x40
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 0318 	add.w	r3, r7, #24
 80016f2:	2228      	movs	r2, #40	; 0x28
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f003 fc0c 	bl	8004f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800170e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001718:	2301      	movs	r3, #1
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171c:	2302      	movs	r3, #2
 800171e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001726:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800172a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172c:	f107 0318 	add.w	r3, r7, #24
 8001730:	4618      	mov	r0, r3
 8001732:	f001 f9c9 	bl	8002ac8 <HAL_RCC_OscConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800173c:	f000 f864 	bl	8001808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001740:	230f      	movs	r3, #15
 8001742:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001744:	2302      	movs	r3, #2
 8001746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800174c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2102      	movs	r1, #2
 800175a:	4618      	mov	r0, r3
 800175c:	f001 fc36 	bl	8002fcc <HAL_RCC_ClockConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001766:	f000 f84f 	bl	8001808 <Error_Handler>
  }
}
 800176a:	bf00      	nop
 800176c:	3740      	adds	r7, #64	; 0x40
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == Theta1.Joint.p_Motor_TIM->Instance){
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d103      	bne.n	8001792 <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
//		Theta1.cnt_pulse++;
//		if(Theta1.cnt_pulse == Theta1.Vel.N_step) {
//			HAL_TIM_PWM_Stop_IT(Theta1.Joint.p_Motor_TIM, Theta1.Joint.Motor_Chanel);
//			return;//reach target
//		}
		Handle_Theta(&Theta1);
 800178a:	480e      	ldr	r0, [pc, #56]	; (80017c4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 800178c:	f000 f938 	bl	8001a00 <Handle_Theta>
	}else if(htim->Instance == Theta2.Joint.p_Motor_TIM->Instance){
		Handle_Theta(&Theta2);
	}else if(htim->Instance == Theta3.Joint.p_Motor_TIM->Instance){
		Handle_Theta(&Theta3);
	}
}
 8001790:	e014      	b.n	80017bc <HAL_TIM_PWM_PulseFinishedCallback+0x48>
	}else if(htim->Instance == Theta2.Joint.p_Motor_TIM->Instance){
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d103      	bne.n	80017a8 <HAL_TIM_PWM_PulseFinishedCallback+0x34>
		Handle_Theta(&Theta2);
 80017a0:	4809      	ldr	r0, [pc, #36]	; (80017c8 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 80017a2:	f000 f92d 	bl	8001a00 <Handle_Theta>
}
 80017a6:	e009      	b.n	80017bc <HAL_TIM_PWM_PulseFinishedCallback+0x48>
	}else if(htim->Instance == Theta3.Joint.p_Motor_TIM->Instance){
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d102      	bne.n	80017bc <HAL_TIM_PWM_PulseFinishedCallback+0x48>
		Handle_Theta(&Theta3);
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 80017b8:	f000 f922 	bl	8001a00 <Handle_Theta>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000318 	.word	0x20000318
 80017c8:	20000350 	.word	0x20000350
 80017cc:	20000388 	.word	0x20000388

080017d0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance){
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_UART_RxCpltCallback+0x30>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d109      	bne.n	80017f8 <HAL_UART_RxCpltCallback+0x28>
		COMMAND_LINE_Receive(rxdata);
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <HAL_UART_RxCpltCallback+0x34>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fcb5 	bl	8001158 <COMMAND_LINE_Receive>
		HAL_UART_Receive_IT(&huart2, &rxdata, 1);
 80017ee:	2201      	movs	r2, #1
 80017f0:	4904      	ldr	r1, [pc, #16]	; (8001804 <HAL_UART_RxCpltCallback+0x34>)
 80017f2:	4803      	ldr	r0, [pc, #12]	; (8001800 <HAL_UART_RxCpltCallback+0x30>)
 80017f4:	f002 fe21 	bl	800443a <HAL_UART_Receive_IT>
	}
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	2000062c 	.word	0x2000062c
 8001804:	200003c0 	.word	0x200003c0

08001808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800180c:	b672      	cpsid	i
}
 800180e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001810:	e7fe      	b.n	8001810 <Error_Handler+0x8>

08001812 <Init_Theta_Joint>:
void Init_Theta_Joint(Scara_Theta *Theta,
					  TIM_HandleTypeDef *p_TIM,
					  uint32_t Chanel,
					  GPIO_TypeDef *p_GPIOx,
					  uint16_t Pin,
					  JOINT_Type Type){
 8001812:	b480      	push	{r7}
 8001814:	b085      	sub	sp, #20
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	603b      	str	r3, [r7, #0]
	Theta->Joint.p_Motor_TIM = p_TIM;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	601a      	str	r2, [r3, #0]
	Theta->Joint.Motor_Chanel = Chanel;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	605a      	str	r2, [r3, #4]
	Theta->Joint.p_Motor_GPIOx = p_GPIOx;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	609a      	str	r2, [r3, #8]
	Theta->Joint.Motor_Dir_Pin = Pin;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8b3a      	ldrh	r2, [r7, #24]
 8001836:	819a      	strh	r2, [r3, #12]
	Theta->Type = Type;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	7f3a      	ldrb	r2, [r7, #28]
 800183c:	771a      	strb	r2, [r3, #28]
	Theta->cnt_pulse = 0;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]
	Theta->Vel.ARR_val=999;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f240 32e7 	movw	r2, #999	; 0x3e7
 800184a:	635a      	str	r2, [r3, #52]	; 0x34
	Theta->Dir = DIR_IDLE;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2202      	movs	r2, #2
 8001850:	741a      	strb	r2, [r3, #16]
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <Set_Joint_Speed>:

void Set_Joint_Speed(Scara_Theta *Theta, uint32_t speed){
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_AUTORELOAD(Theta->Joint.p_Motor_TIM, speed);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(Theta->Joint.p_Motor_TIM, Theta->Joint.Motor_Chanel,(uint32_t)speed/2);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d106      	bne.n	800188e <Set_Joint_Speed+0x32>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	0852      	lsrs	r2, r2, #1
 800188a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800188c:	e01b      	b.n	80018c6 <Set_Joint_Speed+0x6a>
	__HAL_TIM_SET_COMPARE(Theta->Joint.p_Motor_TIM, Theta->Joint.Motor_Chanel,(uint32_t)speed/2);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b04      	cmp	r3, #4
 8001894:	d106      	bne.n	80018a4 <Set_Joint_Speed+0x48>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	085b      	lsrs	r3, r3, #1
 80018a0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80018a2:	e010      	b.n	80018c6 <Set_Joint_Speed+0x6a>
	__HAL_TIM_SET_COMPARE(Theta->Joint.p_Motor_TIM, Theta->Joint.Motor_Chanel,(uint32_t)speed/2);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d106      	bne.n	80018ba <Set_Joint_Speed+0x5e>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	085b      	lsrs	r3, r3, #1
 80018b6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80018b8:	e005      	b.n	80018c6 <Set_Joint_Speed+0x6a>
	__HAL_TIM_SET_COMPARE(Theta->Joint.p_Motor_TIM, Theta->Joint.Motor_Chanel,(uint32_t)speed/2);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	085b      	lsrs	r3, r3, #1
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <Trapezoidal_Profile>:

void Trapezoidal_Profile(float curpos, float despos, Vel_t *Vel, JOINT_Type type){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	70fb      	strb	r3, [r7, #3]

	float N = fabs(despos - curpos);
 80018de:	68f9      	ldr	r1, [r7, #12]
 80018e0:	68b8      	ldr	r0, [r7, #8]
 80018e2:	f7ff f911 	bl	8000b08 <__aeabi_fsub>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018ec:	617b      	str	r3, [r7, #20]
	if(N == 0.0f){
 80018ee:	f04f 0100 	mov.w	r1, #0
 80018f2:	6978      	ldr	r0, [r7, #20]
 80018f4:	f7ff fba6 	bl	8001044 <__aeabi_fcmpeq>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <Trapezoidal_Profile+0x42>
		Vel->N_step = 0;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
		Vel->Acc_step_index = 0;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	605a      	str	r2, [r3, #4]
		Vel->De_step_index = 0;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
		return;
 8001910:	e066      	b.n	80019e0 <Trapezoidal_Profile+0x110>
	}

	switch (type) {
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d016      	beq.n	8001946 <Trapezoidal_Profile+0x76>
 8001918:	2b02      	cmp	r3, #2
 800191a:	dc31      	bgt.n	8001980 <Trapezoidal_Profile+0xb0>
 800191c:	2b00      	cmp	r3, #0
 800191e:	d023      	beq.n	8001968 <Trapezoidal_Profile+0x98>
 8001920:	2b01      	cmp	r3, #1
 8001922:	d12d      	bne.n	8001980 <Trapezoidal_Profile+0xb0>
		case JOINT_REVOLUTE_3:
			Vel->N_step =(uint32_t)(N*RATIO_JOINT_3/(DEG_PER_PULSE));
 8001924:	4930      	ldr	r1, [pc, #192]	; (80019e8 <Trapezoidal_Profile+0x118>)
 8001926:	6978      	ldr	r0, [r7, #20]
 8001928:	f7ff f9f8 	bl	8000d1c <__aeabi_fmul>
 800192c:	4603      	mov	r3, r0
 800192e:	492f      	ldr	r1, [pc, #188]	; (80019ec <Trapezoidal_Profile+0x11c>)
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff faa7 	bl	8000e84 <__aeabi_fdiv>
 8001936:	4603      	mov	r3, r0
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fbb5 	bl	80010a8 <__aeabi_f2uiz>
 800193e:	4602      	mov	r2, r0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	601a      	str	r2, [r3, #0]
			break;
 8001944:	e01d      	b.n	8001982 <Trapezoidal_Profile+0xb2>
		case JOINT_REVOLUTE_9:
			Vel->N_step =(uint32_t)(N*RATIO_JOINT_9/(DEG_PER_PULSE));
 8001946:	492a      	ldr	r1, [pc, #168]	; (80019f0 <Trapezoidal_Profile+0x120>)
 8001948:	6978      	ldr	r0, [r7, #20]
 800194a:	f7ff f9e7 	bl	8000d1c <__aeabi_fmul>
 800194e:	4603      	mov	r3, r0
 8001950:	4926      	ldr	r1, [pc, #152]	; (80019ec <Trapezoidal_Profile+0x11c>)
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fa96 	bl	8000e84 <__aeabi_fdiv>
 8001958:	4603      	mov	r3, r0
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fba4 	bl	80010a8 <__aeabi_f2uiz>
 8001960:	4602      	mov	r2, r0
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	601a      	str	r2, [r3, #0]
			break;
 8001966:	e00c      	b.n	8001982 <Trapezoidal_Profile+0xb2>
		case JOINT_PRISMATIC:
			Vel->N_step =(uint32_t)(N/DIS_PER_PULSE);
 8001968:	4922      	ldr	r1, [pc, #136]	; (80019f4 <Trapezoidal_Profile+0x124>)
 800196a:	6978      	ldr	r0, [r7, #20]
 800196c:	f7ff fa8a 	bl	8000e84 <__aeabi_fdiv>
 8001970:	4603      	mov	r3, r0
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fb98 	bl	80010a8 <__aeabi_f2uiz>
 8001978:	4602      	mov	r2, r0
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	601a      	str	r2, [r3, #0]
			break;
 800197e:	e000      	b.n	8001982 <Trapezoidal_Profile+0xb2>
		default:
			break;
 8001980:	bf00      	nop
	}
	if(Vel->N_step*PERCENT_DIS_ACC < DELTA_VEL_ARR){
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f970 	bl	8000c6c <__aeabi_ui2f>
 800198c:	4603      	mov	r3, r0
 800198e:	491a      	ldr	r1, [pc, #104]	; (80019f8 <Trapezoidal_Profile+0x128>)
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff f9c3 	bl	8000d1c <__aeabi_fmul>
 8001996:	4603      	mov	r3, r0
 8001998:	4918      	ldr	r1, [pc, #96]	; (80019fc <Trapezoidal_Profile+0x12c>)
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fb5c 	bl	8001058 <__aeabi_fcmplt>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d011      	beq.n	80019ca <Trapezoidal_Profile+0xfa>
		Vel->Acc_step_index = (uint32_t) Vel->N_step*PERCENT_DIS_ACC;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff f95e 	bl	8000c6c <__aeabi_ui2f>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4911      	ldr	r1, [pc, #68]	; (80019f8 <Trapezoidal_Profile+0x128>)
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff f9b1 	bl	8000d1c <__aeabi_fmul>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fb73 	bl	80010a8 <__aeabi_f2uiz>
 80019c2:	4602      	mov	r2, r0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	e003      	b.n	80019d2 <Trapezoidal_Profile+0x102>
	} else{
		Vel->Acc_step_index = DELTA_VEL_ARR;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019d0:	605a      	str	r2, [r3, #4]
	}
	Vel->De_step_index = Vel->N_step - Vel->Acc_step_index;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	1ad2      	subs	r2, r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	609a      	str	r2, [r3, #8]


}
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40400000 	.word	0x40400000
 80019ec:	3e666666 	.word	0x3e666666
 80019f0:	41100000 	.word	0x41100000
 80019f4:	3aa3d70a 	.word	0x3aa3d70a
 80019f8:	3e99999a 	.word	0x3e99999a
 80019fc:	44480000 	.word	0x44480000

08001a00 <Handle_Theta>:

void Handle_Theta(Scara_Theta *Theta){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	if(Theta->Vel.N_step > 0){
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d040      	beq.n	8001a92 <Handle_Theta+0x92>
		if(Theta->cnt_pulse < Theta->Vel.Acc_step_index){
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1a      	ldr	r2, [r3, #32]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d20b      	bcs.n	8001a34 <Handle_Theta+0x34>
			Set_Joint_Speed(Theta, Theta->Vel.ARR_val);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a20:	4619      	mov	r1, r3
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ff1a 	bl	800185c <Set_Joint_Speed>
			Theta->Vel.ARR_val--;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2c:	1e5a      	subs	r2, r3, #1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	635a      	str	r2, [r3, #52]	; 0x34
 8001a32:	e010      	b.n	8001a56 <Handle_Theta+0x56>
		}else if(Theta->cnt_pulse > Theta->Vel.De_step_index){
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1a      	ldr	r2, [r3, #32]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d90a      	bls.n	8001a56 <Handle_Theta+0x56>
			Set_Joint_Speed(Theta, Theta->Vel.ARR_val);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a44:	4619      	mov	r1, r3
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ff08 	bl	800185c <Set_Joint_Speed>
			Theta->Vel.ARR_val++;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	635a      	str	r2, [r3, #52]	; 0x34
		}
		Theta->cnt_pulse++;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	621a      	str	r2, [r3, #32]
		if(Theta->cnt_pulse == Theta->Vel.N_step) {
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1a      	ldr	r2, [r3, #32]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d112      	bne.n	8001a92 <Handle_Theta+0x92>
			HAL_TIM_PWM_Stop_IT(Theta->Joint.p_Motor_TIM, Theta->Joint.Motor_Chanel);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f001 fdce 	bl	8003618 <HAL_TIM_PWM_Stop_IT>
			Theta->Cur_Theta = Theta->Des_Theta;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695a      	ldr	r2, [r3, #20]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	619a      	str	r2, [r3, #24]
			Theta->cnt_pulse = 0;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	621a      	str	r2, [r3, #32]
			Theta->Dir = DIR_IDLE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	741a      	strb	r2, [r3, #16]
			return;//reach target
 8001a90:	bf00      	nop
		}
	}

}
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_MspInit+0x5c>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <HAL_MspInit+0x5c>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6193      	str	r3, [r2, #24]
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_MspInit+0x5c>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_MspInit+0x5c>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <HAL_MspInit+0x5c>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <HAL_MspInit+0x5c>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_MspInit+0x60>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <HAL_MspInit+0x60>)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010000 	.word	0x40010000

08001afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <NMI_Handler+0x4>

08001b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b06:	e7fe      	b.n	8001b06 <HardFault_Handler+0x4>

08001b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <MemManage_Handler+0x4>

08001b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <BusFault_Handler+0x4>

08001b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <UsageFault_Handler+0x4>

08001b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b42:	f000 fc49 	bl	80023d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <TIM1_UP_IRQHandler+0x10>)
 8001b52:	f001 fe13 	bl	800377c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000554 	.word	0x20000554

08001b60 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <TIM1_CC_IRQHandler+0x10>)
 8001b66:	f001 fe09 	bl	800377c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000554 	.word	0x20000554

08001b74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <TIM2_IRQHandler+0x10>)
 8001b7a:	f001 fdff 	bl	800377c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000059c 	.word	0x2000059c

08001b88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <TIM3_IRQHandler+0x10>)
 8001b8e:	f001 fdf5 	bl	800377c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200005e4 	.word	0x200005e4

08001b9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <USART2_IRQHandler+0x10>)
 8001ba2:	f002 fc6f 	bl	8004484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000062c 	.word	0x2000062c

08001bb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
	return 1;
 8001bb4:	2301      	movs	r3, #1
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <_kill>:

int _kill(int pid, int sig)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bc8:	f003 f972 	bl	8004eb0 <__errno>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2216      	movs	r2, #22
 8001bd0:	601a      	str	r2, [r3, #0]
	return -1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <_exit>:

void _exit (int status)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001be6:	f04f 31ff 	mov.w	r1, #4294967295
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffe7 	bl	8001bbe <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bf0:	e7fe      	b.n	8001bf0 <_exit+0x12>

08001bf2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e00a      	b.n	8001c1a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c04:	f3af 8000 	nop.w
 8001c08:	4601      	mov	r1, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	60ba      	str	r2, [r7, #8]
 8001c10:	b2ca      	uxtb	r2, r1
 8001c12:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dbf0      	blt.n	8001c04 <_read+0x12>
	}

return len;
 8001c22:	687b      	ldr	r3, [r7, #4]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	e009      	b.n	8001c52 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	60ba      	str	r2, [r7, #8]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dbf1      	blt.n	8001c3e <_write+0x12>
	}
	return len;
 8001c5a:	687b      	ldr	r3, [r7, #4]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_close>:

int _close(int file)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	return -1;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c8a:	605a      	str	r2, [r3, #4]
	return 0;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <_isatty>:

int _isatty(int file)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	return 1;
 8001ca0:	2301      	movs	r3, #1
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
	return 0;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <_sbrk+0x5c>)
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <_sbrk+0x60>)
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <_sbrk+0x64>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <_sbrk+0x68>)
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d207      	bcs.n	8001d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf4:	f003 f8dc 	bl	8004eb0 <__errno>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001d02:	e009      	b.n	8001d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <_sbrk+0x64>)
 8001d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20005000 	.word	0x20005000
 8001d24:	00000400 	.word	0x00000400
 8001d28:	20000550 	.word	0x20000550
 8001d2c:	20000688 	.word	0x20000688

08001d30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b096      	sub	sp, #88	; 0x58
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
 8001d6a:	615a      	str	r2, [r3, #20]
 8001d6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	2220      	movs	r2, #32
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 f8cd 	bl	8004f14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d7a:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <MX_TIM1_Init+0x13c>)
 8001d7c:	4a3f      	ldr	r2, [pc, #252]	; (8001e7c <MX_TIM1_Init+0x140>)
 8001d7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8001d80:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <MX_TIM1_Init+0x13c>)
 8001d82:	223f      	movs	r2, #63	; 0x3f
 8001d84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d86:	4b3c      	ldr	r3, [pc, #240]	; (8001e78 <MX_TIM1_Init+0x13c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001d8c:	4b3a      	ldr	r3, [pc, #232]	; (8001e78 <MX_TIM1_Init+0x13c>)
 8001d8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d94:	4b38      	ldr	r3, [pc, #224]	; (8001e78 <MX_TIM1_Init+0x13c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d9a:	4b37      	ldr	r3, [pc, #220]	; (8001e78 <MX_TIM1_Init+0x13c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001da0:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <MX_TIM1_Init+0x13c>)
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001da6:	4834      	ldr	r0, [pc, #208]	; (8001e78 <MX_TIM1_Init+0x13c>)
 8001da8:	f001 fa9e 	bl	80032e8 <HAL_TIM_Base_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001db2:	f7ff fd29 	bl	8001808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	482d      	ldr	r0, [pc, #180]	; (8001e78 <MX_TIM1_Init+0x13c>)
 8001dc4:	f001 fe8c 	bl	8003ae0 <HAL_TIM_ConfigClockSource>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001dce:	f7ff fd1b 	bl	8001808 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dd2:	4829      	ldr	r0, [pc, #164]	; (8001e78 <MX_TIM1_Init+0x13c>)
 8001dd4:	f001 fad7 	bl	8003386 <HAL_TIM_PWM_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001dde:	f7ff fd13 	bl	8001808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dee:	4619      	mov	r1, r3
 8001df0:	4821      	ldr	r0, [pc, #132]	; (8001e78 <MX_TIM1_Init+0x13c>)
 8001df2:	f002 fa11 	bl	8004218 <HAL_TIMEx_MasterConfigSynchronization>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001dfc:	f7ff fd04 	bl	8001808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e00:	2360      	movs	r3, #96	; 0x60
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 8001e04:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e22:	2200      	movs	r2, #0
 8001e24:	4619      	mov	r1, r3
 8001e26:	4814      	ldr	r0, [pc, #80]	; (8001e78 <MX_TIM1_Init+0x13c>)
 8001e28:	f001 fd98 	bl	800395c <HAL_TIM_PWM_ConfigChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001e32:	f7ff fce9 	bl	8001808 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	4619      	mov	r1, r3
 8001e58:	4807      	ldr	r0, [pc, #28]	; (8001e78 <MX_TIM1_Init+0x13c>)
 8001e5a:	f002 fa3b 	bl	80042d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001e64:	f7ff fcd0 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e68:	4803      	ldr	r0, [pc, #12]	; (8001e78 <MX_TIM1_Init+0x13c>)
 8001e6a:	f000 f95b 	bl	8002124 <HAL_TIM_MspPostInit>

}
 8001e6e:	bf00      	nop
 8001e70:	3758      	adds	r7, #88	; 0x58
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000554 	.word	0x20000554
 8001e7c:	40012c00 	.word	0x40012c00

08001e80 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08e      	sub	sp, #56	; 0x38
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e94:	f107 0320 	add.w	r3, r7, #32
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
 8001eac:	615a      	str	r2, [r3, #20]
 8001eae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <MX_TIM2_Init+0xe8>)
 8001eb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <MX_TIM2_Init+0xe8>)
 8001eba:	223f      	movs	r2, #63	; 0x3f
 8001ebc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebe:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <MX_TIM2_Init+0xe8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001ec4:	4b28      	ldr	r3, [pc, #160]	; (8001f68 <MX_TIM2_Init+0xe8>)
 8001ec6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ecc:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <MX_TIM2_Init+0xe8>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ed2:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <MX_TIM2_Init+0xe8>)
 8001ed4:	2280      	movs	r2, #128	; 0x80
 8001ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ed8:	4823      	ldr	r0, [pc, #140]	; (8001f68 <MX_TIM2_Init+0xe8>)
 8001eda:	f001 fa05 	bl	80032e8 <HAL_TIM_Base_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001ee4:	f7ff fc90 	bl	8001808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	481c      	ldr	r0, [pc, #112]	; (8001f68 <MX_TIM2_Init+0xe8>)
 8001ef6:	f001 fdf3 	bl	8003ae0 <HAL_TIM_ConfigClockSource>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f00:	f7ff fc82 	bl	8001808 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f04:	4818      	ldr	r0, [pc, #96]	; (8001f68 <MX_TIM2_Init+0xe8>)
 8001f06:	f001 fa3e 	bl	8003386 <HAL_TIM_PWM_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f10:	f7ff fc7a 	bl	8001808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f14:	2300      	movs	r3, #0
 8001f16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f1c:	f107 0320 	add.w	r3, r7, #32
 8001f20:	4619      	mov	r1, r3
 8001f22:	4811      	ldr	r0, [pc, #68]	; (8001f68 <MX_TIM2_Init+0xe8>)
 8001f24:	f002 f978 	bl	8004218 <HAL_TIMEx_MasterConfigSynchronization>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f2e:	f7ff fc6b 	bl	8001808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f32:	2360      	movs	r3, #96	; 0x60
 8001f34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8001f36:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001f3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	2200      	movs	r2, #0
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4807      	ldr	r0, [pc, #28]	; (8001f68 <MX_TIM2_Init+0xe8>)
 8001f4c:	f001 fd06 	bl	800395c <HAL_TIM_PWM_ConfigChannel>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001f56:	f7ff fc57 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f5a:	4803      	ldr	r0, [pc, #12]	; (8001f68 <MX_TIM2_Init+0xe8>)
 8001f5c:	f000 f8e2 	bl	8002124 <HAL_TIM_MspPostInit>

}
 8001f60:	bf00      	nop
 8001f62:	3738      	adds	r7, #56	; 0x38
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	2000059c 	.word	0x2000059c

08001f6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08e      	sub	sp, #56	; 0x38
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f80:	f107 0320 	add.w	r3, r7, #32
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
 8001f98:	615a      	str	r2, [r3, #20]
 8001f9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f9c:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <MX_TIM3_Init+0xe8>)
 8001f9e:	4a2e      	ldr	r2, [pc, #184]	; (8002058 <MX_TIM3_Init+0xec>)
 8001fa0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <MX_TIM3_Init+0xe8>)
 8001fa4:	221f      	movs	r2, #31
 8001fa6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <MX_TIM3_Init+0xe8>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001fae:	4b29      	ldr	r3, [pc, #164]	; (8002054 <MX_TIM3_Init+0xe8>)
 8001fb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb6:	4b27      	ldr	r3, [pc, #156]	; (8002054 <MX_TIM3_Init+0xe8>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fbc:	4b25      	ldr	r3, [pc, #148]	; (8002054 <MX_TIM3_Init+0xe8>)
 8001fbe:	2280      	movs	r2, #128	; 0x80
 8001fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fc2:	4824      	ldr	r0, [pc, #144]	; (8002054 <MX_TIM3_Init+0xe8>)
 8001fc4:	f001 f990 	bl	80032e8 <HAL_TIM_Base_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001fce:	f7ff fc1b 	bl	8001808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fdc:	4619      	mov	r1, r3
 8001fde:	481d      	ldr	r0, [pc, #116]	; (8002054 <MX_TIM3_Init+0xe8>)
 8001fe0:	f001 fd7e 	bl	8003ae0 <HAL_TIM_ConfigClockSource>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001fea:	f7ff fc0d 	bl	8001808 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fee:	4819      	ldr	r0, [pc, #100]	; (8002054 <MX_TIM3_Init+0xe8>)
 8001ff0:	f001 f9c9 	bl	8003386 <HAL_TIM_PWM_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001ffa:	f7ff fc05 	bl	8001808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002006:	f107 0320 	add.w	r3, r7, #32
 800200a:	4619      	mov	r1, r3
 800200c:	4811      	ldr	r0, [pc, #68]	; (8002054 <MX_TIM3_Init+0xe8>)
 800200e:	f002 f903 	bl	8004218 <HAL_TIMEx_MasterConfigSynchronization>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002018:	f7ff fbf6 	bl	8001808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201c:	2360      	movs	r3, #96	; 0x60
 800201e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8002020:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002024:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	2200      	movs	r2, #0
 8002032:	4619      	mov	r1, r3
 8002034:	4807      	ldr	r0, [pc, #28]	; (8002054 <MX_TIM3_Init+0xe8>)
 8002036:	f001 fc91 	bl	800395c <HAL_TIM_PWM_ConfigChannel>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002040:	f7ff fbe2 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002044:	4803      	ldr	r0, [pc, #12]	; (8002054 <MX_TIM3_Init+0xe8>)
 8002046:	f000 f86d 	bl	8002124 <HAL_TIM_MspPostInit>

}
 800204a:	bf00      	nop
 800204c:	3738      	adds	r7, #56	; 0x38
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200005e4 	.word	0x200005e4
 8002058:	40000400 	.word	0x40000400

0800205c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a2b      	ldr	r2, [pc, #172]	; (8002118 <HAL_TIM_Base_MspInit+0xbc>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d11c      	bne.n	80020a8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800206e:	4b2b      	ldr	r3, [pc, #172]	; (800211c <HAL_TIM_Base_MspInit+0xc0>)
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	4a2a      	ldr	r2, [pc, #168]	; (800211c <HAL_TIM_Base_MspInit+0xc0>)
 8002074:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002078:	6193      	str	r3, [r2, #24]
 800207a:	4b28      	ldr	r3, [pc, #160]	; (800211c <HAL_TIM_Base_MspInit+0xc0>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	2019      	movs	r0, #25
 800208c:	f000 fa97 	bl	80025be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002090:	2019      	movs	r0, #25
 8002092:	f000 fab0 	bl	80025f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	201b      	movs	r0, #27
 800209c:	f000 fa8f 	bl	80025be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80020a0:	201b      	movs	r0, #27
 80020a2:	f000 faa8 	bl	80025f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80020a6:	e032      	b.n	800210e <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b0:	d114      	bne.n	80020dc <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <HAL_TIM_Base_MspInit+0xc0>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4a19      	ldr	r2, [pc, #100]	; (800211c <HAL_TIM_Base_MspInit+0xc0>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	61d3      	str	r3, [r2, #28]
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_TIM_Base_MspInit+0xc0>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	201c      	movs	r0, #28
 80020d0:	f000 fa75 	bl	80025be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020d4:	201c      	movs	r0, #28
 80020d6:	f000 fa8e 	bl	80025f6 <HAL_NVIC_EnableIRQ>
}
 80020da:	e018      	b.n	800210e <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM3)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <HAL_TIM_Base_MspInit+0xc4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d113      	bne.n	800210e <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <HAL_TIM_Base_MspInit+0xc0>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	4a0c      	ldr	r2, [pc, #48]	; (800211c <HAL_TIM_Base_MspInit+0xc0>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	61d3      	str	r3, [r2, #28]
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_TIM_Base_MspInit+0xc0>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	201d      	movs	r0, #29
 8002104:	f000 fa5b 	bl	80025be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002108:	201d      	movs	r0, #29
 800210a:	f000 fa74 	bl	80025f6 <HAL_NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40012c00 	.word	0x40012c00
 800211c:	40021000 	.word	0x40021000
 8002120:	40000400 	.word	0x40000400

08002124 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0318 	add.w	r3, r7, #24
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a2e      	ldr	r2, [pc, #184]	; (80021f8 <HAL_TIM_MspPostInit+0xd4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d119      	bne.n	8002178 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002144:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <HAL_TIM_MspPostInit+0xd8>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	4a2c      	ldr	r2, [pc, #176]	; (80021fc <HAL_TIM_MspPostInit+0xd8>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	6193      	str	r3, [r2, #24]
 8002150:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <HAL_TIM_MspPostInit+0xd8>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800215c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002166:	2302      	movs	r3, #2
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216a:	f107 0318 	add.w	r3, r7, #24
 800216e:	4619      	mov	r1, r3
 8002170:	4823      	ldr	r0, [pc, #140]	; (8002200 <HAL_TIM_MspPostInit+0xdc>)
 8002172:	f000 fb0d 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002176:	e03a      	b.n	80021ee <HAL_TIM_MspPostInit+0xca>
  else if(timHandle->Instance==TIM2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002180:	d118      	bne.n	80021b4 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <HAL_TIM_MspPostInit+0xd8>)
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <HAL_TIM_MspPostInit+0xd8>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6193      	str	r3, [r2, #24]
 800218e:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_TIM_MspPostInit+0xd8>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800219a:	2301      	movs	r3, #1
 800219c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2302      	movs	r3, #2
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 0318 	add.w	r3, r7, #24
 80021aa:	4619      	mov	r1, r3
 80021ac:	4814      	ldr	r0, [pc, #80]	; (8002200 <HAL_TIM_MspPostInit+0xdc>)
 80021ae:	f000 faef 	bl	8002790 <HAL_GPIO_Init>
}
 80021b2:	e01c      	b.n	80021ee <HAL_TIM_MspPostInit+0xca>
  else if(timHandle->Instance==TIM3)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a12      	ldr	r2, [pc, #72]	; (8002204 <HAL_TIM_MspPostInit+0xe0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d117      	bne.n	80021ee <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <HAL_TIM_MspPostInit+0xd8>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	4a0e      	ldr	r2, [pc, #56]	; (80021fc <HAL_TIM_MspPostInit+0xd8>)
 80021c4:	f043 0304 	orr.w	r3, r3, #4
 80021c8:	6193      	str	r3, [r2, #24]
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <HAL_TIM_MspPostInit+0xd8>)
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021d6:	2340      	movs	r3, #64	; 0x40
 80021d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2302      	movs	r3, #2
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e2:	f107 0318 	add.w	r3, r7, #24
 80021e6:	4619      	mov	r1, r3
 80021e8:	4805      	ldr	r0, [pc, #20]	; (8002200 <HAL_TIM_MspPostInit+0xdc>)
 80021ea:	f000 fad1 	bl	8002790 <HAL_GPIO_Init>
}
 80021ee:	bf00      	nop
 80021f0:	3728      	adds	r7, #40	; 0x28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40012c00 	.word	0x40012c00
 80021fc:	40021000 	.word	0x40021000
 8002200:	40010800 	.word	0x40010800
 8002204:	40000400 	.word	0x40000400

08002208 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <MX_USART2_UART_Init+0x50>)
 8002210:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 8002214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002218:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 8002222:	2200      	movs	r2, #0
 8002224:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002226:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 800222e:	220c      	movs	r2, #12
 8002230:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800223e:	4805      	ldr	r0, [pc, #20]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 8002240:	f002 f8ab 	bl	800439a <HAL_UART_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800224a:	f7ff fadd 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	2000062c 	.word	0x2000062c
 8002258:	40004400 	.word	0x40004400

0800225c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 0310 	add.w	r3, r7, #16
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <HAL_UART_MspInit+0x98>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d137      	bne.n	80022ec <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800227c:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <HAL_UART_MspInit+0x9c>)
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <HAL_UART_MspInit+0x9c>)
 8002282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002286:	61d3      	str	r3, [r2, #28]
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_UART_MspInit+0x9c>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002294:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <HAL_UART_MspInit+0x9c>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <HAL_UART_MspInit+0x9c>)
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	6193      	str	r3, [r2, #24]
 80022a0:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <HAL_UART_MspInit+0x9c>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022ac:	2304      	movs	r3, #4
 80022ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b4:	2303      	movs	r3, #3
 80022b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	4619      	mov	r1, r3
 80022be:	480f      	ldr	r0, [pc, #60]	; (80022fc <HAL_UART_MspInit+0xa0>)
 80022c0:	f000 fa66 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022c4:	2308      	movs	r3, #8
 80022c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d0:	f107 0310 	add.w	r3, r7, #16
 80022d4:	4619      	mov	r1, r3
 80022d6:	4809      	ldr	r0, [pc, #36]	; (80022fc <HAL_UART_MspInit+0xa0>)
 80022d8:	f000 fa5a 	bl	8002790 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022dc:	2200      	movs	r2, #0
 80022de:	2100      	movs	r1, #0
 80022e0:	2026      	movs	r0, #38	; 0x26
 80022e2:	f000 f96c 	bl	80025be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022e6:	2026      	movs	r0, #38	; 0x26
 80022e8:	f000 f985 	bl	80025f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022ec:	bf00      	nop
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40004400 	.word	0x40004400
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40010800 	.word	0x40010800

08002300 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002300:	f7ff fd16 	bl	8001d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002304:	480b      	ldr	r0, [pc, #44]	; (8002334 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002306:	490c      	ldr	r1, [pc, #48]	; (8002338 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002308:	4a0c      	ldr	r2, [pc, #48]	; (800233c <LoopFillZerobss+0x16>)
  movs r3, #0
 800230a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800230c:	e002      	b.n	8002314 <LoopCopyDataInit>

0800230e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800230e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002312:	3304      	adds	r3, #4

08002314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002318:	d3f9      	bcc.n	800230e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231a:	4a09      	ldr	r2, [pc, #36]	; (8002340 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800231c:	4c09      	ldr	r4, [pc, #36]	; (8002344 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002320:	e001      	b.n	8002326 <LoopFillZerobss>

08002322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002324:	3204      	adds	r2, #4

08002326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002328:	d3fb      	bcc.n	8002322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800232a:	f002 fdc7 	bl	8004ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800232e:	f7ff f967 	bl	8001600 <main>
  bx lr
 8002332:	4770      	bx	lr
  ldr r0, =_sdata
 8002334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002338:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800233c:	080081e0 	.word	0x080081e0
  ldr r2, =_sbss
 8002340:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002344:	20000688 	.word	0x20000688

08002348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002348:	e7fe      	b.n	8002348 <ADC1_2_IRQHandler>
	...

0800234c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <HAL_Init+0x28>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a07      	ldr	r2, [pc, #28]	; (8002374 <HAL_Init+0x28>)
 8002356:	f043 0310 	orr.w	r3, r3, #16
 800235a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800235c:	2003      	movs	r0, #3
 800235e:	f000 f923 	bl	80025a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002362:	200f      	movs	r0, #15
 8002364:	f000 f808 	bl	8002378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002368:	f7ff fb96 	bl	8001a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40022000 	.word	0x40022000

08002378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002380:	4b12      	ldr	r3, [pc, #72]	; (80023cc <HAL_InitTick+0x54>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_InitTick+0x58>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4619      	mov	r1, r3
 800238a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800238e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f93b 	bl	8002612 <HAL_SYSTICK_Config>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00e      	b.n	80023c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b0f      	cmp	r3, #15
 80023aa:	d80a      	bhi.n	80023c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ac:	2200      	movs	r2, #0
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295
 80023b4:	f000 f903 	bl	80025be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023b8:	4a06      	ldr	r2, [pc, #24]	; (80023d4 <HAL_InitTick+0x5c>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	e000      	b.n	80023c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000018 	.word	0x20000018
 80023d0:	20000020 	.word	0x20000020
 80023d4:	2000001c 	.word	0x2000001c

080023d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_IncTick+0x1c>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_IncTick+0x20>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	4a03      	ldr	r2, [pc, #12]	; (80023f8 <HAL_IncTick+0x20>)
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	20000020 	.word	0x20000020
 80023f8:	20000674 	.word	0x20000674

080023fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002400:	4b02      	ldr	r3, [pc, #8]	; (800240c <HAL_GetTick+0x10>)
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	20000674 	.word	0x20000674

08002410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800242c:	4013      	ands	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800243c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002442:	4a04      	ldr	r2, [pc, #16]	; (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	60d3      	str	r3, [r2, #12]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <__NVIC_GetPriorityGrouping+0x18>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 0307 	and.w	r3, r3, #7
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	2b00      	cmp	r3, #0
 8002484:	db0b      	blt.n	800249e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	f003 021f 	and.w	r2, r3, #31
 800248c:	4906      	ldr	r1, [pc, #24]	; (80024a8 <__NVIC_EnableIRQ+0x34>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	2001      	movs	r0, #1
 8002496:	fa00 f202 	lsl.w	r2, r0, r2
 800249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	e000e100 	.word	0xe000e100

080024ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	6039      	str	r1, [r7, #0]
 80024b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	db0a      	blt.n	80024d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	490c      	ldr	r1, [pc, #48]	; (80024f8 <__NVIC_SetPriority+0x4c>)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	0112      	lsls	r2, r2, #4
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	440b      	add	r3, r1
 80024d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d4:	e00a      	b.n	80024ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4908      	ldr	r1, [pc, #32]	; (80024fc <__NVIC_SetPriority+0x50>)
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	3b04      	subs	r3, #4
 80024e4:	0112      	lsls	r2, r2, #4
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	440b      	add	r3, r1
 80024ea:	761a      	strb	r2, [r3, #24]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	e000e100 	.word	0xe000e100
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	; 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f1c3 0307 	rsb	r3, r3, #7
 800251a:	2b04      	cmp	r3, #4
 800251c:	bf28      	it	cs
 800251e:	2304      	movcs	r3, #4
 8002520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3304      	adds	r3, #4
 8002526:	2b06      	cmp	r3, #6
 8002528:	d902      	bls.n	8002530 <NVIC_EncodePriority+0x30>
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3b03      	subs	r3, #3
 800252e:	e000      	b.n	8002532 <NVIC_EncodePriority+0x32>
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	f04f 32ff 	mov.w	r2, #4294967295
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43da      	mvns	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	401a      	ands	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002548:	f04f 31ff 	mov.w	r1, #4294967295
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	43d9      	mvns	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	4313      	orrs	r3, r2
         );
}
 800255a:	4618      	mov	r0, r3
 800255c:	3724      	adds	r7, #36	; 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3b01      	subs	r3, #1
 8002570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002574:	d301      	bcc.n	800257a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002576:	2301      	movs	r3, #1
 8002578:	e00f      	b.n	800259a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800257a:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <SysTick_Config+0x40>)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3b01      	subs	r3, #1
 8002580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002582:	210f      	movs	r1, #15
 8002584:	f04f 30ff 	mov.w	r0, #4294967295
 8002588:	f7ff ff90 	bl	80024ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <SysTick_Config+0x40>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002592:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <SysTick_Config+0x40>)
 8002594:	2207      	movs	r2, #7
 8002596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	e000e010 	.word	0xe000e010

080025a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff ff2d 	bl	8002410 <__NVIC_SetPriorityGrouping>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	4603      	mov	r3, r0
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d0:	f7ff ff42 	bl	8002458 <__NVIC_GetPriorityGrouping>
 80025d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	6978      	ldr	r0, [r7, #20]
 80025dc:	f7ff ff90 	bl	8002500 <NVIC_EncodePriority>
 80025e0:	4602      	mov	r2, r0
 80025e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff5f 	bl	80024ac <__NVIC_SetPriority>
}
 80025ee:	bf00      	nop
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff35 	bl	8002474 <__NVIC_EnableIRQ>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ffa2 	bl	8002564 <SysTick_Config>
 8002620:	4603      	mov	r3, r0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d008      	beq.n	8002654 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2204      	movs	r2, #4
 8002646:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e020      	b.n	8002696 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 020e 	bic.w	r2, r2, #14
 8002662:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f202 	lsl.w	r2, r1, r2
 8002682:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d005      	beq.n	80026c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2204      	movs	r2, #4
 80026bc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	e051      	b.n	8002768 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 020e 	bic.w	r2, r2, #14
 80026d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a22      	ldr	r2, [pc, #136]	; (8002774 <HAL_DMA_Abort_IT+0xd4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d029      	beq.n	8002742 <HAL_DMA_Abort_IT+0xa2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a21      	ldr	r2, [pc, #132]	; (8002778 <HAL_DMA_Abort_IT+0xd8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d022      	beq.n	800273e <HAL_DMA_Abort_IT+0x9e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a1f      	ldr	r2, [pc, #124]	; (800277c <HAL_DMA_Abort_IT+0xdc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d01a      	beq.n	8002738 <HAL_DMA_Abort_IT+0x98>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1e      	ldr	r2, [pc, #120]	; (8002780 <HAL_DMA_Abort_IT+0xe0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d012      	beq.n	8002732 <HAL_DMA_Abort_IT+0x92>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <HAL_DMA_Abort_IT+0xe4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00a      	beq.n	800272c <HAL_DMA_Abort_IT+0x8c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1b      	ldr	r2, [pc, #108]	; (8002788 <HAL_DMA_Abort_IT+0xe8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d102      	bne.n	8002726 <HAL_DMA_Abort_IT+0x86>
 8002720:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002724:	e00e      	b.n	8002744 <HAL_DMA_Abort_IT+0xa4>
 8002726:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800272a:	e00b      	b.n	8002744 <HAL_DMA_Abort_IT+0xa4>
 800272c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002730:	e008      	b.n	8002744 <HAL_DMA_Abort_IT+0xa4>
 8002732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002736:	e005      	b.n	8002744 <HAL_DMA_Abort_IT+0xa4>
 8002738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800273c:	e002      	b.n	8002744 <HAL_DMA_Abort_IT+0xa4>
 800273e:	2310      	movs	r3, #16
 8002740:	e000      	b.n	8002744 <HAL_DMA_Abort_IT+0xa4>
 8002742:	2301      	movs	r3, #1
 8002744:	4a11      	ldr	r2, [pc, #68]	; (800278c <HAL_DMA_Abort_IT+0xec>)
 8002746:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
    } 
  }
  return status;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40020008 	.word	0x40020008
 8002778:	4002001c 	.word	0x4002001c
 800277c:	40020030 	.word	0x40020030
 8002780:	40020044 	.word	0x40020044
 8002784:	40020058 	.word	0x40020058
 8002788:	4002006c 	.word	0x4002006c
 800278c:	40020000 	.word	0x40020000

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b08b      	sub	sp, #44	; 0x2c
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800279e:	2300      	movs	r3, #0
 80027a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a2:	e169      	b.n	8002a78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027a4:	2201      	movs	r2, #1
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	429a      	cmp	r2, r3
 80027be:	f040 8158 	bne.w	8002a72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4a9a      	ldr	r2, [pc, #616]	; (8002a30 <HAL_GPIO_Init+0x2a0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d05e      	beq.n	800288a <HAL_GPIO_Init+0xfa>
 80027cc:	4a98      	ldr	r2, [pc, #608]	; (8002a30 <HAL_GPIO_Init+0x2a0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d875      	bhi.n	80028be <HAL_GPIO_Init+0x12e>
 80027d2:	4a98      	ldr	r2, [pc, #608]	; (8002a34 <HAL_GPIO_Init+0x2a4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d058      	beq.n	800288a <HAL_GPIO_Init+0xfa>
 80027d8:	4a96      	ldr	r2, [pc, #600]	; (8002a34 <HAL_GPIO_Init+0x2a4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d86f      	bhi.n	80028be <HAL_GPIO_Init+0x12e>
 80027de:	4a96      	ldr	r2, [pc, #600]	; (8002a38 <HAL_GPIO_Init+0x2a8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d052      	beq.n	800288a <HAL_GPIO_Init+0xfa>
 80027e4:	4a94      	ldr	r2, [pc, #592]	; (8002a38 <HAL_GPIO_Init+0x2a8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d869      	bhi.n	80028be <HAL_GPIO_Init+0x12e>
 80027ea:	4a94      	ldr	r2, [pc, #592]	; (8002a3c <HAL_GPIO_Init+0x2ac>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d04c      	beq.n	800288a <HAL_GPIO_Init+0xfa>
 80027f0:	4a92      	ldr	r2, [pc, #584]	; (8002a3c <HAL_GPIO_Init+0x2ac>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d863      	bhi.n	80028be <HAL_GPIO_Init+0x12e>
 80027f6:	4a92      	ldr	r2, [pc, #584]	; (8002a40 <HAL_GPIO_Init+0x2b0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d046      	beq.n	800288a <HAL_GPIO_Init+0xfa>
 80027fc:	4a90      	ldr	r2, [pc, #576]	; (8002a40 <HAL_GPIO_Init+0x2b0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d85d      	bhi.n	80028be <HAL_GPIO_Init+0x12e>
 8002802:	2b12      	cmp	r3, #18
 8002804:	d82a      	bhi.n	800285c <HAL_GPIO_Init+0xcc>
 8002806:	2b12      	cmp	r3, #18
 8002808:	d859      	bhi.n	80028be <HAL_GPIO_Init+0x12e>
 800280a:	a201      	add	r2, pc, #4	; (adr r2, 8002810 <HAL_GPIO_Init+0x80>)
 800280c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002810:	0800288b 	.word	0x0800288b
 8002814:	08002865 	.word	0x08002865
 8002818:	08002877 	.word	0x08002877
 800281c:	080028b9 	.word	0x080028b9
 8002820:	080028bf 	.word	0x080028bf
 8002824:	080028bf 	.word	0x080028bf
 8002828:	080028bf 	.word	0x080028bf
 800282c:	080028bf 	.word	0x080028bf
 8002830:	080028bf 	.word	0x080028bf
 8002834:	080028bf 	.word	0x080028bf
 8002838:	080028bf 	.word	0x080028bf
 800283c:	080028bf 	.word	0x080028bf
 8002840:	080028bf 	.word	0x080028bf
 8002844:	080028bf 	.word	0x080028bf
 8002848:	080028bf 	.word	0x080028bf
 800284c:	080028bf 	.word	0x080028bf
 8002850:	080028bf 	.word	0x080028bf
 8002854:	0800286d 	.word	0x0800286d
 8002858:	08002881 	.word	0x08002881
 800285c:	4a79      	ldr	r2, [pc, #484]	; (8002a44 <HAL_GPIO_Init+0x2b4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002862:	e02c      	b.n	80028be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	623b      	str	r3, [r7, #32]
          break;
 800286a:	e029      	b.n	80028c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	3304      	adds	r3, #4
 8002872:	623b      	str	r3, [r7, #32]
          break;
 8002874:	e024      	b.n	80028c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	3308      	adds	r3, #8
 800287c:	623b      	str	r3, [r7, #32]
          break;
 800287e:	e01f      	b.n	80028c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	330c      	adds	r3, #12
 8002886:	623b      	str	r3, [r7, #32]
          break;
 8002888:	e01a      	b.n	80028c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d102      	bne.n	8002898 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002892:	2304      	movs	r3, #4
 8002894:	623b      	str	r3, [r7, #32]
          break;
 8002896:	e013      	b.n	80028c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d105      	bne.n	80028ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028a0:	2308      	movs	r3, #8
 80028a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	611a      	str	r2, [r3, #16]
          break;
 80028aa:	e009      	b.n	80028c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028ac:	2308      	movs	r3, #8
 80028ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	615a      	str	r2, [r3, #20]
          break;
 80028b6:	e003      	b.n	80028c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028b8:	2300      	movs	r3, #0
 80028ba:	623b      	str	r3, [r7, #32]
          break;
 80028bc:	e000      	b.n	80028c0 <HAL_GPIO_Init+0x130>
          break;
 80028be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	2bff      	cmp	r3, #255	; 0xff
 80028c4:	d801      	bhi.n	80028ca <HAL_GPIO_Init+0x13a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	e001      	b.n	80028ce <HAL_GPIO_Init+0x13e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3304      	adds	r3, #4
 80028ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2bff      	cmp	r3, #255	; 0xff
 80028d4:	d802      	bhi.n	80028dc <HAL_GPIO_Init+0x14c>
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	e002      	b.n	80028e2 <HAL_GPIO_Init+0x152>
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	3b08      	subs	r3, #8
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	210f      	movs	r1, #15
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	fa01 f303 	lsl.w	r3, r1, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	401a      	ands	r2, r3
 80028f4:	6a39      	ldr	r1, [r7, #32]
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	fa01 f303 	lsl.w	r3, r1, r3
 80028fc:	431a      	orrs	r2, r3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 80b1 	beq.w	8002a72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002910:	4b4d      	ldr	r3, [pc, #308]	; (8002a48 <HAL_GPIO_Init+0x2b8>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a4c      	ldr	r2, [pc, #304]	; (8002a48 <HAL_GPIO_Init+0x2b8>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6193      	str	r3, [r2, #24]
 800291c:	4b4a      	ldr	r3, [pc, #296]	; (8002a48 <HAL_GPIO_Init+0x2b8>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002928:	4a48      	ldr	r2, [pc, #288]	; (8002a4c <HAL_GPIO_Init+0x2bc>)
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	089b      	lsrs	r3, r3, #2
 800292e:	3302      	adds	r3, #2
 8002930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002934:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	220f      	movs	r2, #15
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4013      	ands	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a40      	ldr	r2, [pc, #256]	; (8002a50 <HAL_GPIO_Init+0x2c0>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d013      	beq.n	800297c <HAL_GPIO_Init+0x1ec>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a3f      	ldr	r2, [pc, #252]	; (8002a54 <HAL_GPIO_Init+0x2c4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00d      	beq.n	8002978 <HAL_GPIO_Init+0x1e8>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a3e      	ldr	r2, [pc, #248]	; (8002a58 <HAL_GPIO_Init+0x2c8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d007      	beq.n	8002974 <HAL_GPIO_Init+0x1e4>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a3d      	ldr	r2, [pc, #244]	; (8002a5c <HAL_GPIO_Init+0x2cc>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d101      	bne.n	8002970 <HAL_GPIO_Init+0x1e0>
 800296c:	2303      	movs	r3, #3
 800296e:	e006      	b.n	800297e <HAL_GPIO_Init+0x1ee>
 8002970:	2304      	movs	r3, #4
 8002972:	e004      	b.n	800297e <HAL_GPIO_Init+0x1ee>
 8002974:	2302      	movs	r3, #2
 8002976:	e002      	b.n	800297e <HAL_GPIO_Init+0x1ee>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_GPIO_Init+0x1ee>
 800297c:	2300      	movs	r3, #0
 800297e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002980:	f002 0203 	and.w	r2, r2, #3
 8002984:	0092      	lsls	r2, r2, #2
 8002986:	4093      	lsls	r3, r2
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800298e:	492f      	ldr	r1, [pc, #188]	; (8002a4c <HAL_GPIO_Init+0x2bc>)
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	3302      	adds	r3, #2
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d006      	beq.n	80029b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029a8:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	492c      	ldr	r1, [pc, #176]	; (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	608b      	str	r3, [r1, #8]
 80029b4:	e006      	b.n	80029c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029b6:	4b2a      	ldr	r3, [pc, #168]	; (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	43db      	mvns	r3, r3
 80029be:	4928      	ldr	r1, [pc, #160]	; (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d006      	beq.n	80029de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029d0:	4b23      	ldr	r3, [pc, #140]	; (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	4922      	ldr	r1, [pc, #136]	; (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60cb      	str	r3, [r1, #12]
 80029dc:	e006      	b.n	80029ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029de:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	491e      	ldr	r1, [pc, #120]	; (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d006      	beq.n	8002a06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029f8:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	4918      	ldr	r1, [pc, #96]	; (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
 8002a04:	e006      	b.n	8002a14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a06:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <HAL_GPIO_Init+0x2d0>)
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	4914      	ldr	r1, [pc, #80]	; (8002a60 <HAL_GPIO_Init+0x2d0>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d021      	beq.n	8002a64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a20:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <HAL_GPIO_Init+0x2d0>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	490e      	ldr	r1, [pc, #56]	; (8002a60 <HAL_GPIO_Init+0x2d0>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	600b      	str	r3, [r1, #0]
 8002a2c:	e021      	b.n	8002a72 <HAL_GPIO_Init+0x2e2>
 8002a2e:	bf00      	nop
 8002a30:	10320000 	.word	0x10320000
 8002a34:	10310000 	.word	0x10310000
 8002a38:	10220000 	.word	0x10220000
 8002a3c:	10210000 	.word	0x10210000
 8002a40:	10120000 	.word	0x10120000
 8002a44:	10110000 	.word	0x10110000
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40010000 	.word	0x40010000
 8002a50:	40010800 	.word	0x40010800
 8002a54:	40010c00 	.word	0x40010c00
 8002a58:	40011000 	.word	0x40011000
 8002a5c:	40011400 	.word	0x40011400
 8002a60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_GPIO_Init+0x304>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	4909      	ldr	r1, [pc, #36]	; (8002a94 <HAL_GPIO_Init+0x304>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	3301      	adds	r3, #1
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f47f ae8e 	bne.w	80027a4 <HAL_GPIO_Init+0x14>
  }
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	372c      	adds	r7, #44	; 0x2c
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	40010400 	.word	0x40010400

08002a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aa8:	787b      	ldrb	r3, [r7, #1]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ab4:	e003      	b.n	8002abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ab6:	887b      	ldrh	r3, [r7, #2]
 8002ab8:	041a      	lsls	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	611a      	str	r2, [r3, #16]
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e272      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 8087 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ae8:	4b92      	ldr	r3, [pc, #584]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d00c      	beq.n	8002b0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002af4:	4b8f      	ldr	r3, [pc, #572]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 030c 	and.w	r3, r3, #12
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d112      	bne.n	8002b26 <HAL_RCC_OscConfig+0x5e>
 8002b00:	4b8c      	ldr	r3, [pc, #560]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0c:	d10b      	bne.n	8002b26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0e:	4b89      	ldr	r3, [pc, #548]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d06c      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x12c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d168      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e24c      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_OscConfig+0x76>
 8002b30:	4b80      	ldr	r3, [pc, #512]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a7f      	ldr	r2, [pc, #508]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	e02e      	b.n	8002b9c <HAL_RCC_OscConfig+0xd4>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x98>
 8002b46:	4b7b      	ldr	r3, [pc, #492]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a7a      	ldr	r2, [pc, #488]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	4b78      	ldr	r3, [pc, #480]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a77      	ldr	r2, [pc, #476]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	e01d      	b.n	8002b9c <HAL_RCC_OscConfig+0xd4>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0xbc>
 8002b6a:	4b72      	ldr	r3, [pc, #456]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a71      	ldr	r2, [pc, #452]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	4b6f      	ldr	r3, [pc, #444]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6e      	ldr	r2, [pc, #440]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e00b      	b.n	8002b9c <HAL_RCC_OscConfig+0xd4>
 8002b84:	4b6b      	ldr	r3, [pc, #428]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a6a      	ldr	r2, [pc, #424]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	4b68      	ldr	r3, [pc, #416]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a67      	ldr	r2, [pc, #412]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d013      	beq.n	8002bcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7ff fc2a 	bl	80023fc <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bac:	f7ff fc26 	bl	80023fc <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	; 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e200      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	4b5d      	ldr	r3, [pc, #372]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0xe4>
 8002bca:	e014      	b.n	8002bf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7ff fc16 	bl	80023fc <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd4:	f7ff fc12 	bl	80023fc <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	; 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e1ec      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be6:	4b53      	ldr	r3, [pc, #332]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x10c>
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d063      	beq.n	8002cca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c02:	4b4c      	ldr	r3, [pc, #304]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c0e:	4b49      	ldr	r3, [pc, #292]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d11c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x18c>
 8002c1a:	4b46      	ldr	r3, [pc, #280]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d116      	bne.n	8002c54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c26:	4b43      	ldr	r3, [pc, #268]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_RCC_OscConfig+0x176>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d001      	beq.n	8002c3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e1c0      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3e:	4b3d      	ldr	r3, [pc, #244]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4939      	ldr	r1, [pc, #228]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c52:	e03a      	b.n	8002cca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d020      	beq.n	8002c9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c5c:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <HAL_RCC_OscConfig+0x270>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c62:	f7ff fbcb 	bl	80023fc <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c6a:	f7ff fbc7 	bl	80023fc <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e1a1      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7c:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c88:	4b2a      	ldr	r3, [pc, #168]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4927      	ldr	r1, [pc, #156]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	600b      	str	r3, [r1, #0]
 8002c9c:	e015      	b.n	8002cca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9e:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <HAL_RCC_OscConfig+0x270>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7ff fbaa 	bl	80023fc <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cac:	f7ff fba6 	bl	80023fc <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e180      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d03a      	beq.n	8002d4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d019      	beq.n	8002d12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cde:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce4:	f7ff fb8a 	bl	80023fc <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cec:	f7ff fb86 	bl	80023fc <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e160      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f000 face 	bl	80032ac <RCC_Delay>
 8002d10:	e01c      	b.n	8002d4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d18:	f7ff fb70 	bl	80023fc <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1e:	e00f      	b.n	8002d40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d20:	f7ff fb6c 	bl	80023fc <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d908      	bls.n	8002d40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e146      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000
 8002d38:	42420000 	.word	0x42420000
 8002d3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d40:	4b92      	ldr	r3, [pc, #584]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e9      	bne.n	8002d20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80a6 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5e:	4b8b      	ldr	r3, [pc, #556]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10d      	bne.n	8002d86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6a:	4b88      	ldr	r3, [pc, #544]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4a87      	ldr	r2, [pc, #540]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d74:	61d3      	str	r3, [r2, #28]
 8002d76:	4b85      	ldr	r3, [pc, #532]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d82:	2301      	movs	r3, #1
 8002d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d86:	4b82      	ldr	r3, [pc, #520]	; (8002f90 <HAL_RCC_OscConfig+0x4c8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d118      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d92:	4b7f      	ldr	r3, [pc, #508]	; (8002f90 <HAL_RCC_OscConfig+0x4c8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a7e      	ldr	r2, [pc, #504]	; (8002f90 <HAL_RCC_OscConfig+0x4c8>)
 8002d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9e:	f7ff fb2d 	bl	80023fc <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da6:	f7ff fb29 	bl	80023fc <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b64      	cmp	r3, #100	; 0x64
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e103      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db8:	4b75      	ldr	r3, [pc, #468]	; (8002f90 <HAL_RCC_OscConfig+0x4c8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d106      	bne.n	8002dda <HAL_RCC_OscConfig+0x312>
 8002dcc:	4b6f      	ldr	r3, [pc, #444]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4a6e      	ldr	r2, [pc, #440]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6213      	str	r3, [r2, #32]
 8002dd8:	e02d      	b.n	8002e36 <HAL_RCC_OscConfig+0x36e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x334>
 8002de2:	4b6a      	ldr	r3, [pc, #424]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	4a69      	ldr	r2, [pc, #420]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	6213      	str	r3, [r2, #32]
 8002dee:	4b67      	ldr	r3, [pc, #412]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	4a66      	ldr	r2, [pc, #408]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	f023 0304 	bic.w	r3, r3, #4
 8002df8:	6213      	str	r3, [r2, #32]
 8002dfa:	e01c      	b.n	8002e36 <HAL_RCC_OscConfig+0x36e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	2b05      	cmp	r3, #5
 8002e02:	d10c      	bne.n	8002e1e <HAL_RCC_OscConfig+0x356>
 8002e04:	4b61      	ldr	r3, [pc, #388]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	4a60      	ldr	r2, [pc, #384]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e0a:	f043 0304 	orr.w	r3, r3, #4
 8002e0e:	6213      	str	r3, [r2, #32]
 8002e10:	4b5e      	ldr	r3, [pc, #376]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	4a5d      	ldr	r2, [pc, #372]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6213      	str	r3, [r2, #32]
 8002e1c:	e00b      	b.n	8002e36 <HAL_RCC_OscConfig+0x36e>
 8002e1e:	4b5b      	ldr	r3, [pc, #364]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	4a5a      	ldr	r2, [pc, #360]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	6213      	str	r3, [r2, #32]
 8002e2a:	4b58      	ldr	r3, [pc, #352]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4a57      	ldr	r2, [pc, #348]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d015      	beq.n	8002e6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3e:	f7ff fadd 	bl	80023fc <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7ff fad9 	bl	80023fc <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0b1      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5c:	4b4b      	ldr	r3, [pc, #300]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ee      	beq.n	8002e46 <HAL_RCC_OscConfig+0x37e>
 8002e68:	e014      	b.n	8002e94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6a:	f7ff fac7 	bl	80023fc <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7ff fac3 	bl	80023fc <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e09b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e88:	4b40      	ldr	r3, [pc, #256]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1ee      	bne.n	8002e72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d105      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9a:	4b3c      	ldr	r3, [pc, #240]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	4a3b      	ldr	r2, [pc, #236]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 8087 	beq.w	8002fbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb0:	4b36      	ldr	r3, [pc, #216]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d061      	beq.n	8002f80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d146      	bne.n	8002f52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec4:	4b33      	ldr	r3, [pc, #204]	; (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eca:	f7ff fa97 	bl	80023fc <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed2:	f7ff fa93 	bl	80023fc <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e06d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee4:	4b29      	ldr	r3, [pc, #164]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f0      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef8:	d108      	bne.n	8002f0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002efa:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	4921      	ldr	r1, [pc, #132]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f0c:	4b1f      	ldr	r3, [pc, #124]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a19      	ldr	r1, [r3, #32]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	491b      	ldr	r1, [pc, #108]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f24:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2a:	f7ff fa67 	bl	80023fc <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f32:	f7ff fa63 	bl	80023fc <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e03d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f44:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0f0      	beq.n	8002f32 <HAL_RCC_OscConfig+0x46a>
 8002f50:	e035      	b.n	8002fbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f52:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7ff fa50 	bl	80023fc <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f60:	f7ff fa4c 	bl	80023fc <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e026      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x498>
 8002f7e:	e01e      	b.n	8002fbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d107      	bne.n	8002f98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e019      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40007000 	.word	0x40007000
 8002f94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_RCC_OscConfig+0x500>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d106      	bne.n	8002fba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40021000 	.word	0x40021000

08002fcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0d0      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b6a      	ldr	r3, [pc, #424]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d910      	bls.n	8003010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b67      	ldr	r3, [pc, #412]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 0207 	bic.w	r2, r3, #7
 8002ff6:	4965      	ldr	r1, [pc, #404]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b63      	ldr	r3, [pc, #396]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0b8      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003028:	4b59      	ldr	r3, [pc, #356]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4a58      	ldr	r2, [pc, #352]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003032:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003040:	4b53      	ldr	r3, [pc, #332]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4a52      	ldr	r2, [pc, #328]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800304a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800304c:	4b50      	ldr	r3, [pc, #320]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	494d      	ldr	r1, [pc, #308]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d040      	beq.n	80030ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d107      	bne.n	8003082 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003072:	4b47      	ldr	r3, [pc, #284]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d115      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e07f      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d107      	bne.n	800309a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308a:	4b41      	ldr	r3, [pc, #260]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e073      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309a:	4b3d      	ldr	r3, [pc, #244]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e06b      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030aa:	4b39      	ldr	r3, [pc, #228]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f023 0203 	bic.w	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4936      	ldr	r1, [pc, #216]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030bc:	f7ff f99e 	bl	80023fc <HAL_GetTick>
 80030c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	e00a      	b.n	80030da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c4:	f7ff f99a 	bl	80023fc <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e053      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030da:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 020c 	and.w	r2, r3, #12
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d1eb      	bne.n	80030c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030ec:	4b27      	ldr	r3, [pc, #156]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d210      	bcs.n	800311c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b24      	ldr	r3, [pc, #144]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 0207 	bic.w	r2, r3, #7
 8003102:	4922      	ldr	r1, [pc, #136]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310a:	4b20      	ldr	r3, [pc, #128]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e032      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003128:	4b19      	ldr	r3, [pc, #100]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4916      	ldr	r1, [pc, #88]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003146:	4b12      	ldr	r3, [pc, #72]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	490e      	ldr	r1, [pc, #56]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800315a:	f000 f821 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 800315e:	4602      	mov	r2, r0
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	490a      	ldr	r1, [pc, #40]	; (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	5ccb      	ldrb	r3, [r1, r3]
 800316e:	fa22 f303 	lsr.w	r3, r2, r3
 8003172:	4a09      	ldr	r2, [pc, #36]	; (8003198 <HAL_RCC_ClockConfig+0x1cc>)
 8003174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003176:	4b09      	ldr	r3, [pc, #36]	; (800319c <HAL_RCC_ClockConfig+0x1d0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff f8fc 	bl	8002378 <HAL_InitTick>

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40022000 	.word	0x40022000
 8003190:	40021000 	.word	0x40021000
 8003194:	08007d20 	.word	0x08007d20
 8003198:	20000018 	.word	0x20000018
 800319c:	2000001c 	.word	0x2000001c

080031a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031ba:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <HAL_RCC_GetSysClockFreq+0x94>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d002      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x30>
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0x36>
 80031ce:	e027      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031d0:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HAL_RCC_GetSysClockFreq+0x98>)
 80031d2:	613b      	str	r3, [r7, #16]
      break;
 80031d4:	e027      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	0c9b      	lsrs	r3, r3, #18
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	4a17      	ldr	r2, [pc, #92]	; (800323c <HAL_RCC_GetSysClockFreq+0x9c>)
 80031e0:	5cd3      	ldrb	r3, [r2, r3]
 80031e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d010      	beq.n	8003210 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031ee:	4b11      	ldr	r3, [pc, #68]	; (8003234 <HAL_RCC_GetSysClockFreq+0x94>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	0c5b      	lsrs	r3, r3, #17
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	4a11      	ldr	r2, [pc, #68]	; (8003240 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031fa:	5cd3      	ldrb	r3, [r2, r3]
 80031fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <HAL_RCC_GetSysClockFreq+0x98>)
 8003202:	fb03 f202 	mul.w	r2, r3, r2
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	e004      	b.n	800321a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003214:	fb02 f303 	mul.w	r3, r2, r3
 8003218:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	613b      	str	r3, [r7, #16]
      break;
 800321e:	e002      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003220:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_RCC_GetSysClockFreq+0x98>)
 8003222:	613b      	str	r3, [r7, #16]
      break;
 8003224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003226:	693b      	ldr	r3, [r7, #16]
}
 8003228:	4618      	mov	r0, r3
 800322a:	371c      	adds	r7, #28
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000
 8003238:	007a1200 	.word	0x007a1200
 800323c:	08007d38 	.word	0x08007d38
 8003240:	08007d48 	.word	0x08007d48
 8003244:	003d0900 	.word	0x003d0900

08003248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800324c:	4b02      	ldr	r3, [pc, #8]	; (8003258 <HAL_RCC_GetHCLKFreq+0x10>)
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr
 8003258:	20000018 	.word	0x20000018

0800325c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003260:	f7ff fff2 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 8003264:	4602      	mov	r2, r0
 8003266:	4b05      	ldr	r3, [pc, #20]	; (800327c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	0a1b      	lsrs	r3, r3, #8
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	4903      	ldr	r1, [pc, #12]	; (8003280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003272:	5ccb      	ldrb	r3, [r1, r3]
 8003274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003278:	4618      	mov	r0, r3
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40021000 	.word	0x40021000
 8003280:	08007d30 	.word	0x08007d30

08003284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003288:	f7ff ffde 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 800328c:	4602      	mov	r2, r0
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	0adb      	lsrs	r3, r3, #11
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	4903      	ldr	r1, [pc, #12]	; (80032a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800329a:	5ccb      	ldrb	r3, [r1, r3]
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40021000 	.word	0x40021000
 80032a8:	08007d30 	.word	0x08007d30

080032ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <RCC_Delay+0x34>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a0a      	ldr	r2, [pc, #40]	; (80032e4 <RCC_Delay+0x38>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	0a5b      	lsrs	r3, r3, #9
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032c8:	bf00      	nop
  }
  while (Delay --);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1e5a      	subs	r2, r3, #1
 80032ce:	60fa      	str	r2, [r7, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f9      	bne.n	80032c8 <RCC_Delay+0x1c>
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	20000018 	.word	0x20000018
 80032e4:	10624dd3 	.word	0x10624dd3

080032e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e041      	b.n	800337e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fe fea4 	bl	800205c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3304      	adds	r3, #4
 8003324:	4619      	mov	r1, r3
 8003326:	4610      	mov	r0, r2
 8003328:	f000 fcc6 	bl	8003cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e041      	b.n	800341c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d106      	bne.n	80033b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f839 	bl	8003424 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3304      	adds	r3, #4
 80033c2:	4619      	mov	r1, r3
 80033c4:	4610      	mov	r0, r2
 80033c6:	f000 fc77 	bl	8003cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr
	...

08003438 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d109      	bne.n	8003460 <HAL_TIM_PWM_Start_IT+0x28>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b01      	cmp	r3, #1
 8003456:	bf14      	ite	ne
 8003458:	2301      	movne	r3, #1
 800345a:	2300      	moveq	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e022      	b.n	80034a6 <HAL_TIM_PWM_Start_IT+0x6e>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b04      	cmp	r3, #4
 8003464:	d109      	bne.n	800347a <HAL_TIM_PWM_Start_IT+0x42>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b01      	cmp	r3, #1
 8003470:	bf14      	ite	ne
 8003472:	2301      	movne	r3, #1
 8003474:	2300      	moveq	r3, #0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	e015      	b.n	80034a6 <HAL_TIM_PWM_Start_IT+0x6e>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b08      	cmp	r3, #8
 800347e:	d109      	bne.n	8003494 <HAL_TIM_PWM_Start_IT+0x5c>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b01      	cmp	r3, #1
 800348a:	bf14      	ite	ne
 800348c:	2301      	movne	r3, #1
 800348e:	2300      	moveq	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	e008      	b.n	80034a6 <HAL_TIM_PWM_Start_IT+0x6e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b01      	cmp	r3, #1
 800349e:	bf14      	ite	ne
 80034a0:	2301      	movne	r3, #1
 80034a2:	2300      	moveq	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0a9      	b.n	8003602 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d104      	bne.n	80034be <HAL_TIM_PWM_Start_IT+0x86>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034bc:	e013      	b.n	80034e6 <HAL_TIM_PWM_Start_IT+0xae>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d104      	bne.n	80034ce <HAL_TIM_PWM_Start_IT+0x96>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034cc:	e00b      	b.n	80034e6 <HAL_TIM_PWM_Start_IT+0xae>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d104      	bne.n	80034de <HAL_TIM_PWM_Start_IT+0xa6>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034dc:	e003      	b.n	80034e6 <HAL_TIM_PWM_Start_IT+0xae>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2202      	movs	r2, #2
 80034e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b0c      	cmp	r3, #12
 80034ea:	d841      	bhi.n	8003570 <HAL_TIM_PWM_Start_IT+0x138>
 80034ec:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <HAL_TIM_PWM_Start_IT+0xbc>)
 80034ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f2:	bf00      	nop
 80034f4:	08003529 	.word	0x08003529
 80034f8:	08003571 	.word	0x08003571
 80034fc:	08003571 	.word	0x08003571
 8003500:	08003571 	.word	0x08003571
 8003504:	0800353b 	.word	0x0800353b
 8003508:	08003571 	.word	0x08003571
 800350c:	08003571 	.word	0x08003571
 8003510:	08003571 	.word	0x08003571
 8003514:	0800354d 	.word	0x0800354d
 8003518:	08003571 	.word	0x08003571
 800351c:	08003571 	.word	0x08003571
 8003520:	08003571 	.word	0x08003571
 8003524:	0800355f 	.word	0x0800355f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0202 	orr.w	r2, r2, #2
 8003536:	60da      	str	r2, [r3, #12]
      break;
 8003538:	e01d      	b.n	8003576 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 0204 	orr.w	r2, r2, #4
 8003548:	60da      	str	r2, [r3, #12]
      break;
 800354a:	e014      	b.n	8003576 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0208 	orr.w	r2, r2, #8
 800355a:	60da      	str	r2, [r3, #12]
      break;
 800355c:	e00b      	b.n	8003576 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0210 	orr.w	r2, r2, #16
 800356c:	60da      	str	r2, [r3, #12]
      break;
 800356e:	e002      	b.n	8003576 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
      break;
 8003574:	bf00      	nop
  }

  if (status == HAL_OK)
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d141      	bne.n	8003600 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2201      	movs	r2, #1
 8003582:	6839      	ldr	r1, [r7, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fe23 	bl	80041d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a1f      	ldr	r2, [pc, #124]	; (800360c <HAL_TIM_PWM_Start_IT+0x1d4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d107      	bne.n	80035a4 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035a2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a18      	ldr	r2, [pc, #96]	; (800360c <HAL_TIM_PWM_Start_IT+0x1d4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00e      	beq.n	80035cc <HAL_TIM_PWM_Start_IT+0x194>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b6:	d009      	beq.n	80035cc <HAL_TIM_PWM_Start_IT+0x194>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a14      	ldr	r2, [pc, #80]	; (8003610 <HAL_TIM_PWM_Start_IT+0x1d8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d004      	beq.n	80035cc <HAL_TIM_PWM_Start_IT+0x194>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a13      	ldr	r2, [pc, #76]	; (8003614 <HAL_TIM_PWM_Start_IT+0x1dc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d111      	bne.n	80035f0 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b06      	cmp	r3, #6
 80035dc:	d010      	beq.n	8003600 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0201 	orr.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ee:	e007      	b.n	8003600 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003600:	7bfb      	ldrb	r3, [r7, #15]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40012c00 	.word	0x40012c00
 8003610:	40000400 	.word	0x40000400
 8003614:	40000800 	.word	0x40000800

08003618 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b0c      	cmp	r3, #12
 800362a:	d841      	bhi.n	80036b0 <HAL_TIM_PWM_Stop_IT+0x98>
 800362c:	a201      	add	r2, pc, #4	; (adr r2, 8003634 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003632:	bf00      	nop
 8003634:	08003669 	.word	0x08003669
 8003638:	080036b1 	.word	0x080036b1
 800363c:	080036b1 	.word	0x080036b1
 8003640:	080036b1 	.word	0x080036b1
 8003644:	0800367b 	.word	0x0800367b
 8003648:	080036b1 	.word	0x080036b1
 800364c:	080036b1 	.word	0x080036b1
 8003650:	080036b1 	.word	0x080036b1
 8003654:	0800368d 	.word	0x0800368d
 8003658:	080036b1 	.word	0x080036b1
 800365c:	080036b1 	.word	0x080036b1
 8003660:	080036b1 	.word	0x080036b1
 8003664:	0800369f 	.word	0x0800369f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0202 	bic.w	r2, r2, #2
 8003676:	60da      	str	r2, [r3, #12]
      break;
 8003678:	e01d      	b.n	80036b6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0204 	bic.w	r2, r2, #4
 8003688:	60da      	str	r2, [r3, #12]
      break;
 800368a:	e014      	b.n	80036b6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0208 	bic.w	r2, r2, #8
 800369a:	60da      	str	r2, [r3, #12]
      break;
 800369c:	e00b      	b.n	80036b6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0210 	bic.w	r2, r2, #16
 80036ac:	60da      	str	r2, [r3, #12]
      break;
 80036ae:	e002      	b.n	80036b6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
      break;
 80036b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d157      	bne.n	800376c <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2200      	movs	r2, #0
 80036c2:	6839      	ldr	r1, [r7, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fd83 	bl	80041d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a2a      	ldr	r2, [pc, #168]	; (8003778 <HAL_TIM_PWM_Stop_IT+0x160>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d117      	bne.n	8003704 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6a1a      	ldr	r2, [r3, #32]
 80036da:	f241 1311 	movw	r3, #4369	; 0x1111
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10f      	bne.n	8003704 <HAL_TIM_PWM_Stop_IT+0xec>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6a1a      	ldr	r2, [r3, #32]
 80036ea:	f240 4344 	movw	r3, #1092	; 0x444
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d107      	bne.n	8003704 <HAL_TIM_PWM_Stop_IT+0xec>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003702:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6a1a      	ldr	r2, [r3, #32]
 800370a:	f241 1311 	movw	r3, #4369	; 0x1111
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10f      	bne.n	8003734 <HAL_TIM_PWM_Stop_IT+0x11c>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6a1a      	ldr	r2, [r3, #32]
 800371a:	f240 4344 	movw	r3, #1092	; 0x444
 800371e:	4013      	ands	r3, r2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d107      	bne.n	8003734 <HAL_TIM_PWM_Stop_IT+0x11c>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0201 	bic.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d104      	bne.n	8003744 <HAL_TIM_PWM_Stop_IT+0x12c>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003742:	e013      	b.n	800376c <HAL_TIM_PWM_Stop_IT+0x154>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2b04      	cmp	r3, #4
 8003748:	d104      	bne.n	8003754 <HAL_TIM_PWM_Stop_IT+0x13c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003752:	e00b      	b.n	800376c <HAL_TIM_PWM_Stop_IT+0x154>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	2b08      	cmp	r3, #8
 8003758:	d104      	bne.n	8003764 <HAL_TIM_PWM_Stop_IT+0x14c>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003762:	e003      	b.n	800376c <HAL_TIM_PWM_Stop_IT+0x154>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800376c:	7bfb      	ldrb	r3, [r7, #15]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40012c00 	.word	0x40012c00

0800377c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d020      	beq.n	80037e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01b      	beq.n	80037e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0202 	mvn.w	r2, #2
 80037b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fa63 	bl	8003c92 <HAL_TIM_IC_CaptureCallback>
 80037cc:	e005      	b.n	80037da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fa56 	bl	8003c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7fd ffcd 	bl	8001774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d020      	beq.n	800382c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01b      	beq.n	800382c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0204 	mvn.w	r2, #4
 80037fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2202      	movs	r2, #2
 8003802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fa3d 	bl	8003c92 <HAL_TIM_IC_CaptureCallback>
 8003818:	e005      	b.n	8003826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fa30 	bl	8003c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7fd ffa7 	bl	8001774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d020      	beq.n	8003878 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01b      	beq.n	8003878 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0208 	mvn.w	r2, #8
 8003848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2204      	movs	r2, #4
 800384e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fa17 	bl	8003c92 <HAL_TIM_IC_CaptureCallback>
 8003864:	e005      	b.n	8003872 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fa0a 	bl	8003c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7fd ff81 	bl	8001774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	d020      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01b      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0210 	mvn.w	r2, #16
 8003894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2208      	movs	r2, #8
 800389a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f9f1 	bl	8003c92 <HAL_TIM_IC_CaptureCallback>
 80038b0:	e005      	b.n	80038be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f9e4 	bl	8003c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7fd ff5b 	bl	8001774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00c      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0201 	mvn.w	r2, #1
 80038e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f9c3 	bl	8003c6e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fd3e 	bl	8004388 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00c      	beq.n	8003930 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f9ba 	bl	8003ca4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00c      	beq.n	8003954 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b00      	cmp	r3, #0
 8003942:	d007      	beq.n	8003954 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0220 	mvn.w	r2, #32
 800394c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fd11 	bl	8004376 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003976:	2302      	movs	r3, #2
 8003978:	e0ae      	b.n	8003ad8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b0c      	cmp	r3, #12
 8003986:	f200 809f 	bhi.w	8003ac8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800398a:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	080039c5 	.word	0x080039c5
 8003994:	08003ac9 	.word	0x08003ac9
 8003998:	08003ac9 	.word	0x08003ac9
 800399c:	08003ac9 	.word	0x08003ac9
 80039a0:	08003a05 	.word	0x08003a05
 80039a4:	08003ac9 	.word	0x08003ac9
 80039a8:	08003ac9 	.word	0x08003ac9
 80039ac:	08003ac9 	.word	0x08003ac9
 80039b0:	08003a47 	.word	0x08003a47
 80039b4:	08003ac9 	.word	0x08003ac9
 80039b8:	08003ac9 	.word	0x08003ac9
 80039bc:	08003ac9 	.word	0x08003ac9
 80039c0:	08003a87 	.word	0x08003a87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 f9e2 	bl	8003d94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0208 	orr.w	r2, r2, #8
 80039de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0204 	bic.w	r2, r2, #4
 80039ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6999      	ldr	r1, [r3, #24]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	619a      	str	r2, [r3, #24]
      break;
 8003a02:	e064      	b.n	8003ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fa28 	bl	8003e60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6999      	ldr	r1, [r3, #24]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	021a      	lsls	r2, r3, #8
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	619a      	str	r2, [r3, #24]
      break;
 8003a44:	e043      	b.n	8003ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fa71 	bl	8003f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69da      	ldr	r2, [r3, #28]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0208 	orr.w	r2, r2, #8
 8003a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69da      	ldr	r2, [r3, #28]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0204 	bic.w	r2, r2, #4
 8003a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69d9      	ldr	r1, [r3, #28]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	61da      	str	r2, [r3, #28]
      break;
 8003a84:	e023      	b.n	8003ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68b9      	ldr	r1, [r7, #8]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fabb 	bl	8004008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69da      	ldr	r2, [r3, #28]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69d9      	ldr	r1, [r3, #28]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	021a      	lsls	r2, r3, #8
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	61da      	str	r2, [r3, #28]
      break;
 8003ac6:	e002      	b.n	8003ace <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	75fb      	strb	r3, [r7, #23]
      break;
 8003acc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_TIM_ConfigClockSource+0x1c>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e0b4      	b.n	8003c66 <HAL_TIM_ConfigClockSource+0x186>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b34:	d03e      	beq.n	8003bb4 <HAL_TIM_ConfigClockSource+0xd4>
 8003b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b3a:	f200 8087 	bhi.w	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b42:	f000 8086 	beq.w	8003c52 <HAL_TIM_ConfigClockSource+0x172>
 8003b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4a:	d87f      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b4c:	2b70      	cmp	r3, #112	; 0x70
 8003b4e:	d01a      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0xa6>
 8003b50:	2b70      	cmp	r3, #112	; 0x70
 8003b52:	d87b      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b54:	2b60      	cmp	r3, #96	; 0x60
 8003b56:	d050      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x11a>
 8003b58:	2b60      	cmp	r3, #96	; 0x60
 8003b5a:	d877      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b5c:	2b50      	cmp	r3, #80	; 0x50
 8003b5e:	d03c      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0xfa>
 8003b60:	2b50      	cmp	r3, #80	; 0x50
 8003b62:	d873      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b64:	2b40      	cmp	r3, #64	; 0x40
 8003b66:	d058      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0x13a>
 8003b68:	2b40      	cmp	r3, #64	; 0x40
 8003b6a:	d86f      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b6c:	2b30      	cmp	r3, #48	; 0x30
 8003b6e:	d064      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0x15a>
 8003b70:	2b30      	cmp	r3, #48	; 0x30
 8003b72:	d86b      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d060      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0x15a>
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d867      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d05c      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0x15a>
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d05a      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0x15a>
 8003b84:	e062      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6899      	ldr	r1, [r3, #8]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f000 fafc 	bl	8004192 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ba8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	609a      	str	r2, [r3, #8]
      break;
 8003bb2:	e04f      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	6899      	ldr	r1, [r3, #8]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f000 fae5 	bl	8004192 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bd6:	609a      	str	r2, [r3, #8]
      break;
 8003bd8:	e03c      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6859      	ldr	r1, [r3, #4]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	461a      	mov	r2, r3
 8003be8:	f000 fa5c 	bl	80040a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2150      	movs	r1, #80	; 0x50
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fab3 	bl	800415e <TIM_ITRx_SetConfig>
      break;
 8003bf8:	e02c      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6859      	ldr	r1, [r3, #4]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	461a      	mov	r2, r3
 8003c08:	f000 fa7a 	bl	8004100 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2160      	movs	r1, #96	; 0x60
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 faa3 	bl	800415e <TIM_ITRx_SetConfig>
      break;
 8003c18:	e01c      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	6859      	ldr	r1, [r3, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	461a      	mov	r2, r3
 8003c28:	f000 fa3c 	bl	80040a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2140      	movs	r1, #64	; 0x40
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fa93 	bl	800415e <TIM_ITRx_SetConfig>
      break;
 8003c38:	e00c      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4619      	mov	r1, r3
 8003c44:	4610      	mov	r0, r2
 8003c46:	f000 fa8a 	bl	800415e <TIM_ITRx_SetConfig>
      break;
 8003c4a:	e003      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c50:	e000      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr

08003c80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr
	...

08003cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a2f      	ldr	r2, [pc, #188]	; (8003d88 <TIM_Base_SetConfig+0xd0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00b      	beq.n	8003ce8 <TIM_Base_SetConfig+0x30>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd6:	d007      	beq.n	8003ce8 <TIM_Base_SetConfig+0x30>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a2c      	ldr	r2, [pc, #176]	; (8003d8c <TIM_Base_SetConfig+0xd4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_Base_SetConfig+0x30>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a2b      	ldr	r2, [pc, #172]	; (8003d90 <TIM_Base_SetConfig+0xd8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d108      	bne.n	8003cfa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a22      	ldr	r2, [pc, #136]	; (8003d88 <TIM_Base_SetConfig+0xd0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00b      	beq.n	8003d1a <TIM_Base_SetConfig+0x62>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d08:	d007      	beq.n	8003d1a <TIM_Base_SetConfig+0x62>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <TIM_Base_SetConfig+0xd4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d003      	beq.n	8003d1a <TIM_Base_SetConfig+0x62>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <TIM_Base_SetConfig+0xd8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d108      	bne.n	8003d2c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a0d      	ldr	r2, [pc, #52]	; (8003d88 <TIM_Base_SetConfig+0xd0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d103      	bne.n	8003d60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d005      	beq.n	8003d7e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f023 0201 	bic.w	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	611a      	str	r2, [r3, #16]
  }
}
 8003d7e:	bf00      	nop
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr
 8003d88:	40012c00 	.word	0x40012c00
 8003d8c:	40000400 	.word	0x40000400
 8003d90:	40000800 	.word	0x40000800

08003d94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f023 0201 	bic.w	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0303 	bic.w	r3, r3, #3
 8003dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f023 0302 	bic.w	r3, r3, #2
 8003ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a1c      	ldr	r2, [pc, #112]	; (8003e5c <TIM_OC1_SetConfig+0xc8>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d10c      	bne.n	8003e0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f023 0308 	bic.w	r3, r3, #8
 8003df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f023 0304 	bic.w	r3, r3, #4
 8003e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <TIM_OC1_SetConfig+0xc8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d111      	bne.n	8003e36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	621a      	str	r2, [r3, #32]
}
 8003e50:	bf00      	nop
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	40012c00 	.word	0x40012c00

08003e60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	f023 0210 	bic.w	r2, r3, #16
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	021b      	lsls	r3, r3, #8
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f023 0320 	bic.w	r3, r3, #32
 8003eaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a1d      	ldr	r2, [pc, #116]	; (8003f30 <TIM_OC2_SetConfig+0xd0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d10d      	bne.n	8003edc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a14      	ldr	r2, [pc, #80]	; (8003f30 <TIM_OC2_SetConfig+0xd0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d113      	bne.n	8003f0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	621a      	str	r2, [r3, #32]
}
 8003f26:	bf00      	nop
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr
 8003f30:	40012c00 	.word	0x40012c00

08003f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0303 	bic.w	r3, r3, #3
 8003f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a1d      	ldr	r2, [pc, #116]	; (8004004 <TIM_OC3_SetConfig+0xd0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d10d      	bne.n	8003fae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a14      	ldr	r2, [pc, #80]	; (8004004 <TIM_OC3_SetConfig+0xd0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d113      	bne.n	8003fde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	621a      	str	r2, [r3, #32]
}
 8003ff8:	bf00      	nop
 8003ffa:	371c      	adds	r7, #28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40012c00 	.word	0x40012c00

08004008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	031b      	lsls	r3, r3, #12
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a0f      	ldr	r2, [pc, #60]	; (80040a0 <TIM_OC4_SetConfig+0x98>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d109      	bne.n	800407c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800406e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	019b      	lsls	r3, r3, #6
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	621a      	str	r2, [r3, #32]
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr
 80040a0:	40012c00 	.word	0x40012c00

080040a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f023 0201 	bic.w	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f023 030a 	bic.w	r3, r3, #10
 80040e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f023 0210 	bic.w	r2, r3, #16
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800412a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	031b      	lsls	r3, r3, #12
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800413c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	621a      	str	r2, [r3, #32]
}
 8004154:	bf00      	nop
 8004156:	371c      	adds	r7, #28
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004174:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	f043 0307 	orr.w	r3, r3, #7
 8004180:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	609a      	str	r2, [r3, #8]
}
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr

08004192 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004192:	b480      	push	{r7}
 8004194:	b087      	sub	sp, #28
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	021a      	lsls	r2, r3, #8
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	609a      	str	r2, [r3, #8]
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	2201      	movs	r2, #1
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a1a      	ldr	r2, [r3, #32]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	43db      	mvns	r3, r3
 80041f2:	401a      	ands	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a1a      	ldr	r2, [r3, #32]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	fa01 f303 	lsl.w	r3, r1, r3
 8004208:	431a      	orrs	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800422c:	2302      	movs	r3, #2
 800422e:	e046      	b.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a16      	ldr	r2, [pc, #88]	; (80042c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00e      	beq.n	8004292 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427c:	d009      	beq.n	8004292 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a12      	ldr	r2, [pc, #72]	; (80042cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d004      	beq.n	8004292 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a10      	ldr	r2, [pc, #64]	; (80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d10c      	bne.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800

080042d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e03d      	b.n	800436c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	bc80      	pop	{r7}
 8004374:	4770      	bx	lr

08004376 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr

08004388 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e042      	b.n	8004432 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d106      	bne.n	80043c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7fd ff4b 	bl	800225c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2224      	movs	r2, #36	; 0x24
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fcd4 	bl	8004d8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695a      	ldr	r2, [r3, #20]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004402:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004412:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	4613      	mov	r3, r2
 8004446:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b20      	cmp	r3, #32
 8004452:	d112      	bne.n	800447a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <HAL_UART_Receive_IT+0x26>
 800445a:	88fb      	ldrh	r3, [r7, #6]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e00b      	b.n	800447c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	461a      	mov	r2, r3
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fab6 	bl	80049e2 <UART_Start_Receive_IT>
 8004476:	4603      	mov	r3, r0
 8004478:	e000      	b.n	800447c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800447a:	2302      	movs	r3, #2
  }
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b0ba      	sub	sp, #232	; 0xe8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80044c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10f      	bne.n	80044ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <HAL_UART_IRQHandler+0x66>
 80044d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fb93 	bl	8004c0e <UART_Receive_IT>
      return;
 80044e8:	e25b      	b.n	80049a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 80de 	beq.w	80046b0 <HAL_UART_IRQHandler+0x22c>
 80044f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d106      	bne.n	800450e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004504:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 80d1 	beq.w	80046b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800450e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00b      	beq.n	8004532 <HAL_UART_IRQHandler+0xae>
 800451a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800451e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	f043 0201 	orr.w	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00b      	beq.n	8004556 <HAL_UART_IRQHandler+0xd2>
 800453e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454e:	f043 0202 	orr.w	r2, r3, #2
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00b      	beq.n	800457a <HAL_UART_IRQHandler+0xf6>
 8004562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d005      	beq.n	800457a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004572:	f043 0204 	orr.w	r2, r3, #4
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800457a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d011      	beq.n	80045aa <HAL_UART_IRQHandler+0x126>
 8004586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b00      	cmp	r3, #0
 8004590:	d105      	bne.n	800459e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d005      	beq.n	80045aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	f043 0208 	orr.w	r2, r3, #8
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 81f2 	beq.w	8004998 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_UART_IRQHandler+0x14e>
 80045c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fb1e 	bl	8004c0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	bf14      	ite	ne
 80045e0:	2301      	movne	r3, #1
 80045e2:	2300      	moveq	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d103      	bne.n	80045fe <HAL_UART_IRQHandler+0x17a>
 80045f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d04f      	beq.n	800469e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fa28 	bl	8004a54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d041      	beq.n	8004696 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3314      	adds	r3, #20
 8004618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800462c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3314      	adds	r3, #20
 800463a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800463e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004646:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800464a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1d9      	bne.n	8004612 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d013      	beq.n	800468e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466a:	4a7e      	ldr	r2, [pc, #504]	; (8004864 <HAL_UART_IRQHandler+0x3e0>)
 800466c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe f814 	bl	80026a0 <HAL_DMA_Abort_IT>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d016      	beq.n	80046ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004688:	4610      	mov	r0, r2
 800468a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800468c:	e00e      	b.n	80046ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f993 	bl	80049ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004694:	e00a      	b.n	80046ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f98f 	bl	80049ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469c:	e006      	b.n	80046ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f98b 	bl	80049ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80046aa:	e175      	b.n	8004998 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ac:	bf00      	nop
    return;
 80046ae:	e173      	b.n	8004998 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	f040 814f 	bne.w	8004958 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046be:	f003 0310 	and.w	r3, r3, #16
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 8148 	beq.w	8004958 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046cc:	f003 0310 	and.w	r3, r3, #16
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 8141 	beq.w	8004958 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046d6:	2300      	movs	r3, #0
 80046d8:	60bb      	str	r3, [r7, #8]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 80b6 	beq.w	8004868 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004708:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8145 	beq.w	800499c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004716:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800471a:	429a      	cmp	r2, r3
 800471c:	f080 813e 	bcs.w	800499c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004726:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b20      	cmp	r3, #32
 8004730:	f000 8088 	beq.w	8004844 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	330c      	adds	r3, #12
 800473a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800474a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800474e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004752:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	330c      	adds	r3, #12
 800475c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004760:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004764:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800476c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004770:	e841 2300 	strex	r3, r2, [r1]
 8004774:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004778:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1d9      	bne.n	8004734 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3314      	adds	r3, #20
 8004786:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004790:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004792:	f023 0301 	bic.w	r3, r3, #1
 8004796:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3314      	adds	r3, #20
 80047a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047a4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047a8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e1      	bne.n	8004780 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3314      	adds	r3, #20
 80047c2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047c6:	e853 3f00 	ldrex	r3, [r3]
 80047ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3314      	adds	r3, #20
 80047dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047e0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047e8:	e841 2300 	strex	r3, r2, [r1]
 80047ec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1e3      	bne.n	80047bc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	330c      	adds	r3, #12
 8004808:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004814:	f023 0310 	bic.w	r3, r3, #16
 8004818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	330c      	adds	r3, #12
 8004822:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004826:	65ba      	str	r2, [r7, #88]	; 0x58
 8004828:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800482c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e3      	bne.n	8004802 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483e:	4618      	mov	r0, r3
 8004840:	f7fd fef3 	bl	800262a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004852:	b29b      	uxth	r3, r3
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	b29b      	uxth	r3, r3
 8004858:	4619      	mov	r1, r3
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f8b6 	bl	80049cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004860:	e09c      	b.n	800499c <HAL_UART_IRQHandler+0x518>
 8004862:	bf00      	nop
 8004864:	08004b19 	.word	0x08004b19
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004870:	b29b      	uxth	r3, r3
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 808e 	beq.w	80049a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004884:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 8089 	beq.w	80049a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	330c      	adds	r3, #12
 8004894:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800489e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80048b2:	647a      	str	r2, [r7, #68]	; 0x44
 80048b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e3      	bne.n	800488e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3314      	adds	r3, #20
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	623b      	str	r3, [r7, #32]
   return(result);
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	f023 0301 	bic.w	r3, r3, #1
 80048dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3314      	adds	r3, #20
 80048e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048ea:	633a      	str	r2, [r7, #48]	; 0x30
 80048ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e3      	bne.n	80048c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	e853 3f00 	ldrex	r3, [r3]
 800491a:	60fb      	str	r3, [r7, #12]
   return(result);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0310 	bic.w	r3, r3, #16
 8004922:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	330c      	adds	r3, #12
 800492c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004930:	61fa      	str	r2, [r7, #28]
 8004932:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	69b9      	ldr	r1, [r7, #24]
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	617b      	str	r3, [r7, #20]
   return(result);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e3      	bne.n	800490c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800494a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800494e:	4619      	mov	r1, r3
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f83b 	bl	80049cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004956:	e023      	b.n	80049a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004960:	2b00      	cmp	r3, #0
 8004962:	d009      	beq.n	8004978 <HAL_UART_IRQHandler+0x4f4>
 8004964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f8e5 	bl	8004b40 <UART_Transmit_IT>
    return;
 8004976:	e014      	b.n	80049a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00e      	beq.n	80049a2 <HAL_UART_IRQHandler+0x51e>
 8004984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f924 	bl	8004bde <UART_EndTransmit_IT>
    return;
 8004996:	e004      	b.n	80049a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004998:	bf00      	nop
 800499a:	e002      	b.n	80049a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800499c:	bf00      	nop
 800499e:	e000      	b.n	80049a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80049a0:	bf00      	nop
  }
}
 80049a2:	37e8      	adds	r7, #232	; 0xe8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc80      	pop	{r7}
 80049b8:	4770      	bx	lr

080049ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr

080049cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr

080049e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	4613      	mov	r3, r2
 80049ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	88fa      	ldrh	r2, [r7, #6]
 80049fa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	88fa      	ldrh	r2, [r7, #6]
 8004a00:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2222      	movs	r2, #34	; 0x22
 8004a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d007      	beq.n	8004a28 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a26:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695a      	ldr	r2, [r3, #20]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0220 	orr.w	r2, r2, #32
 8004a46:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b095      	sub	sp, #84	; 0x54
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	330c      	adds	r3, #12
 8004a62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	330c      	adds	r3, #12
 8004a7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a7c:	643a      	str	r2, [r7, #64]	; 0x40
 8004a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e5      	bne.n	8004a5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3314      	adds	r3, #20
 8004a96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3314      	adds	r3, #20
 8004aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ab0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e5      	bne.n	8004a90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d119      	bne.n	8004b00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f023 0310 	bic.w	r3, r3, #16
 8004ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	330c      	adds	r3, #12
 8004aea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aec:	61ba      	str	r2, [r7, #24]
 8004aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6979      	ldr	r1, [r7, #20]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	613b      	str	r3, [r7, #16]
   return(result);
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e5      	bne.n	8004acc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b0e:	bf00      	nop
 8004b10:	3754      	adds	r7, #84	; 0x54
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bc80      	pop	{r7}
 8004b16:	4770      	bx	lr

08004b18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f7ff ff41 	bl	80049ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b38:	bf00      	nop
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b21      	cmp	r3, #33	; 0x21
 8004b52:	d13e      	bne.n	8004bd2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5c:	d114      	bne.n	8004b88 <UART_Transmit_IT+0x48>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d110      	bne.n	8004b88 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	1c9a      	adds	r2, r3, #2
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	621a      	str	r2, [r3, #32]
 8004b86:	e008      	b.n	8004b9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	1c59      	adds	r1, r3, #1
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6211      	str	r1, [r2, #32]
 8004b92:	781a      	ldrb	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10f      	bne.n	8004bce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bcc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	e000      	b.n	8004bd4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bd2:	2302      	movs	r3, #2
  }
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bc80      	pop	{r7}
 8004bdc:	4770      	bx	lr

08004bde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7ff fed2 	bl	80049a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b08c      	sub	sp, #48	; 0x30
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b22      	cmp	r3, #34	; 0x22
 8004c20:	f040 80ae 	bne.w	8004d80 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2c:	d117      	bne.n	8004c5e <UART_Receive_IT+0x50>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d113      	bne.n	8004c5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	1c9a      	adds	r2, r3, #2
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c5c:	e026      	b.n	8004cac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c64:	2300      	movs	r3, #0
 8004c66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c70:	d007      	beq.n	8004c82 <UART_Receive_IT+0x74>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10a      	bne.n	8004c90 <UART_Receive_IT+0x82>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8c:	701a      	strb	r2, [r3, #0]
 8004c8e:	e008      	b.n	8004ca2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d15d      	bne.n	8004d7c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0220 	bic.w	r2, r2, #32
 8004cce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695a      	ldr	r2, [r3, #20]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0201 	bic.w	r2, r2, #1
 8004cee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d135      	bne.n	8004d72 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	330c      	adds	r3, #12
 8004d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f023 0310 	bic.w	r3, r3, #16
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d2c:	623a      	str	r2, [r7, #32]
 8004d2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	69f9      	ldr	r1, [r7, #28]
 8004d32:	6a3a      	ldr	r2, [r7, #32]
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e5      	bne.n	8004d0c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b10      	cmp	r3, #16
 8004d4c:	d10a      	bne.n	8004d64 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d68:	4619      	mov	r1, r3
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff fe2e 	bl	80049cc <HAL_UARTEx_RxEventCallback>
 8004d70:	e002      	b.n	8004d78 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fc fd2c 	bl	80017d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	e002      	b.n	8004d82 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e000      	b.n	8004d82 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004d80:	2302      	movs	r3, #2
  }
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3730      	adds	r7, #48	; 0x30
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004dc6:	f023 030c 	bic.w	r3, r3, #12
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6812      	ldr	r2, [r2, #0]
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a2c      	ldr	r2, [pc, #176]	; (8004ea0 <UART_SetConfig+0x114>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d103      	bne.n	8004dfc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004df4:	f7fe fa46 	bl	8003284 <HAL_RCC_GetPCLK2Freq>
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	e002      	b.n	8004e02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004dfc:	f7fe fa2e 	bl	800325c <HAL_RCC_GetPCLK1Freq>
 8004e00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	009a      	lsls	r2, r3, #2
 8004e0c:	441a      	add	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e18:	4a22      	ldr	r2, [pc, #136]	; (8004ea4 <UART_SetConfig+0x118>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	0119      	lsls	r1, r3, #4
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4613      	mov	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	009a      	lsls	r2, r3, #2
 8004e2c:	441a      	add	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e38:	4b1a      	ldr	r3, [pc, #104]	; (8004ea4 <UART_SetConfig+0x118>)
 8004e3a:	fba3 0302 	umull	r0, r3, r3, r2
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	2064      	movs	r0, #100	; 0x64
 8004e42:	fb00 f303 	mul.w	r3, r0, r3
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	3332      	adds	r3, #50	; 0x32
 8004e4c:	4a15      	ldr	r2, [pc, #84]	; (8004ea4 <UART_SetConfig+0x118>)
 8004e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e58:	4419      	add	r1, r3
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	009a      	lsls	r2, r3, #2
 8004e64:	441a      	add	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e70:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <UART_SetConfig+0x118>)
 8004e72:	fba3 0302 	umull	r0, r3, r3, r2
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	2064      	movs	r0, #100	; 0x64
 8004e7a:	fb00 f303 	mul.w	r3, r0, r3
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	3332      	adds	r3, #50	; 0x32
 8004e84:	4a07      	ldr	r2, [pc, #28]	; (8004ea4 <UART_SetConfig+0x118>)
 8004e86:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	f003 020f 	and.w	r2, r3, #15
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	440a      	add	r2, r1
 8004e96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e98:	bf00      	nop
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40013800 	.word	0x40013800
 8004ea4:	51eb851f 	.word	0x51eb851f

08004ea8 <atof>:
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	f000 bf31 	b.w	8005d10 <strtod>
	...

08004eb0 <__errno>:
 8004eb0:	4b01      	ldr	r3, [pc, #4]	; (8004eb8 <__errno+0x8>)
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	20000024 	.word	0x20000024

08004ebc <__libc_init_array>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	2600      	movs	r6, #0
 8004ec0:	4d0c      	ldr	r5, [pc, #48]	; (8004ef4 <__libc_init_array+0x38>)
 8004ec2:	4c0d      	ldr	r4, [pc, #52]	; (8004ef8 <__libc_init_array+0x3c>)
 8004ec4:	1b64      	subs	r4, r4, r5
 8004ec6:	10a4      	asrs	r4, r4, #2
 8004ec8:	42a6      	cmp	r6, r4
 8004eca:	d109      	bne.n	8004ee0 <__libc_init_array+0x24>
 8004ecc:	f002 ff0e 	bl	8007cec <_init>
 8004ed0:	2600      	movs	r6, #0
 8004ed2:	4d0a      	ldr	r5, [pc, #40]	; (8004efc <__libc_init_array+0x40>)
 8004ed4:	4c0a      	ldr	r4, [pc, #40]	; (8004f00 <__libc_init_array+0x44>)
 8004ed6:	1b64      	subs	r4, r4, r5
 8004ed8:	10a4      	asrs	r4, r4, #2
 8004eda:	42a6      	cmp	r6, r4
 8004edc:	d105      	bne.n	8004eea <__libc_init_array+0x2e>
 8004ede:	bd70      	pop	{r4, r5, r6, pc}
 8004ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee4:	4798      	blx	r3
 8004ee6:	3601      	adds	r6, #1
 8004ee8:	e7ee      	b.n	8004ec8 <__libc_init_array+0xc>
 8004eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eee:	4798      	blx	r3
 8004ef0:	3601      	adds	r6, #1
 8004ef2:	e7f2      	b.n	8004eda <__libc_init_array+0x1e>
 8004ef4:	080081d8 	.word	0x080081d8
 8004ef8:	080081d8 	.word	0x080081d8
 8004efc:	080081d8 	.word	0x080081d8
 8004f00:	080081dc 	.word	0x080081dc

08004f04 <malloc>:
 8004f04:	4b02      	ldr	r3, [pc, #8]	; (8004f10 <malloc+0xc>)
 8004f06:	4601      	mov	r1, r0
 8004f08:	6818      	ldr	r0, [r3, #0]
 8004f0a:	f000 b873 	b.w	8004ff4 <_malloc_r>
 8004f0e:	bf00      	nop
 8004f10:	20000024 	.word	0x20000024

08004f14 <memset>:
 8004f14:	4603      	mov	r3, r0
 8004f16:	4402      	add	r2, r0
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d100      	bne.n	8004f1e <memset+0xa>
 8004f1c:	4770      	bx	lr
 8004f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f22:	e7f9      	b.n	8004f18 <memset+0x4>

08004f24 <_free_r>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	4605      	mov	r5, r0
 8004f28:	2900      	cmp	r1, #0
 8004f2a:	d040      	beq.n	8004fae <_free_r+0x8a>
 8004f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f30:	1f0c      	subs	r4, r1, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	bfb8      	it	lt
 8004f36:	18e4      	addlt	r4, r4, r3
 8004f38:	f001 fb08 	bl	800654c <__malloc_lock>
 8004f3c:	4a1c      	ldr	r2, [pc, #112]	; (8004fb0 <_free_r+0x8c>)
 8004f3e:	6813      	ldr	r3, [r2, #0]
 8004f40:	b933      	cbnz	r3, 8004f50 <_free_r+0x2c>
 8004f42:	6063      	str	r3, [r4, #4]
 8004f44:	6014      	str	r4, [r2, #0]
 8004f46:	4628      	mov	r0, r5
 8004f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f4c:	f001 bb04 	b.w	8006558 <__malloc_unlock>
 8004f50:	42a3      	cmp	r3, r4
 8004f52:	d908      	bls.n	8004f66 <_free_r+0x42>
 8004f54:	6820      	ldr	r0, [r4, #0]
 8004f56:	1821      	adds	r1, r4, r0
 8004f58:	428b      	cmp	r3, r1
 8004f5a:	bf01      	itttt	eq
 8004f5c:	6819      	ldreq	r1, [r3, #0]
 8004f5e:	685b      	ldreq	r3, [r3, #4]
 8004f60:	1809      	addeq	r1, r1, r0
 8004f62:	6021      	streq	r1, [r4, #0]
 8004f64:	e7ed      	b.n	8004f42 <_free_r+0x1e>
 8004f66:	461a      	mov	r2, r3
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	b10b      	cbz	r3, 8004f70 <_free_r+0x4c>
 8004f6c:	42a3      	cmp	r3, r4
 8004f6e:	d9fa      	bls.n	8004f66 <_free_r+0x42>
 8004f70:	6811      	ldr	r1, [r2, #0]
 8004f72:	1850      	adds	r0, r2, r1
 8004f74:	42a0      	cmp	r0, r4
 8004f76:	d10b      	bne.n	8004f90 <_free_r+0x6c>
 8004f78:	6820      	ldr	r0, [r4, #0]
 8004f7a:	4401      	add	r1, r0
 8004f7c:	1850      	adds	r0, r2, r1
 8004f7e:	4283      	cmp	r3, r0
 8004f80:	6011      	str	r1, [r2, #0]
 8004f82:	d1e0      	bne.n	8004f46 <_free_r+0x22>
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	4401      	add	r1, r0
 8004f8a:	6011      	str	r1, [r2, #0]
 8004f8c:	6053      	str	r3, [r2, #4]
 8004f8e:	e7da      	b.n	8004f46 <_free_r+0x22>
 8004f90:	d902      	bls.n	8004f98 <_free_r+0x74>
 8004f92:	230c      	movs	r3, #12
 8004f94:	602b      	str	r3, [r5, #0]
 8004f96:	e7d6      	b.n	8004f46 <_free_r+0x22>
 8004f98:	6820      	ldr	r0, [r4, #0]
 8004f9a:	1821      	adds	r1, r4, r0
 8004f9c:	428b      	cmp	r3, r1
 8004f9e:	bf01      	itttt	eq
 8004fa0:	6819      	ldreq	r1, [r3, #0]
 8004fa2:	685b      	ldreq	r3, [r3, #4]
 8004fa4:	1809      	addeq	r1, r1, r0
 8004fa6:	6021      	streq	r1, [r4, #0]
 8004fa8:	6063      	str	r3, [r4, #4]
 8004faa:	6054      	str	r4, [r2, #4]
 8004fac:	e7cb      	b.n	8004f46 <_free_r+0x22>
 8004fae:	bd38      	pop	{r3, r4, r5, pc}
 8004fb0:	20000678 	.word	0x20000678

08004fb4 <sbrk_aligned>:
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	4e0e      	ldr	r6, [pc, #56]	; (8004ff0 <sbrk_aligned+0x3c>)
 8004fb8:	460c      	mov	r4, r1
 8004fba:	6831      	ldr	r1, [r6, #0]
 8004fbc:	4605      	mov	r5, r0
 8004fbe:	b911      	cbnz	r1, 8004fc6 <sbrk_aligned+0x12>
 8004fc0:	f000 f88c 	bl	80050dc <_sbrk_r>
 8004fc4:	6030      	str	r0, [r6, #0]
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	4628      	mov	r0, r5
 8004fca:	f000 f887 	bl	80050dc <_sbrk_r>
 8004fce:	1c43      	adds	r3, r0, #1
 8004fd0:	d00a      	beq.n	8004fe8 <sbrk_aligned+0x34>
 8004fd2:	1cc4      	adds	r4, r0, #3
 8004fd4:	f024 0403 	bic.w	r4, r4, #3
 8004fd8:	42a0      	cmp	r0, r4
 8004fda:	d007      	beq.n	8004fec <sbrk_aligned+0x38>
 8004fdc:	1a21      	subs	r1, r4, r0
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f000 f87c 	bl	80050dc <_sbrk_r>
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d101      	bne.n	8004fec <sbrk_aligned+0x38>
 8004fe8:	f04f 34ff 	mov.w	r4, #4294967295
 8004fec:	4620      	mov	r0, r4
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
 8004ff0:	2000067c 	.word	0x2000067c

08004ff4 <_malloc_r>:
 8004ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff8:	1ccd      	adds	r5, r1, #3
 8004ffa:	f025 0503 	bic.w	r5, r5, #3
 8004ffe:	3508      	adds	r5, #8
 8005000:	2d0c      	cmp	r5, #12
 8005002:	bf38      	it	cc
 8005004:	250c      	movcc	r5, #12
 8005006:	2d00      	cmp	r5, #0
 8005008:	4607      	mov	r7, r0
 800500a:	db01      	blt.n	8005010 <_malloc_r+0x1c>
 800500c:	42a9      	cmp	r1, r5
 800500e:	d905      	bls.n	800501c <_malloc_r+0x28>
 8005010:	230c      	movs	r3, #12
 8005012:	2600      	movs	r6, #0
 8005014:	603b      	str	r3, [r7, #0]
 8005016:	4630      	mov	r0, r6
 8005018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800501c:	4e2e      	ldr	r6, [pc, #184]	; (80050d8 <_malloc_r+0xe4>)
 800501e:	f001 fa95 	bl	800654c <__malloc_lock>
 8005022:	6833      	ldr	r3, [r6, #0]
 8005024:	461c      	mov	r4, r3
 8005026:	bb34      	cbnz	r4, 8005076 <_malloc_r+0x82>
 8005028:	4629      	mov	r1, r5
 800502a:	4638      	mov	r0, r7
 800502c:	f7ff ffc2 	bl	8004fb4 <sbrk_aligned>
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	4604      	mov	r4, r0
 8005034:	d14d      	bne.n	80050d2 <_malloc_r+0xde>
 8005036:	6834      	ldr	r4, [r6, #0]
 8005038:	4626      	mov	r6, r4
 800503a:	2e00      	cmp	r6, #0
 800503c:	d140      	bne.n	80050c0 <_malloc_r+0xcc>
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	4631      	mov	r1, r6
 8005042:	4638      	mov	r0, r7
 8005044:	eb04 0803 	add.w	r8, r4, r3
 8005048:	f000 f848 	bl	80050dc <_sbrk_r>
 800504c:	4580      	cmp	r8, r0
 800504e:	d13a      	bne.n	80050c6 <_malloc_r+0xd2>
 8005050:	6821      	ldr	r1, [r4, #0]
 8005052:	3503      	adds	r5, #3
 8005054:	1a6d      	subs	r5, r5, r1
 8005056:	f025 0503 	bic.w	r5, r5, #3
 800505a:	3508      	adds	r5, #8
 800505c:	2d0c      	cmp	r5, #12
 800505e:	bf38      	it	cc
 8005060:	250c      	movcc	r5, #12
 8005062:	4638      	mov	r0, r7
 8005064:	4629      	mov	r1, r5
 8005066:	f7ff ffa5 	bl	8004fb4 <sbrk_aligned>
 800506a:	3001      	adds	r0, #1
 800506c:	d02b      	beq.n	80050c6 <_malloc_r+0xd2>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	442b      	add	r3, r5
 8005072:	6023      	str	r3, [r4, #0]
 8005074:	e00e      	b.n	8005094 <_malloc_r+0xa0>
 8005076:	6822      	ldr	r2, [r4, #0]
 8005078:	1b52      	subs	r2, r2, r5
 800507a:	d41e      	bmi.n	80050ba <_malloc_r+0xc6>
 800507c:	2a0b      	cmp	r2, #11
 800507e:	d916      	bls.n	80050ae <_malloc_r+0xba>
 8005080:	1961      	adds	r1, r4, r5
 8005082:	42a3      	cmp	r3, r4
 8005084:	6025      	str	r5, [r4, #0]
 8005086:	bf18      	it	ne
 8005088:	6059      	strne	r1, [r3, #4]
 800508a:	6863      	ldr	r3, [r4, #4]
 800508c:	bf08      	it	eq
 800508e:	6031      	streq	r1, [r6, #0]
 8005090:	5162      	str	r2, [r4, r5]
 8005092:	604b      	str	r3, [r1, #4]
 8005094:	4638      	mov	r0, r7
 8005096:	f104 060b 	add.w	r6, r4, #11
 800509a:	f001 fa5d 	bl	8006558 <__malloc_unlock>
 800509e:	f026 0607 	bic.w	r6, r6, #7
 80050a2:	1d23      	adds	r3, r4, #4
 80050a4:	1af2      	subs	r2, r6, r3
 80050a6:	d0b6      	beq.n	8005016 <_malloc_r+0x22>
 80050a8:	1b9b      	subs	r3, r3, r6
 80050aa:	50a3      	str	r3, [r4, r2]
 80050ac:	e7b3      	b.n	8005016 <_malloc_r+0x22>
 80050ae:	6862      	ldr	r2, [r4, #4]
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	bf0c      	ite	eq
 80050b4:	6032      	streq	r2, [r6, #0]
 80050b6:	605a      	strne	r2, [r3, #4]
 80050b8:	e7ec      	b.n	8005094 <_malloc_r+0xa0>
 80050ba:	4623      	mov	r3, r4
 80050bc:	6864      	ldr	r4, [r4, #4]
 80050be:	e7b2      	b.n	8005026 <_malloc_r+0x32>
 80050c0:	4634      	mov	r4, r6
 80050c2:	6876      	ldr	r6, [r6, #4]
 80050c4:	e7b9      	b.n	800503a <_malloc_r+0x46>
 80050c6:	230c      	movs	r3, #12
 80050c8:	4638      	mov	r0, r7
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	f001 fa44 	bl	8006558 <__malloc_unlock>
 80050d0:	e7a1      	b.n	8005016 <_malloc_r+0x22>
 80050d2:	6025      	str	r5, [r4, #0]
 80050d4:	e7de      	b.n	8005094 <_malloc_r+0xa0>
 80050d6:	bf00      	nop
 80050d8:	20000678 	.word	0x20000678

080050dc <_sbrk_r>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	2300      	movs	r3, #0
 80050e0:	4d05      	ldr	r5, [pc, #20]	; (80050f8 <_sbrk_r+0x1c>)
 80050e2:	4604      	mov	r4, r0
 80050e4:	4608      	mov	r0, r1
 80050e6:	602b      	str	r3, [r5, #0]
 80050e8:	f7fc fdec 	bl	8001cc4 <_sbrk>
 80050ec:	1c43      	adds	r3, r0, #1
 80050ee:	d102      	bne.n	80050f6 <_sbrk_r+0x1a>
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	b103      	cbz	r3, 80050f6 <_sbrk_r+0x1a>
 80050f4:	6023      	str	r3, [r4, #0]
 80050f6:	bd38      	pop	{r3, r4, r5, pc}
 80050f8:	20000680 	.word	0x20000680

080050fc <sulp>:
 80050fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005100:	460f      	mov	r7, r1
 8005102:	4690      	mov	r8, r2
 8005104:	f001 fd9e 	bl	8006c44 <__ulp>
 8005108:	4604      	mov	r4, r0
 800510a:	460d      	mov	r5, r1
 800510c:	f1b8 0f00 	cmp.w	r8, #0
 8005110:	d011      	beq.n	8005136 <sulp+0x3a>
 8005112:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005116:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800511a:	2b00      	cmp	r3, #0
 800511c:	dd0b      	ble.n	8005136 <sulp+0x3a>
 800511e:	2400      	movs	r4, #0
 8005120:	051b      	lsls	r3, r3, #20
 8005122:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005126:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800512a:	4622      	mov	r2, r4
 800512c:	462b      	mov	r3, r5
 800512e:	f7fb f9dd 	bl	80004ec <__aeabi_dmul>
 8005132:	4604      	mov	r4, r0
 8005134:	460d      	mov	r5, r1
 8005136:	4620      	mov	r0, r4
 8005138:	4629      	mov	r1, r5
 800513a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005140 <_strtod_l>:
 8005140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005144:	469b      	mov	fp, r3
 8005146:	2300      	movs	r3, #0
 8005148:	b09f      	sub	sp, #124	; 0x7c
 800514a:	931a      	str	r3, [sp, #104]	; 0x68
 800514c:	4b9e      	ldr	r3, [pc, #632]	; (80053c8 <_strtod_l+0x288>)
 800514e:	4682      	mov	sl, r0
 8005150:	681f      	ldr	r7, [r3, #0]
 8005152:	460e      	mov	r6, r1
 8005154:	4638      	mov	r0, r7
 8005156:	9215      	str	r2, [sp, #84]	; 0x54
 8005158:	f7fb f804 	bl	8000164 <strlen>
 800515c:	f04f 0800 	mov.w	r8, #0
 8005160:	4604      	mov	r4, r0
 8005162:	f04f 0900 	mov.w	r9, #0
 8005166:	9619      	str	r6, [sp, #100]	; 0x64
 8005168:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800516a:	781a      	ldrb	r2, [r3, #0]
 800516c:	2a2b      	cmp	r2, #43	; 0x2b
 800516e:	d04c      	beq.n	800520a <_strtod_l+0xca>
 8005170:	d83a      	bhi.n	80051e8 <_strtod_l+0xa8>
 8005172:	2a0d      	cmp	r2, #13
 8005174:	d833      	bhi.n	80051de <_strtod_l+0x9e>
 8005176:	2a08      	cmp	r2, #8
 8005178:	d833      	bhi.n	80051e2 <_strtod_l+0xa2>
 800517a:	2a00      	cmp	r2, #0
 800517c:	d03d      	beq.n	80051fa <_strtod_l+0xba>
 800517e:	2300      	movs	r3, #0
 8005180:	930a      	str	r3, [sp, #40]	; 0x28
 8005182:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005184:	782b      	ldrb	r3, [r5, #0]
 8005186:	2b30      	cmp	r3, #48	; 0x30
 8005188:	f040 80aa 	bne.w	80052e0 <_strtod_l+0x1a0>
 800518c:	786b      	ldrb	r3, [r5, #1]
 800518e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005192:	2b58      	cmp	r3, #88	; 0x58
 8005194:	d166      	bne.n	8005264 <_strtod_l+0x124>
 8005196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005198:	4650      	mov	r0, sl
 800519a:	9301      	str	r3, [sp, #4]
 800519c:	ab1a      	add	r3, sp, #104	; 0x68
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	4a8a      	ldr	r2, [pc, #552]	; (80053cc <_strtod_l+0x28c>)
 80051a2:	f8cd b008 	str.w	fp, [sp, #8]
 80051a6:	ab1b      	add	r3, sp, #108	; 0x6c
 80051a8:	a919      	add	r1, sp, #100	; 0x64
 80051aa:	f000 feb1 	bl	8005f10 <__gethex>
 80051ae:	f010 0607 	ands.w	r6, r0, #7
 80051b2:	4604      	mov	r4, r0
 80051b4:	d005      	beq.n	80051c2 <_strtod_l+0x82>
 80051b6:	2e06      	cmp	r6, #6
 80051b8:	d129      	bne.n	800520e <_strtod_l+0xce>
 80051ba:	2300      	movs	r3, #0
 80051bc:	3501      	adds	r5, #1
 80051be:	9519      	str	r5, [sp, #100]	; 0x64
 80051c0:	930a      	str	r3, [sp, #40]	; 0x28
 80051c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f040 858a 	bne.w	8005cde <_strtod_l+0xb9e>
 80051ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051cc:	b1d3      	cbz	r3, 8005204 <_strtod_l+0xc4>
 80051ce:	4642      	mov	r2, r8
 80051d0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80051d4:	4610      	mov	r0, r2
 80051d6:	4619      	mov	r1, r3
 80051d8:	b01f      	add	sp, #124	; 0x7c
 80051da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051de:	2a20      	cmp	r2, #32
 80051e0:	d1cd      	bne.n	800517e <_strtod_l+0x3e>
 80051e2:	3301      	adds	r3, #1
 80051e4:	9319      	str	r3, [sp, #100]	; 0x64
 80051e6:	e7bf      	b.n	8005168 <_strtod_l+0x28>
 80051e8:	2a2d      	cmp	r2, #45	; 0x2d
 80051ea:	d1c8      	bne.n	800517e <_strtod_l+0x3e>
 80051ec:	2201      	movs	r2, #1
 80051ee:	920a      	str	r2, [sp, #40]	; 0x28
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	9219      	str	r2, [sp, #100]	; 0x64
 80051f4:	785b      	ldrb	r3, [r3, #1]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1c3      	bne.n	8005182 <_strtod_l+0x42>
 80051fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051fc:	9619      	str	r6, [sp, #100]	; 0x64
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f040 856b 	bne.w	8005cda <_strtod_l+0xb9a>
 8005204:	4642      	mov	r2, r8
 8005206:	464b      	mov	r3, r9
 8005208:	e7e4      	b.n	80051d4 <_strtod_l+0x94>
 800520a:	2200      	movs	r2, #0
 800520c:	e7ef      	b.n	80051ee <_strtod_l+0xae>
 800520e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005210:	b13a      	cbz	r2, 8005222 <_strtod_l+0xe2>
 8005212:	2135      	movs	r1, #53	; 0x35
 8005214:	a81c      	add	r0, sp, #112	; 0x70
 8005216:	f001 fe19 	bl	8006e4c <__copybits>
 800521a:	4650      	mov	r0, sl
 800521c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800521e:	f001 f9e1 	bl	80065e4 <_Bfree>
 8005222:	3e01      	subs	r6, #1
 8005224:	2e04      	cmp	r6, #4
 8005226:	d806      	bhi.n	8005236 <_strtod_l+0xf6>
 8005228:	e8df f006 	tbb	[pc, r6]
 800522c:	1714030a 	.word	0x1714030a
 8005230:	0a          	.byte	0x0a
 8005231:	00          	.byte	0x00
 8005232:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005236:	0721      	lsls	r1, r4, #28
 8005238:	d5c3      	bpl.n	80051c2 <_strtod_l+0x82>
 800523a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800523e:	e7c0      	b.n	80051c2 <_strtod_l+0x82>
 8005240:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005242:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005246:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800524a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800524e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005252:	e7f0      	b.n	8005236 <_strtod_l+0xf6>
 8005254:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80053d0 <_strtod_l+0x290>
 8005258:	e7ed      	b.n	8005236 <_strtod_l+0xf6>
 800525a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800525e:	f04f 38ff 	mov.w	r8, #4294967295
 8005262:	e7e8      	b.n	8005236 <_strtod_l+0xf6>
 8005264:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	9219      	str	r2, [sp, #100]	; 0x64
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	2b30      	cmp	r3, #48	; 0x30
 800526e:	d0f9      	beq.n	8005264 <_strtod_l+0x124>
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0a6      	beq.n	80051c2 <_strtod_l+0x82>
 8005274:	2301      	movs	r3, #1
 8005276:	9307      	str	r3, [sp, #28]
 8005278:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800527a:	220a      	movs	r2, #10
 800527c:	9308      	str	r3, [sp, #32]
 800527e:	2300      	movs	r3, #0
 8005280:	469b      	mov	fp, r3
 8005282:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005286:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005288:	7805      	ldrb	r5, [r0, #0]
 800528a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800528e:	b2d9      	uxtb	r1, r3
 8005290:	2909      	cmp	r1, #9
 8005292:	d927      	bls.n	80052e4 <_strtod_l+0x1a4>
 8005294:	4622      	mov	r2, r4
 8005296:	4639      	mov	r1, r7
 8005298:	f002 f924 	bl	80074e4 <strncmp>
 800529c:	2800      	cmp	r0, #0
 800529e:	d033      	beq.n	8005308 <_strtod_l+0x1c8>
 80052a0:	2000      	movs	r0, #0
 80052a2:	462a      	mov	r2, r5
 80052a4:	465c      	mov	r4, fp
 80052a6:	4603      	mov	r3, r0
 80052a8:	9004      	str	r0, [sp, #16]
 80052aa:	2a65      	cmp	r2, #101	; 0x65
 80052ac:	d001      	beq.n	80052b2 <_strtod_l+0x172>
 80052ae:	2a45      	cmp	r2, #69	; 0x45
 80052b0:	d114      	bne.n	80052dc <_strtod_l+0x19c>
 80052b2:	b91c      	cbnz	r4, 80052bc <_strtod_l+0x17c>
 80052b4:	9a07      	ldr	r2, [sp, #28]
 80052b6:	4302      	orrs	r2, r0
 80052b8:	d09f      	beq.n	80051fa <_strtod_l+0xba>
 80052ba:	2400      	movs	r4, #0
 80052bc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80052be:	1c72      	adds	r2, r6, #1
 80052c0:	9219      	str	r2, [sp, #100]	; 0x64
 80052c2:	7872      	ldrb	r2, [r6, #1]
 80052c4:	2a2b      	cmp	r2, #43	; 0x2b
 80052c6:	d079      	beq.n	80053bc <_strtod_l+0x27c>
 80052c8:	2a2d      	cmp	r2, #45	; 0x2d
 80052ca:	f000 8083 	beq.w	80053d4 <_strtod_l+0x294>
 80052ce:	2700      	movs	r7, #0
 80052d0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80052d4:	2909      	cmp	r1, #9
 80052d6:	f240 8083 	bls.w	80053e0 <_strtod_l+0x2a0>
 80052da:	9619      	str	r6, [sp, #100]	; 0x64
 80052dc:	2500      	movs	r5, #0
 80052de:	e09f      	b.n	8005420 <_strtod_l+0x2e0>
 80052e0:	2300      	movs	r3, #0
 80052e2:	e7c8      	b.n	8005276 <_strtod_l+0x136>
 80052e4:	f1bb 0f08 	cmp.w	fp, #8
 80052e8:	bfd5      	itete	le
 80052ea:	9906      	ldrle	r1, [sp, #24]
 80052ec:	9905      	ldrgt	r1, [sp, #20]
 80052ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80052f2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80052f6:	f100 0001 	add.w	r0, r0, #1
 80052fa:	bfd4      	ite	le
 80052fc:	9306      	strle	r3, [sp, #24]
 80052fe:	9305      	strgt	r3, [sp, #20]
 8005300:	f10b 0b01 	add.w	fp, fp, #1
 8005304:	9019      	str	r0, [sp, #100]	; 0x64
 8005306:	e7be      	b.n	8005286 <_strtod_l+0x146>
 8005308:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800530a:	191a      	adds	r2, r3, r4
 800530c:	9219      	str	r2, [sp, #100]	; 0x64
 800530e:	5d1a      	ldrb	r2, [r3, r4]
 8005310:	f1bb 0f00 	cmp.w	fp, #0
 8005314:	d036      	beq.n	8005384 <_strtod_l+0x244>
 8005316:	465c      	mov	r4, fp
 8005318:	9004      	str	r0, [sp, #16]
 800531a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800531e:	2b09      	cmp	r3, #9
 8005320:	d912      	bls.n	8005348 <_strtod_l+0x208>
 8005322:	2301      	movs	r3, #1
 8005324:	e7c1      	b.n	80052aa <_strtod_l+0x16a>
 8005326:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005328:	3001      	adds	r0, #1
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	9219      	str	r2, [sp, #100]	; 0x64
 800532e:	785a      	ldrb	r2, [r3, #1]
 8005330:	2a30      	cmp	r2, #48	; 0x30
 8005332:	d0f8      	beq.n	8005326 <_strtod_l+0x1e6>
 8005334:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005338:	2b08      	cmp	r3, #8
 800533a:	f200 84d5 	bhi.w	8005ce8 <_strtod_l+0xba8>
 800533e:	9004      	str	r0, [sp, #16]
 8005340:	2000      	movs	r0, #0
 8005342:	4604      	mov	r4, r0
 8005344:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005346:	9308      	str	r3, [sp, #32]
 8005348:	3a30      	subs	r2, #48	; 0x30
 800534a:	f100 0301 	add.w	r3, r0, #1
 800534e:	d013      	beq.n	8005378 <_strtod_l+0x238>
 8005350:	9904      	ldr	r1, [sp, #16]
 8005352:	1905      	adds	r5, r0, r4
 8005354:	4419      	add	r1, r3
 8005356:	9104      	str	r1, [sp, #16]
 8005358:	4623      	mov	r3, r4
 800535a:	210a      	movs	r1, #10
 800535c:	42ab      	cmp	r3, r5
 800535e:	d113      	bne.n	8005388 <_strtod_l+0x248>
 8005360:	1823      	adds	r3, r4, r0
 8005362:	2b08      	cmp	r3, #8
 8005364:	f104 0401 	add.w	r4, r4, #1
 8005368:	4404      	add	r4, r0
 800536a:	dc1b      	bgt.n	80053a4 <_strtod_l+0x264>
 800536c:	230a      	movs	r3, #10
 800536e:	9906      	ldr	r1, [sp, #24]
 8005370:	fb03 2301 	mla	r3, r3, r1, r2
 8005374:	9306      	str	r3, [sp, #24]
 8005376:	2300      	movs	r3, #0
 8005378:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800537a:	4618      	mov	r0, r3
 800537c:	1c51      	adds	r1, r2, #1
 800537e:	9119      	str	r1, [sp, #100]	; 0x64
 8005380:	7852      	ldrb	r2, [r2, #1]
 8005382:	e7ca      	b.n	800531a <_strtod_l+0x1da>
 8005384:	4658      	mov	r0, fp
 8005386:	e7d3      	b.n	8005330 <_strtod_l+0x1f0>
 8005388:	2b08      	cmp	r3, #8
 800538a:	dc04      	bgt.n	8005396 <_strtod_l+0x256>
 800538c:	9f06      	ldr	r7, [sp, #24]
 800538e:	434f      	muls	r7, r1
 8005390:	9706      	str	r7, [sp, #24]
 8005392:	3301      	adds	r3, #1
 8005394:	e7e2      	b.n	800535c <_strtod_l+0x21c>
 8005396:	1c5f      	adds	r7, r3, #1
 8005398:	2f10      	cmp	r7, #16
 800539a:	bfde      	ittt	le
 800539c:	9f05      	ldrle	r7, [sp, #20]
 800539e:	434f      	mulle	r7, r1
 80053a0:	9705      	strle	r7, [sp, #20]
 80053a2:	e7f6      	b.n	8005392 <_strtod_l+0x252>
 80053a4:	2c10      	cmp	r4, #16
 80053a6:	bfdf      	itttt	le
 80053a8:	230a      	movle	r3, #10
 80053aa:	9905      	ldrle	r1, [sp, #20]
 80053ac:	fb03 2301 	mlale	r3, r3, r1, r2
 80053b0:	9305      	strle	r3, [sp, #20]
 80053b2:	e7e0      	b.n	8005376 <_strtod_l+0x236>
 80053b4:	2300      	movs	r3, #0
 80053b6:	9304      	str	r3, [sp, #16]
 80053b8:	2301      	movs	r3, #1
 80053ba:	e77b      	b.n	80052b4 <_strtod_l+0x174>
 80053bc:	2700      	movs	r7, #0
 80053be:	1cb2      	adds	r2, r6, #2
 80053c0:	9219      	str	r2, [sp, #100]	; 0x64
 80053c2:	78b2      	ldrb	r2, [r6, #2]
 80053c4:	e784      	b.n	80052d0 <_strtod_l+0x190>
 80053c6:	bf00      	nop
 80053c8:	08007ed8 	.word	0x08007ed8
 80053cc:	08007d5c 	.word	0x08007d5c
 80053d0:	7ff00000 	.word	0x7ff00000
 80053d4:	2701      	movs	r7, #1
 80053d6:	e7f2      	b.n	80053be <_strtod_l+0x27e>
 80053d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80053da:	1c51      	adds	r1, r2, #1
 80053dc:	9119      	str	r1, [sp, #100]	; 0x64
 80053de:	7852      	ldrb	r2, [r2, #1]
 80053e0:	2a30      	cmp	r2, #48	; 0x30
 80053e2:	d0f9      	beq.n	80053d8 <_strtod_l+0x298>
 80053e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80053e8:	2908      	cmp	r1, #8
 80053ea:	f63f af77 	bhi.w	80052dc <_strtod_l+0x19c>
 80053ee:	f04f 0e0a 	mov.w	lr, #10
 80053f2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80053f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80053f8:	9209      	str	r2, [sp, #36]	; 0x24
 80053fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80053fc:	1c51      	adds	r1, r2, #1
 80053fe:	9119      	str	r1, [sp, #100]	; 0x64
 8005400:	7852      	ldrb	r2, [r2, #1]
 8005402:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005406:	2d09      	cmp	r5, #9
 8005408:	d935      	bls.n	8005476 <_strtod_l+0x336>
 800540a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800540c:	1b49      	subs	r1, r1, r5
 800540e:	2908      	cmp	r1, #8
 8005410:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005414:	dc02      	bgt.n	800541c <_strtod_l+0x2dc>
 8005416:	4565      	cmp	r5, ip
 8005418:	bfa8      	it	ge
 800541a:	4665      	movge	r5, ip
 800541c:	b107      	cbz	r7, 8005420 <_strtod_l+0x2e0>
 800541e:	426d      	negs	r5, r5
 8005420:	2c00      	cmp	r4, #0
 8005422:	d14c      	bne.n	80054be <_strtod_l+0x37e>
 8005424:	9907      	ldr	r1, [sp, #28]
 8005426:	4301      	orrs	r1, r0
 8005428:	f47f aecb 	bne.w	80051c2 <_strtod_l+0x82>
 800542c:	2b00      	cmp	r3, #0
 800542e:	f47f aee4 	bne.w	80051fa <_strtod_l+0xba>
 8005432:	2a69      	cmp	r2, #105	; 0x69
 8005434:	d026      	beq.n	8005484 <_strtod_l+0x344>
 8005436:	dc23      	bgt.n	8005480 <_strtod_l+0x340>
 8005438:	2a49      	cmp	r2, #73	; 0x49
 800543a:	d023      	beq.n	8005484 <_strtod_l+0x344>
 800543c:	2a4e      	cmp	r2, #78	; 0x4e
 800543e:	f47f aedc 	bne.w	80051fa <_strtod_l+0xba>
 8005442:	499d      	ldr	r1, [pc, #628]	; (80056b8 <_strtod_l+0x578>)
 8005444:	a819      	add	r0, sp, #100	; 0x64
 8005446:	f000 ffb1 	bl	80063ac <__match>
 800544a:	2800      	cmp	r0, #0
 800544c:	f43f aed5 	beq.w	80051fa <_strtod_l+0xba>
 8005450:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b28      	cmp	r3, #40	; 0x28
 8005456:	d12c      	bne.n	80054b2 <_strtod_l+0x372>
 8005458:	4998      	ldr	r1, [pc, #608]	; (80056bc <_strtod_l+0x57c>)
 800545a:	aa1c      	add	r2, sp, #112	; 0x70
 800545c:	a819      	add	r0, sp, #100	; 0x64
 800545e:	f000 ffb9 	bl	80063d4 <__hexnan>
 8005462:	2805      	cmp	r0, #5
 8005464:	d125      	bne.n	80054b2 <_strtod_l+0x372>
 8005466:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005468:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800546c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005470:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005474:	e6a5      	b.n	80051c2 <_strtod_l+0x82>
 8005476:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800547a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800547e:	e7bc      	b.n	80053fa <_strtod_l+0x2ba>
 8005480:	2a6e      	cmp	r2, #110	; 0x6e
 8005482:	e7dc      	b.n	800543e <_strtod_l+0x2fe>
 8005484:	498e      	ldr	r1, [pc, #568]	; (80056c0 <_strtod_l+0x580>)
 8005486:	a819      	add	r0, sp, #100	; 0x64
 8005488:	f000 ff90 	bl	80063ac <__match>
 800548c:	2800      	cmp	r0, #0
 800548e:	f43f aeb4 	beq.w	80051fa <_strtod_l+0xba>
 8005492:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005494:	498b      	ldr	r1, [pc, #556]	; (80056c4 <_strtod_l+0x584>)
 8005496:	3b01      	subs	r3, #1
 8005498:	a819      	add	r0, sp, #100	; 0x64
 800549a:	9319      	str	r3, [sp, #100]	; 0x64
 800549c:	f000 ff86 	bl	80063ac <__match>
 80054a0:	b910      	cbnz	r0, 80054a8 <_strtod_l+0x368>
 80054a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80054a4:	3301      	adds	r3, #1
 80054a6:	9319      	str	r3, [sp, #100]	; 0x64
 80054a8:	f04f 0800 	mov.w	r8, #0
 80054ac:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80056c8 <_strtod_l+0x588>
 80054b0:	e687      	b.n	80051c2 <_strtod_l+0x82>
 80054b2:	4886      	ldr	r0, [pc, #536]	; (80056cc <_strtod_l+0x58c>)
 80054b4:	f002 f810 	bl	80074d8 <nan>
 80054b8:	4680      	mov	r8, r0
 80054ba:	4689      	mov	r9, r1
 80054bc:	e681      	b.n	80051c2 <_strtod_l+0x82>
 80054be:	9b04      	ldr	r3, [sp, #16]
 80054c0:	f1bb 0f00 	cmp.w	fp, #0
 80054c4:	bf08      	it	eq
 80054c6:	46a3      	moveq	fp, r4
 80054c8:	1aeb      	subs	r3, r5, r3
 80054ca:	2c10      	cmp	r4, #16
 80054cc:	9806      	ldr	r0, [sp, #24]
 80054ce:	4626      	mov	r6, r4
 80054d0:	9307      	str	r3, [sp, #28]
 80054d2:	bfa8      	it	ge
 80054d4:	2610      	movge	r6, #16
 80054d6:	f7fa ff8f 	bl	80003f8 <__aeabi_ui2d>
 80054da:	2c09      	cmp	r4, #9
 80054dc:	4680      	mov	r8, r0
 80054de:	4689      	mov	r9, r1
 80054e0:	dd13      	ble.n	800550a <_strtod_l+0x3ca>
 80054e2:	4b7b      	ldr	r3, [pc, #492]	; (80056d0 <_strtod_l+0x590>)
 80054e4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80054e8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80054ec:	f7fa fffe 	bl	80004ec <__aeabi_dmul>
 80054f0:	4680      	mov	r8, r0
 80054f2:	9805      	ldr	r0, [sp, #20]
 80054f4:	4689      	mov	r9, r1
 80054f6:	f7fa ff7f 	bl	80003f8 <__aeabi_ui2d>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4640      	mov	r0, r8
 8005500:	4649      	mov	r1, r9
 8005502:	f7fa fe3d 	bl	8000180 <__adddf3>
 8005506:	4680      	mov	r8, r0
 8005508:	4689      	mov	r9, r1
 800550a:	2c0f      	cmp	r4, #15
 800550c:	dc36      	bgt.n	800557c <_strtod_l+0x43c>
 800550e:	9b07      	ldr	r3, [sp, #28]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f43f ae56 	beq.w	80051c2 <_strtod_l+0x82>
 8005516:	dd22      	ble.n	800555e <_strtod_l+0x41e>
 8005518:	2b16      	cmp	r3, #22
 800551a:	dc09      	bgt.n	8005530 <_strtod_l+0x3f0>
 800551c:	496c      	ldr	r1, [pc, #432]	; (80056d0 <_strtod_l+0x590>)
 800551e:	4642      	mov	r2, r8
 8005520:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005524:	464b      	mov	r3, r9
 8005526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800552a:	f7fa ffdf 	bl	80004ec <__aeabi_dmul>
 800552e:	e7c3      	b.n	80054b8 <_strtod_l+0x378>
 8005530:	9a07      	ldr	r2, [sp, #28]
 8005532:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005536:	4293      	cmp	r3, r2
 8005538:	db20      	blt.n	800557c <_strtod_l+0x43c>
 800553a:	4d65      	ldr	r5, [pc, #404]	; (80056d0 <_strtod_l+0x590>)
 800553c:	f1c4 040f 	rsb	r4, r4, #15
 8005540:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005544:	4642      	mov	r2, r8
 8005546:	e9d1 0100 	ldrd	r0, r1, [r1]
 800554a:	464b      	mov	r3, r9
 800554c:	f7fa ffce 	bl	80004ec <__aeabi_dmul>
 8005550:	9b07      	ldr	r3, [sp, #28]
 8005552:	1b1c      	subs	r4, r3, r4
 8005554:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005558:	e9d5 2300 	ldrd	r2, r3, [r5]
 800555c:	e7e5      	b.n	800552a <_strtod_l+0x3ea>
 800555e:	9b07      	ldr	r3, [sp, #28]
 8005560:	3316      	adds	r3, #22
 8005562:	db0b      	blt.n	800557c <_strtod_l+0x43c>
 8005564:	9b04      	ldr	r3, [sp, #16]
 8005566:	4640      	mov	r0, r8
 8005568:	1b5d      	subs	r5, r3, r5
 800556a:	4b59      	ldr	r3, [pc, #356]	; (80056d0 <_strtod_l+0x590>)
 800556c:	4649      	mov	r1, r9
 800556e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005572:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005576:	f7fb f8e3 	bl	8000740 <__aeabi_ddiv>
 800557a:	e79d      	b.n	80054b8 <_strtod_l+0x378>
 800557c:	9b07      	ldr	r3, [sp, #28]
 800557e:	1ba6      	subs	r6, r4, r6
 8005580:	441e      	add	r6, r3
 8005582:	2e00      	cmp	r6, #0
 8005584:	dd74      	ble.n	8005670 <_strtod_l+0x530>
 8005586:	f016 030f 	ands.w	r3, r6, #15
 800558a:	d00a      	beq.n	80055a2 <_strtod_l+0x462>
 800558c:	4950      	ldr	r1, [pc, #320]	; (80056d0 <_strtod_l+0x590>)
 800558e:	4642      	mov	r2, r8
 8005590:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005598:	464b      	mov	r3, r9
 800559a:	f7fa ffa7 	bl	80004ec <__aeabi_dmul>
 800559e:	4680      	mov	r8, r0
 80055a0:	4689      	mov	r9, r1
 80055a2:	f036 060f 	bics.w	r6, r6, #15
 80055a6:	d052      	beq.n	800564e <_strtod_l+0x50e>
 80055a8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80055ac:	dd27      	ble.n	80055fe <_strtod_l+0x4be>
 80055ae:	f04f 0b00 	mov.w	fp, #0
 80055b2:	f8cd b010 	str.w	fp, [sp, #16]
 80055b6:	f8cd b020 	str.w	fp, [sp, #32]
 80055ba:	f8cd b018 	str.w	fp, [sp, #24]
 80055be:	2322      	movs	r3, #34	; 0x22
 80055c0:	f04f 0800 	mov.w	r8, #0
 80055c4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80056c8 <_strtod_l+0x588>
 80055c8:	f8ca 3000 	str.w	r3, [sl]
 80055cc:	9b08      	ldr	r3, [sp, #32]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f43f adf7 	beq.w	80051c2 <_strtod_l+0x82>
 80055d4:	4650      	mov	r0, sl
 80055d6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80055d8:	f001 f804 	bl	80065e4 <_Bfree>
 80055dc:	4650      	mov	r0, sl
 80055de:	9906      	ldr	r1, [sp, #24]
 80055e0:	f001 f800 	bl	80065e4 <_Bfree>
 80055e4:	4650      	mov	r0, sl
 80055e6:	9904      	ldr	r1, [sp, #16]
 80055e8:	f000 fffc 	bl	80065e4 <_Bfree>
 80055ec:	4650      	mov	r0, sl
 80055ee:	9908      	ldr	r1, [sp, #32]
 80055f0:	f000 fff8 	bl	80065e4 <_Bfree>
 80055f4:	4659      	mov	r1, fp
 80055f6:	4650      	mov	r0, sl
 80055f8:	f000 fff4 	bl	80065e4 <_Bfree>
 80055fc:	e5e1      	b.n	80051c2 <_strtod_l+0x82>
 80055fe:	4b35      	ldr	r3, [pc, #212]	; (80056d4 <_strtod_l+0x594>)
 8005600:	4640      	mov	r0, r8
 8005602:	9305      	str	r3, [sp, #20]
 8005604:	2300      	movs	r3, #0
 8005606:	4649      	mov	r1, r9
 8005608:	461f      	mov	r7, r3
 800560a:	1136      	asrs	r6, r6, #4
 800560c:	2e01      	cmp	r6, #1
 800560e:	dc21      	bgt.n	8005654 <_strtod_l+0x514>
 8005610:	b10b      	cbz	r3, 8005616 <_strtod_l+0x4d6>
 8005612:	4680      	mov	r8, r0
 8005614:	4689      	mov	r9, r1
 8005616:	4b2f      	ldr	r3, [pc, #188]	; (80056d4 <_strtod_l+0x594>)
 8005618:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800561c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005620:	4642      	mov	r2, r8
 8005622:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005626:	464b      	mov	r3, r9
 8005628:	f7fa ff60 	bl	80004ec <__aeabi_dmul>
 800562c:	4b26      	ldr	r3, [pc, #152]	; (80056c8 <_strtod_l+0x588>)
 800562e:	460a      	mov	r2, r1
 8005630:	400b      	ands	r3, r1
 8005632:	4929      	ldr	r1, [pc, #164]	; (80056d8 <_strtod_l+0x598>)
 8005634:	4680      	mov	r8, r0
 8005636:	428b      	cmp	r3, r1
 8005638:	d8b9      	bhi.n	80055ae <_strtod_l+0x46e>
 800563a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800563e:	428b      	cmp	r3, r1
 8005640:	bf86      	itte	hi
 8005642:	f04f 38ff 	movhi.w	r8, #4294967295
 8005646:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80056dc <_strtod_l+0x59c>
 800564a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800564e:	2300      	movs	r3, #0
 8005650:	9305      	str	r3, [sp, #20]
 8005652:	e07f      	b.n	8005754 <_strtod_l+0x614>
 8005654:	07f2      	lsls	r2, r6, #31
 8005656:	d505      	bpl.n	8005664 <_strtod_l+0x524>
 8005658:	9b05      	ldr	r3, [sp, #20]
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	f7fa ff45 	bl	80004ec <__aeabi_dmul>
 8005662:	2301      	movs	r3, #1
 8005664:	9a05      	ldr	r2, [sp, #20]
 8005666:	3701      	adds	r7, #1
 8005668:	3208      	adds	r2, #8
 800566a:	1076      	asrs	r6, r6, #1
 800566c:	9205      	str	r2, [sp, #20]
 800566e:	e7cd      	b.n	800560c <_strtod_l+0x4cc>
 8005670:	d0ed      	beq.n	800564e <_strtod_l+0x50e>
 8005672:	4276      	negs	r6, r6
 8005674:	f016 020f 	ands.w	r2, r6, #15
 8005678:	d00a      	beq.n	8005690 <_strtod_l+0x550>
 800567a:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <_strtod_l+0x590>)
 800567c:	4640      	mov	r0, r8
 800567e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005682:	4649      	mov	r1, r9
 8005684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005688:	f7fb f85a 	bl	8000740 <__aeabi_ddiv>
 800568c:	4680      	mov	r8, r0
 800568e:	4689      	mov	r9, r1
 8005690:	1136      	asrs	r6, r6, #4
 8005692:	d0dc      	beq.n	800564e <_strtod_l+0x50e>
 8005694:	2e1f      	cmp	r6, #31
 8005696:	dd23      	ble.n	80056e0 <_strtod_l+0x5a0>
 8005698:	f04f 0b00 	mov.w	fp, #0
 800569c:	f8cd b010 	str.w	fp, [sp, #16]
 80056a0:	f8cd b020 	str.w	fp, [sp, #32]
 80056a4:	f8cd b018 	str.w	fp, [sp, #24]
 80056a8:	2322      	movs	r3, #34	; 0x22
 80056aa:	f04f 0800 	mov.w	r8, #0
 80056ae:	f04f 0900 	mov.w	r9, #0
 80056b2:	f8ca 3000 	str.w	r3, [sl]
 80056b6:	e789      	b.n	80055cc <_strtod_l+0x48c>
 80056b8:	08007d59 	.word	0x08007d59
 80056bc:	08007d70 	.word	0x08007d70
 80056c0:	08007d50 	.word	0x08007d50
 80056c4:	08007d53 	.word	0x08007d53
 80056c8:	7ff00000 	.word	0x7ff00000
 80056cc:	08007e5f 	.word	0x08007e5f
 80056d0:	08007f70 	.word	0x08007f70
 80056d4:	08007f48 	.word	0x08007f48
 80056d8:	7ca00000 	.word	0x7ca00000
 80056dc:	7fefffff 	.word	0x7fefffff
 80056e0:	f016 0310 	ands.w	r3, r6, #16
 80056e4:	bf18      	it	ne
 80056e6:	236a      	movne	r3, #106	; 0x6a
 80056e8:	4640      	mov	r0, r8
 80056ea:	9305      	str	r3, [sp, #20]
 80056ec:	4649      	mov	r1, r9
 80056ee:	2300      	movs	r3, #0
 80056f0:	4fb0      	ldr	r7, [pc, #704]	; (80059b4 <_strtod_l+0x874>)
 80056f2:	07f2      	lsls	r2, r6, #31
 80056f4:	d504      	bpl.n	8005700 <_strtod_l+0x5c0>
 80056f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056fa:	f7fa fef7 	bl	80004ec <__aeabi_dmul>
 80056fe:	2301      	movs	r3, #1
 8005700:	1076      	asrs	r6, r6, #1
 8005702:	f107 0708 	add.w	r7, r7, #8
 8005706:	d1f4      	bne.n	80056f2 <_strtod_l+0x5b2>
 8005708:	b10b      	cbz	r3, 800570e <_strtod_l+0x5ce>
 800570a:	4680      	mov	r8, r0
 800570c:	4689      	mov	r9, r1
 800570e:	9b05      	ldr	r3, [sp, #20]
 8005710:	b1c3      	cbz	r3, 8005744 <_strtod_l+0x604>
 8005712:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005716:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800571a:	2b00      	cmp	r3, #0
 800571c:	4649      	mov	r1, r9
 800571e:	dd11      	ble.n	8005744 <_strtod_l+0x604>
 8005720:	2b1f      	cmp	r3, #31
 8005722:	f340 8127 	ble.w	8005974 <_strtod_l+0x834>
 8005726:	2b34      	cmp	r3, #52	; 0x34
 8005728:	bfd8      	it	le
 800572a:	f04f 33ff 	movle.w	r3, #4294967295
 800572e:	f04f 0800 	mov.w	r8, #0
 8005732:	bfcf      	iteee	gt
 8005734:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005738:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800573c:	fa03 f202 	lslle.w	r2, r3, r2
 8005740:	ea02 0901 	andle.w	r9, r2, r1
 8005744:	2200      	movs	r2, #0
 8005746:	2300      	movs	r3, #0
 8005748:	4640      	mov	r0, r8
 800574a:	4649      	mov	r1, r9
 800574c:	f7fb f936 	bl	80009bc <__aeabi_dcmpeq>
 8005750:	2800      	cmp	r0, #0
 8005752:	d1a1      	bne.n	8005698 <_strtod_l+0x558>
 8005754:	9b06      	ldr	r3, [sp, #24]
 8005756:	465a      	mov	r2, fp
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	4650      	mov	r0, sl
 800575c:	4623      	mov	r3, r4
 800575e:	9908      	ldr	r1, [sp, #32]
 8005760:	f000 ffa8 	bl	80066b4 <__s2b>
 8005764:	9008      	str	r0, [sp, #32]
 8005766:	2800      	cmp	r0, #0
 8005768:	f43f af21 	beq.w	80055ae <_strtod_l+0x46e>
 800576c:	9b04      	ldr	r3, [sp, #16]
 800576e:	f04f 0b00 	mov.w	fp, #0
 8005772:	1b5d      	subs	r5, r3, r5
 8005774:	9b07      	ldr	r3, [sp, #28]
 8005776:	f8cd b010 	str.w	fp, [sp, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	bfb4      	ite	lt
 800577e:	462b      	movlt	r3, r5
 8005780:	2300      	movge	r3, #0
 8005782:	930e      	str	r3, [sp, #56]	; 0x38
 8005784:	9b07      	ldr	r3, [sp, #28]
 8005786:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800578a:	9314      	str	r3, [sp, #80]	; 0x50
 800578c:	9b08      	ldr	r3, [sp, #32]
 800578e:	4650      	mov	r0, sl
 8005790:	6859      	ldr	r1, [r3, #4]
 8005792:	f000 fee7 	bl	8006564 <_Balloc>
 8005796:	9006      	str	r0, [sp, #24]
 8005798:	2800      	cmp	r0, #0
 800579a:	f43f af10 	beq.w	80055be <_strtod_l+0x47e>
 800579e:	9b08      	ldr	r3, [sp, #32]
 80057a0:	300c      	adds	r0, #12
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	f103 010c 	add.w	r1, r3, #12
 80057a8:	3202      	adds	r2, #2
 80057aa:	0092      	lsls	r2, r2, #2
 80057ac:	f000 fec0 	bl	8006530 <memcpy>
 80057b0:	ab1c      	add	r3, sp, #112	; 0x70
 80057b2:	9301      	str	r3, [sp, #4]
 80057b4:	ab1b      	add	r3, sp, #108	; 0x6c
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	4642      	mov	r2, r8
 80057ba:	464b      	mov	r3, r9
 80057bc:	4650      	mov	r0, sl
 80057be:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80057c2:	f001 fab9 	bl	8006d38 <__d2b>
 80057c6:	901a      	str	r0, [sp, #104]	; 0x68
 80057c8:	2800      	cmp	r0, #0
 80057ca:	f43f aef8 	beq.w	80055be <_strtod_l+0x47e>
 80057ce:	2101      	movs	r1, #1
 80057d0:	4650      	mov	r0, sl
 80057d2:	f001 f807 	bl	80067e4 <__i2b>
 80057d6:	4603      	mov	r3, r0
 80057d8:	9004      	str	r0, [sp, #16]
 80057da:	2800      	cmp	r0, #0
 80057dc:	f43f aeef 	beq.w	80055be <_strtod_l+0x47e>
 80057e0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80057e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80057e4:	2d00      	cmp	r5, #0
 80057e6:	bfab      	itete	ge
 80057e8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80057ea:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80057ec:	18ee      	addge	r6, r5, r3
 80057ee:	1b5c      	sublt	r4, r3, r5
 80057f0:	9b05      	ldr	r3, [sp, #20]
 80057f2:	bfa8      	it	ge
 80057f4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80057f6:	eba5 0503 	sub.w	r5, r5, r3
 80057fa:	4415      	add	r5, r2
 80057fc:	4b6e      	ldr	r3, [pc, #440]	; (80059b8 <_strtod_l+0x878>)
 80057fe:	f105 35ff 	add.w	r5, r5, #4294967295
 8005802:	bfb8      	it	lt
 8005804:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005806:	429d      	cmp	r5, r3
 8005808:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800580c:	f280 80c4 	bge.w	8005998 <_strtod_l+0x858>
 8005810:	1b5b      	subs	r3, r3, r5
 8005812:	2b1f      	cmp	r3, #31
 8005814:	f04f 0701 	mov.w	r7, #1
 8005818:	eba2 0203 	sub.w	r2, r2, r3
 800581c:	f300 80b1 	bgt.w	8005982 <_strtod_l+0x842>
 8005820:	2500      	movs	r5, #0
 8005822:	fa07 f303 	lsl.w	r3, r7, r3
 8005826:	930f      	str	r3, [sp, #60]	; 0x3c
 8005828:	18b7      	adds	r7, r6, r2
 800582a:	9b05      	ldr	r3, [sp, #20]
 800582c:	42be      	cmp	r6, r7
 800582e:	4414      	add	r4, r2
 8005830:	441c      	add	r4, r3
 8005832:	4633      	mov	r3, r6
 8005834:	bfa8      	it	ge
 8005836:	463b      	movge	r3, r7
 8005838:	42a3      	cmp	r3, r4
 800583a:	bfa8      	it	ge
 800583c:	4623      	movge	r3, r4
 800583e:	2b00      	cmp	r3, #0
 8005840:	bfc2      	ittt	gt
 8005842:	1aff      	subgt	r7, r7, r3
 8005844:	1ae4      	subgt	r4, r4, r3
 8005846:	1af6      	subgt	r6, r6, r3
 8005848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800584a:	2b00      	cmp	r3, #0
 800584c:	dd17      	ble.n	800587e <_strtod_l+0x73e>
 800584e:	461a      	mov	r2, r3
 8005850:	4650      	mov	r0, sl
 8005852:	9904      	ldr	r1, [sp, #16]
 8005854:	f001 f884 	bl	8006960 <__pow5mult>
 8005858:	9004      	str	r0, [sp, #16]
 800585a:	2800      	cmp	r0, #0
 800585c:	f43f aeaf 	beq.w	80055be <_strtod_l+0x47e>
 8005860:	4601      	mov	r1, r0
 8005862:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005864:	4650      	mov	r0, sl
 8005866:	f000 ffd3 	bl	8006810 <__multiply>
 800586a:	9009      	str	r0, [sp, #36]	; 0x24
 800586c:	2800      	cmp	r0, #0
 800586e:	f43f aea6 	beq.w	80055be <_strtod_l+0x47e>
 8005872:	4650      	mov	r0, sl
 8005874:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005876:	f000 feb5 	bl	80065e4 <_Bfree>
 800587a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800587c:	931a      	str	r3, [sp, #104]	; 0x68
 800587e:	2f00      	cmp	r7, #0
 8005880:	f300 808e 	bgt.w	80059a0 <_strtod_l+0x860>
 8005884:	9b07      	ldr	r3, [sp, #28]
 8005886:	2b00      	cmp	r3, #0
 8005888:	dd08      	ble.n	800589c <_strtod_l+0x75c>
 800588a:	4650      	mov	r0, sl
 800588c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800588e:	9906      	ldr	r1, [sp, #24]
 8005890:	f001 f866 	bl	8006960 <__pow5mult>
 8005894:	9006      	str	r0, [sp, #24]
 8005896:	2800      	cmp	r0, #0
 8005898:	f43f ae91 	beq.w	80055be <_strtod_l+0x47e>
 800589c:	2c00      	cmp	r4, #0
 800589e:	dd08      	ble.n	80058b2 <_strtod_l+0x772>
 80058a0:	4622      	mov	r2, r4
 80058a2:	4650      	mov	r0, sl
 80058a4:	9906      	ldr	r1, [sp, #24]
 80058a6:	f001 f8b5 	bl	8006a14 <__lshift>
 80058aa:	9006      	str	r0, [sp, #24]
 80058ac:	2800      	cmp	r0, #0
 80058ae:	f43f ae86 	beq.w	80055be <_strtod_l+0x47e>
 80058b2:	2e00      	cmp	r6, #0
 80058b4:	dd08      	ble.n	80058c8 <_strtod_l+0x788>
 80058b6:	4632      	mov	r2, r6
 80058b8:	4650      	mov	r0, sl
 80058ba:	9904      	ldr	r1, [sp, #16]
 80058bc:	f001 f8aa 	bl	8006a14 <__lshift>
 80058c0:	9004      	str	r0, [sp, #16]
 80058c2:	2800      	cmp	r0, #0
 80058c4:	f43f ae7b 	beq.w	80055be <_strtod_l+0x47e>
 80058c8:	4650      	mov	r0, sl
 80058ca:	9a06      	ldr	r2, [sp, #24]
 80058cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80058ce:	f001 f92d 	bl	8006b2c <__mdiff>
 80058d2:	4683      	mov	fp, r0
 80058d4:	2800      	cmp	r0, #0
 80058d6:	f43f ae72 	beq.w	80055be <_strtod_l+0x47e>
 80058da:	2400      	movs	r4, #0
 80058dc:	68c3      	ldr	r3, [r0, #12]
 80058de:	9904      	ldr	r1, [sp, #16]
 80058e0:	60c4      	str	r4, [r0, #12]
 80058e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80058e4:	f001 f906 	bl	8006af4 <__mcmp>
 80058e8:	42a0      	cmp	r0, r4
 80058ea:	da6b      	bge.n	80059c4 <_strtod_l+0x884>
 80058ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058ee:	ea53 0308 	orrs.w	r3, r3, r8
 80058f2:	f040 8091 	bne.w	8005a18 <_strtod_l+0x8d8>
 80058f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f040 808c 	bne.w	8005a18 <_strtod_l+0x8d8>
 8005900:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005904:	0d1b      	lsrs	r3, r3, #20
 8005906:	051b      	lsls	r3, r3, #20
 8005908:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800590c:	f240 8084 	bls.w	8005a18 <_strtod_l+0x8d8>
 8005910:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005914:	b91b      	cbnz	r3, 800591e <_strtod_l+0x7de>
 8005916:	f8db 3010 	ldr.w	r3, [fp, #16]
 800591a:	2b01      	cmp	r3, #1
 800591c:	dd7c      	ble.n	8005a18 <_strtod_l+0x8d8>
 800591e:	4659      	mov	r1, fp
 8005920:	2201      	movs	r2, #1
 8005922:	4650      	mov	r0, sl
 8005924:	f001 f876 	bl	8006a14 <__lshift>
 8005928:	9904      	ldr	r1, [sp, #16]
 800592a:	4683      	mov	fp, r0
 800592c:	f001 f8e2 	bl	8006af4 <__mcmp>
 8005930:	2800      	cmp	r0, #0
 8005932:	dd71      	ble.n	8005a18 <_strtod_l+0x8d8>
 8005934:	9905      	ldr	r1, [sp, #20]
 8005936:	464b      	mov	r3, r9
 8005938:	4a20      	ldr	r2, [pc, #128]	; (80059bc <_strtod_l+0x87c>)
 800593a:	2900      	cmp	r1, #0
 800593c:	f000 808c 	beq.w	8005a58 <_strtod_l+0x918>
 8005940:	ea02 0109 	and.w	r1, r2, r9
 8005944:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005948:	f300 8086 	bgt.w	8005a58 <_strtod_l+0x918>
 800594c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005950:	f77f aeaa 	ble.w	80056a8 <_strtod_l+0x568>
 8005954:	4640      	mov	r0, r8
 8005956:	4649      	mov	r1, r9
 8005958:	4b19      	ldr	r3, [pc, #100]	; (80059c0 <_strtod_l+0x880>)
 800595a:	2200      	movs	r2, #0
 800595c:	f7fa fdc6 	bl	80004ec <__aeabi_dmul>
 8005960:	460b      	mov	r3, r1
 8005962:	4303      	orrs	r3, r0
 8005964:	bf08      	it	eq
 8005966:	2322      	moveq	r3, #34	; 0x22
 8005968:	4680      	mov	r8, r0
 800596a:	4689      	mov	r9, r1
 800596c:	bf08      	it	eq
 800596e:	f8ca 3000 	streq.w	r3, [sl]
 8005972:	e62f      	b.n	80055d4 <_strtod_l+0x494>
 8005974:	f04f 32ff 	mov.w	r2, #4294967295
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	ea03 0808 	and.w	r8, r3, r8
 8005980:	e6e0      	b.n	8005744 <_strtod_l+0x604>
 8005982:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005986:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800598a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800598e:	35e2      	adds	r5, #226	; 0xe2
 8005990:	fa07 f505 	lsl.w	r5, r7, r5
 8005994:	970f      	str	r7, [sp, #60]	; 0x3c
 8005996:	e747      	b.n	8005828 <_strtod_l+0x6e8>
 8005998:	2301      	movs	r3, #1
 800599a:	2500      	movs	r5, #0
 800599c:	930f      	str	r3, [sp, #60]	; 0x3c
 800599e:	e743      	b.n	8005828 <_strtod_l+0x6e8>
 80059a0:	463a      	mov	r2, r7
 80059a2:	4650      	mov	r0, sl
 80059a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80059a6:	f001 f835 	bl	8006a14 <__lshift>
 80059aa:	901a      	str	r0, [sp, #104]	; 0x68
 80059ac:	2800      	cmp	r0, #0
 80059ae:	f47f af69 	bne.w	8005884 <_strtod_l+0x744>
 80059b2:	e604      	b.n	80055be <_strtod_l+0x47e>
 80059b4:	08007d88 	.word	0x08007d88
 80059b8:	fffffc02 	.word	0xfffffc02
 80059bc:	7ff00000 	.word	0x7ff00000
 80059c0:	39500000 	.word	0x39500000
 80059c4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80059c8:	d165      	bne.n	8005a96 <_strtod_l+0x956>
 80059ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059d0:	b35a      	cbz	r2, 8005a2a <_strtod_l+0x8ea>
 80059d2:	4a99      	ldr	r2, [pc, #612]	; (8005c38 <_strtod_l+0xaf8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d12b      	bne.n	8005a30 <_strtod_l+0x8f0>
 80059d8:	9b05      	ldr	r3, [sp, #20]
 80059da:	4641      	mov	r1, r8
 80059dc:	b303      	cbz	r3, 8005a20 <_strtod_l+0x8e0>
 80059de:	464a      	mov	r2, r9
 80059e0:	4b96      	ldr	r3, [pc, #600]	; (8005c3c <_strtod_l+0xafc>)
 80059e2:	4013      	ands	r3, r2
 80059e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80059e8:	f04f 32ff 	mov.w	r2, #4294967295
 80059ec:	d81b      	bhi.n	8005a26 <_strtod_l+0x8e6>
 80059ee:	0d1b      	lsrs	r3, r3, #20
 80059f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	4299      	cmp	r1, r3
 80059fa:	d119      	bne.n	8005a30 <_strtod_l+0x8f0>
 80059fc:	4b90      	ldr	r3, [pc, #576]	; (8005c40 <_strtod_l+0xb00>)
 80059fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d102      	bne.n	8005a0a <_strtod_l+0x8ca>
 8005a04:	3101      	adds	r1, #1
 8005a06:	f43f adda 	beq.w	80055be <_strtod_l+0x47e>
 8005a0a:	f04f 0800 	mov.w	r8, #0
 8005a0e:	4b8b      	ldr	r3, [pc, #556]	; (8005c3c <_strtod_l+0xafc>)
 8005a10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a12:	401a      	ands	r2, r3
 8005a14:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005a18:	9b05      	ldr	r3, [sp, #20]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d19a      	bne.n	8005954 <_strtod_l+0x814>
 8005a1e:	e5d9      	b.n	80055d4 <_strtod_l+0x494>
 8005a20:	f04f 33ff 	mov.w	r3, #4294967295
 8005a24:	e7e8      	b.n	80059f8 <_strtod_l+0x8b8>
 8005a26:	4613      	mov	r3, r2
 8005a28:	e7e6      	b.n	80059f8 <_strtod_l+0x8b8>
 8005a2a:	ea53 0308 	orrs.w	r3, r3, r8
 8005a2e:	d081      	beq.n	8005934 <_strtod_l+0x7f4>
 8005a30:	b1e5      	cbz	r5, 8005a6c <_strtod_l+0x92c>
 8005a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a34:	421d      	tst	r5, r3
 8005a36:	d0ef      	beq.n	8005a18 <_strtod_l+0x8d8>
 8005a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a3a:	4640      	mov	r0, r8
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	9a05      	ldr	r2, [sp, #20]
 8005a40:	b1c3      	cbz	r3, 8005a74 <_strtod_l+0x934>
 8005a42:	f7ff fb5b 	bl	80050fc <sulp>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a4e:	f7fa fb97 	bl	8000180 <__adddf3>
 8005a52:	4680      	mov	r8, r0
 8005a54:	4689      	mov	r9, r1
 8005a56:	e7df      	b.n	8005a18 <_strtod_l+0x8d8>
 8005a58:	4013      	ands	r3, r2
 8005a5a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005a5e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005a62:	f04f 38ff 	mov.w	r8, #4294967295
 8005a66:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005a6a:	e7d5      	b.n	8005a18 <_strtod_l+0x8d8>
 8005a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a6e:	ea13 0f08 	tst.w	r3, r8
 8005a72:	e7e0      	b.n	8005a36 <_strtod_l+0x8f6>
 8005a74:	f7ff fb42 	bl	80050fc <sulp>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a80:	f7fa fb7c 	bl	800017c <__aeabi_dsub>
 8005a84:	2200      	movs	r2, #0
 8005a86:	2300      	movs	r3, #0
 8005a88:	4680      	mov	r8, r0
 8005a8a:	4689      	mov	r9, r1
 8005a8c:	f7fa ff96 	bl	80009bc <__aeabi_dcmpeq>
 8005a90:	2800      	cmp	r0, #0
 8005a92:	d0c1      	beq.n	8005a18 <_strtod_l+0x8d8>
 8005a94:	e608      	b.n	80056a8 <_strtod_l+0x568>
 8005a96:	4658      	mov	r0, fp
 8005a98:	9904      	ldr	r1, [sp, #16]
 8005a9a:	f001 f9a9 	bl	8006df0 <__ratio>
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	460f      	mov	r7, r1
 8005aa8:	f7fa ff9c 	bl	80009e4 <__aeabi_dcmple>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	d070      	beq.n	8005b92 <_strtod_l+0xa52>
 8005ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d042      	beq.n	8005b3c <_strtod_l+0x9fc>
 8005ab6:	2600      	movs	r6, #0
 8005ab8:	4f62      	ldr	r7, [pc, #392]	; (8005c44 <_strtod_l+0xb04>)
 8005aba:	4d62      	ldr	r5, [pc, #392]	; (8005c44 <_strtod_l+0xb04>)
 8005abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005abe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ac2:	0d1b      	lsrs	r3, r3, #20
 8005ac4:	051b      	lsls	r3, r3, #20
 8005ac6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ac8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005aca:	4b5f      	ldr	r3, [pc, #380]	; (8005c48 <_strtod_l+0xb08>)
 8005acc:	429a      	cmp	r2, r3
 8005ace:	f040 80c3 	bne.w	8005c58 <_strtod_l+0xb18>
 8005ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad4:	4640      	mov	r0, r8
 8005ad6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005ada:	4649      	mov	r1, r9
 8005adc:	f001 f8b2 	bl	8006c44 <__ulp>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	f7fa fd00 	bl	80004ec <__aeabi_dmul>
 8005aec:	4642      	mov	r2, r8
 8005aee:	464b      	mov	r3, r9
 8005af0:	f7fa fb46 	bl	8000180 <__adddf3>
 8005af4:	460b      	mov	r3, r1
 8005af6:	4951      	ldr	r1, [pc, #324]	; (8005c3c <_strtod_l+0xafc>)
 8005af8:	4a54      	ldr	r2, [pc, #336]	; (8005c4c <_strtod_l+0xb0c>)
 8005afa:	4019      	ands	r1, r3
 8005afc:	4291      	cmp	r1, r2
 8005afe:	4680      	mov	r8, r0
 8005b00:	d95d      	bls.n	8005bbe <_strtod_l+0xa7e>
 8005b02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b04:	4b4e      	ldr	r3, [pc, #312]	; (8005c40 <_strtod_l+0xb00>)
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d103      	bne.n	8005b12 <_strtod_l+0x9d2>
 8005b0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	f43f ad56 	beq.w	80055be <_strtod_l+0x47e>
 8005b12:	f04f 38ff 	mov.w	r8, #4294967295
 8005b16:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005c40 <_strtod_l+0xb00>
 8005b1a:	4650      	mov	r0, sl
 8005b1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005b1e:	f000 fd61 	bl	80065e4 <_Bfree>
 8005b22:	4650      	mov	r0, sl
 8005b24:	9906      	ldr	r1, [sp, #24]
 8005b26:	f000 fd5d 	bl	80065e4 <_Bfree>
 8005b2a:	4650      	mov	r0, sl
 8005b2c:	9904      	ldr	r1, [sp, #16]
 8005b2e:	f000 fd59 	bl	80065e4 <_Bfree>
 8005b32:	4659      	mov	r1, fp
 8005b34:	4650      	mov	r0, sl
 8005b36:	f000 fd55 	bl	80065e4 <_Bfree>
 8005b3a:	e627      	b.n	800578c <_strtod_l+0x64c>
 8005b3c:	f1b8 0f00 	cmp.w	r8, #0
 8005b40:	d119      	bne.n	8005b76 <_strtod_l+0xa36>
 8005b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b48:	b9e3      	cbnz	r3, 8005b84 <_strtod_l+0xa44>
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	4639      	mov	r1, r7
 8005b50:	4b3c      	ldr	r3, [pc, #240]	; (8005c44 <_strtod_l+0xb04>)
 8005b52:	f7fa ff3d 	bl	80009d0 <__aeabi_dcmplt>
 8005b56:	b9c8      	cbnz	r0, 8005b8c <_strtod_l+0xa4c>
 8005b58:	2200      	movs	r2, #0
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	4b3c      	ldr	r3, [pc, #240]	; (8005c50 <_strtod_l+0xb10>)
 8005b60:	f7fa fcc4 	bl	80004ec <__aeabi_dmul>
 8005b64:	4604      	mov	r4, r0
 8005b66:	460d      	mov	r5, r1
 8005b68:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005b6c:	9416      	str	r4, [sp, #88]	; 0x58
 8005b6e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005b70:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005b74:	e7a2      	b.n	8005abc <_strtod_l+0x97c>
 8005b76:	f1b8 0f01 	cmp.w	r8, #1
 8005b7a:	d103      	bne.n	8005b84 <_strtod_l+0xa44>
 8005b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f43f ad92 	beq.w	80056a8 <_strtod_l+0x568>
 8005b84:	2600      	movs	r6, #0
 8005b86:	2400      	movs	r4, #0
 8005b88:	4f32      	ldr	r7, [pc, #200]	; (8005c54 <_strtod_l+0xb14>)
 8005b8a:	e796      	b.n	8005aba <_strtod_l+0x97a>
 8005b8c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005b8e:	4d30      	ldr	r5, [pc, #192]	; (8005c50 <_strtod_l+0xb10>)
 8005b90:	e7ea      	b.n	8005b68 <_strtod_l+0xa28>
 8005b92:	4b2f      	ldr	r3, [pc, #188]	; (8005c50 <_strtod_l+0xb10>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	4630      	mov	r0, r6
 8005b98:	4639      	mov	r1, r7
 8005b9a:	f7fa fca7 	bl	80004ec <__aeabi_dmul>
 8005b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	460d      	mov	r5, r1
 8005ba4:	b933      	cbnz	r3, 8005bb4 <_strtod_l+0xa74>
 8005ba6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005baa:	9010      	str	r0, [sp, #64]	; 0x40
 8005bac:	9311      	str	r3, [sp, #68]	; 0x44
 8005bae:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005bb2:	e783      	b.n	8005abc <_strtod_l+0x97c>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005bbc:	e7f7      	b.n	8005bae <_strtod_l+0xa6e>
 8005bbe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005bc2:	9b05      	ldr	r3, [sp, #20]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1a8      	bne.n	8005b1a <_strtod_l+0x9da>
 8005bc8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005bcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bce:	0d1b      	lsrs	r3, r3, #20
 8005bd0:	051b      	lsls	r3, r3, #20
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d1a1      	bne.n	8005b1a <_strtod_l+0x9da>
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	4629      	mov	r1, r5
 8005bda:	f7fb fa85 	bl	80010e8 <__aeabi_d2lz>
 8005bde:	f7fa fc57 	bl	8000490 <__aeabi_l2d>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4620      	mov	r0, r4
 8005be8:	4629      	mov	r1, r5
 8005bea:	f7fa fac7 	bl	800017c <__aeabi_dsub>
 8005bee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005bf4:	ea43 0308 	orr.w	r3, r3, r8
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	460d      	mov	r5, r1
 8005bfe:	d066      	beq.n	8005cce <_strtod_l+0xb8e>
 8005c00:	a309      	add	r3, pc, #36	; (adr r3, 8005c28 <_strtod_l+0xae8>)
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	f7fa fee3 	bl	80009d0 <__aeabi_dcmplt>
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	f47f ace2 	bne.w	80055d4 <_strtod_l+0x494>
 8005c10:	a307      	add	r3, pc, #28	; (adr r3, 8005c30 <_strtod_l+0xaf0>)
 8005c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c16:	4620      	mov	r0, r4
 8005c18:	4629      	mov	r1, r5
 8005c1a:	f7fa fef7 	bl	8000a0c <__aeabi_dcmpgt>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	f43f af7b 	beq.w	8005b1a <_strtod_l+0x9da>
 8005c24:	e4d6      	b.n	80055d4 <_strtod_l+0x494>
 8005c26:	bf00      	nop
 8005c28:	94a03595 	.word	0x94a03595
 8005c2c:	3fdfffff 	.word	0x3fdfffff
 8005c30:	35afe535 	.word	0x35afe535
 8005c34:	3fe00000 	.word	0x3fe00000
 8005c38:	000fffff 	.word	0x000fffff
 8005c3c:	7ff00000 	.word	0x7ff00000
 8005c40:	7fefffff 	.word	0x7fefffff
 8005c44:	3ff00000 	.word	0x3ff00000
 8005c48:	7fe00000 	.word	0x7fe00000
 8005c4c:	7c9fffff 	.word	0x7c9fffff
 8005c50:	3fe00000 	.word	0x3fe00000
 8005c54:	bff00000 	.word	0xbff00000
 8005c58:	9b05      	ldr	r3, [sp, #20]
 8005c5a:	b313      	cbz	r3, 8005ca2 <_strtod_l+0xb62>
 8005c5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005c62:	d81e      	bhi.n	8005ca2 <_strtod_l+0xb62>
 8005c64:	a326      	add	r3, pc, #152	; (adr r3, 8005d00 <_strtod_l+0xbc0>)
 8005c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	f7fa feb9 	bl	80009e4 <__aeabi_dcmple>
 8005c72:	b190      	cbz	r0, 8005c9a <_strtod_l+0xb5a>
 8005c74:	4629      	mov	r1, r5
 8005c76:	4620      	mov	r0, r4
 8005c78:	f7fa fed2 	bl	8000a20 <__aeabi_d2uiz>
 8005c7c:	2801      	cmp	r0, #1
 8005c7e:	bf38      	it	cc
 8005c80:	2001      	movcc	r0, #1
 8005c82:	f7fa fbb9 	bl	80003f8 <__aeabi_ui2d>
 8005c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c88:	4604      	mov	r4, r0
 8005c8a:	460d      	mov	r5, r1
 8005c8c:	b9d3      	cbnz	r3, 8005cc4 <_strtod_l+0xb84>
 8005c8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c92:	9012      	str	r0, [sp, #72]	; 0x48
 8005c94:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c96:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005c9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c9c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005ca0:	1a9f      	subs	r7, r3, r2
 8005ca2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ca6:	f000 ffcd 	bl	8006c44 <__ulp>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	4630      	mov	r0, r6
 8005cb0:	4639      	mov	r1, r7
 8005cb2:	f7fa fc1b 	bl	80004ec <__aeabi_dmul>
 8005cb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005cba:	f7fa fa61 	bl	8000180 <__adddf3>
 8005cbe:	4680      	mov	r8, r0
 8005cc0:	4689      	mov	r9, r1
 8005cc2:	e77e      	b.n	8005bc2 <_strtod_l+0xa82>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005ccc:	e7e3      	b.n	8005c96 <_strtod_l+0xb56>
 8005cce:	a30e      	add	r3, pc, #56	; (adr r3, 8005d08 <_strtod_l+0xbc8>)
 8005cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd4:	f7fa fe7c 	bl	80009d0 <__aeabi_dcmplt>
 8005cd8:	e7a1      	b.n	8005c1e <_strtod_l+0xade>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	930a      	str	r3, [sp, #40]	; 0x28
 8005cde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ce0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	f7ff ba71 	b.w	80051ca <_strtod_l+0x8a>
 8005ce8:	2a65      	cmp	r2, #101	; 0x65
 8005cea:	f43f ab63 	beq.w	80053b4 <_strtod_l+0x274>
 8005cee:	2a45      	cmp	r2, #69	; 0x45
 8005cf0:	f43f ab60 	beq.w	80053b4 <_strtod_l+0x274>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f7ff bb95 	b.w	8005424 <_strtod_l+0x2e4>
 8005cfa:	bf00      	nop
 8005cfc:	f3af 8000 	nop.w
 8005d00:	ffc00000 	.word	0xffc00000
 8005d04:	41dfffff 	.word	0x41dfffff
 8005d08:	94a03595 	.word	0x94a03595
 8005d0c:	3fcfffff 	.word	0x3fcfffff

08005d10 <strtod>:
 8005d10:	460a      	mov	r2, r1
 8005d12:	4601      	mov	r1, r0
 8005d14:	4802      	ldr	r0, [pc, #8]	; (8005d20 <strtod+0x10>)
 8005d16:	4b03      	ldr	r3, [pc, #12]	; (8005d24 <strtod+0x14>)
 8005d18:	6800      	ldr	r0, [r0, #0]
 8005d1a:	f7ff ba11 	b.w	8005140 <_strtod_l>
 8005d1e:	bf00      	nop
 8005d20:	20000024 	.word	0x20000024
 8005d24:	2000008c 	.word	0x2000008c

08005d28 <strtok>:
 8005d28:	4b16      	ldr	r3, [pc, #88]	; (8005d84 <strtok+0x5c>)
 8005d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d2e:	681f      	ldr	r7, [r3, #0]
 8005d30:	4605      	mov	r5, r0
 8005d32:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005d34:	460e      	mov	r6, r1
 8005d36:	b9ec      	cbnz	r4, 8005d74 <strtok+0x4c>
 8005d38:	2050      	movs	r0, #80	; 0x50
 8005d3a:	f7ff f8e3 	bl	8004f04 <malloc>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	65b8      	str	r0, [r7, #88]	; 0x58
 8005d42:	b920      	cbnz	r0, 8005d4e <strtok+0x26>
 8005d44:	2157      	movs	r1, #87	; 0x57
 8005d46:	4b10      	ldr	r3, [pc, #64]	; (8005d88 <strtok+0x60>)
 8005d48:	4810      	ldr	r0, [pc, #64]	; (8005d8c <strtok+0x64>)
 8005d4a:	f000 f849 	bl	8005de0 <__assert_func>
 8005d4e:	e9c0 4400 	strd	r4, r4, [r0]
 8005d52:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005d56:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005d5a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005d5e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005d62:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005d66:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005d6a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005d6e:	6184      	str	r4, [r0, #24]
 8005d70:	7704      	strb	r4, [r0, #28]
 8005d72:	6244      	str	r4, [r0, #36]	; 0x24
 8005d74:	4631      	mov	r1, r6
 8005d76:	4628      	mov	r0, r5
 8005d78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d80:	f000 b806 	b.w	8005d90 <__strtok_r>
 8005d84:	20000024 	.word	0x20000024
 8005d88:	08007db0 	.word	0x08007db0
 8005d8c:	08007dc7 	.word	0x08007dc7

08005d90 <__strtok_r>:
 8005d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d92:	b908      	cbnz	r0, 8005d98 <__strtok_r+0x8>
 8005d94:	6810      	ldr	r0, [r2, #0]
 8005d96:	b188      	cbz	r0, 8005dbc <__strtok_r+0x2c>
 8005d98:	4604      	mov	r4, r0
 8005d9a:	460f      	mov	r7, r1
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005da2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005da6:	b91e      	cbnz	r6, 8005db0 <__strtok_r+0x20>
 8005da8:	b965      	cbnz	r5, 8005dc4 <__strtok_r+0x34>
 8005daa:	4628      	mov	r0, r5
 8005dac:	6015      	str	r5, [r2, #0]
 8005dae:	e005      	b.n	8005dbc <__strtok_r+0x2c>
 8005db0:	42b5      	cmp	r5, r6
 8005db2:	d1f6      	bne.n	8005da2 <__strtok_r+0x12>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1f0      	bne.n	8005d9a <__strtok_r+0xa>
 8005db8:	6014      	str	r4, [r2, #0]
 8005dba:	7003      	strb	r3, [r0, #0]
 8005dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dbe:	461c      	mov	r4, r3
 8005dc0:	e00c      	b.n	8005ddc <__strtok_r+0x4c>
 8005dc2:	b915      	cbnz	r5, 8005dca <__strtok_r+0x3a>
 8005dc4:	460e      	mov	r6, r1
 8005dc6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005dca:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005dce:	42ab      	cmp	r3, r5
 8005dd0:	d1f7      	bne.n	8005dc2 <__strtok_r+0x32>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0f3      	beq.n	8005dbe <__strtok_r+0x2e>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005ddc:	6014      	str	r4, [r2, #0]
 8005dde:	e7ed      	b.n	8005dbc <__strtok_r+0x2c>

08005de0 <__assert_func>:
 8005de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005de2:	4614      	mov	r4, r2
 8005de4:	461a      	mov	r2, r3
 8005de6:	4b09      	ldr	r3, [pc, #36]	; (8005e0c <__assert_func+0x2c>)
 8005de8:	4605      	mov	r5, r0
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68d8      	ldr	r0, [r3, #12]
 8005dee:	b14c      	cbz	r4, 8005e04 <__assert_func+0x24>
 8005df0:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <__assert_func+0x30>)
 8005df2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005df6:	9100      	str	r1, [sp, #0]
 8005df8:	462b      	mov	r3, r5
 8005dfa:	4906      	ldr	r1, [pc, #24]	; (8005e14 <__assert_func+0x34>)
 8005dfc:	f000 f80e 	bl	8005e1c <fiprintf>
 8005e00:	f001 fc52 	bl	80076a8 <abort>
 8005e04:	4b04      	ldr	r3, [pc, #16]	; (8005e18 <__assert_func+0x38>)
 8005e06:	461c      	mov	r4, r3
 8005e08:	e7f3      	b.n	8005df2 <__assert_func+0x12>
 8005e0a:	bf00      	nop
 8005e0c:	20000024 	.word	0x20000024
 8005e10:	08007e24 	.word	0x08007e24
 8005e14:	08007e31 	.word	0x08007e31
 8005e18:	08007e5f 	.word	0x08007e5f

08005e1c <fiprintf>:
 8005e1c:	b40e      	push	{r1, r2, r3}
 8005e1e:	b503      	push	{r0, r1, lr}
 8005e20:	4601      	mov	r1, r0
 8005e22:	ab03      	add	r3, sp, #12
 8005e24:	4805      	ldr	r0, [pc, #20]	; (8005e3c <fiprintf+0x20>)
 8005e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e2a:	6800      	ldr	r0, [r0, #0]
 8005e2c:	9301      	str	r3, [sp, #4]
 8005e2e:	f001 f88d 	bl	8006f4c <_vfiprintf_r>
 8005e32:	b002      	add	sp, #8
 8005e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e38:	b003      	add	sp, #12
 8005e3a:	4770      	bx	lr
 8005e3c:	20000024 	.word	0x20000024

08005e40 <rshift>:
 8005e40:	6903      	ldr	r3, [r0, #16]
 8005e42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005e4a:	f100 0414 	add.w	r4, r0, #20
 8005e4e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005e52:	dd46      	ble.n	8005ee2 <rshift+0xa2>
 8005e54:	f011 011f 	ands.w	r1, r1, #31
 8005e58:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005e5c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005e60:	d10c      	bne.n	8005e7c <rshift+0x3c>
 8005e62:	4629      	mov	r1, r5
 8005e64:	f100 0710 	add.w	r7, r0, #16
 8005e68:	42b1      	cmp	r1, r6
 8005e6a:	d335      	bcc.n	8005ed8 <rshift+0x98>
 8005e6c:	1a9b      	subs	r3, r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	1eea      	subs	r2, r5, #3
 8005e72:	4296      	cmp	r6, r2
 8005e74:	bf38      	it	cc
 8005e76:	2300      	movcc	r3, #0
 8005e78:	4423      	add	r3, r4
 8005e7a:	e015      	b.n	8005ea8 <rshift+0x68>
 8005e7c:	46a1      	mov	r9, r4
 8005e7e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005e82:	f1c1 0820 	rsb	r8, r1, #32
 8005e86:	40cf      	lsrs	r7, r1
 8005e88:	f105 0e04 	add.w	lr, r5, #4
 8005e8c:	4576      	cmp	r6, lr
 8005e8e:	46f4      	mov	ip, lr
 8005e90:	d816      	bhi.n	8005ec0 <rshift+0x80>
 8005e92:	1a9a      	subs	r2, r3, r2
 8005e94:	0092      	lsls	r2, r2, #2
 8005e96:	3a04      	subs	r2, #4
 8005e98:	3501      	adds	r5, #1
 8005e9a:	42ae      	cmp	r6, r5
 8005e9c:	bf38      	it	cc
 8005e9e:	2200      	movcc	r2, #0
 8005ea0:	18a3      	adds	r3, r4, r2
 8005ea2:	50a7      	str	r7, [r4, r2]
 8005ea4:	b107      	cbz	r7, 8005ea8 <rshift+0x68>
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	42a3      	cmp	r3, r4
 8005eaa:	eba3 0204 	sub.w	r2, r3, r4
 8005eae:	bf08      	it	eq
 8005eb0:	2300      	moveq	r3, #0
 8005eb2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005eb6:	6102      	str	r2, [r0, #16]
 8005eb8:	bf08      	it	eq
 8005eba:	6143      	streq	r3, [r0, #20]
 8005ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ec0:	f8dc c000 	ldr.w	ip, [ip]
 8005ec4:	fa0c fc08 	lsl.w	ip, ip, r8
 8005ec8:	ea4c 0707 	orr.w	r7, ip, r7
 8005ecc:	f849 7b04 	str.w	r7, [r9], #4
 8005ed0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005ed4:	40cf      	lsrs	r7, r1
 8005ed6:	e7d9      	b.n	8005e8c <rshift+0x4c>
 8005ed8:	f851 cb04 	ldr.w	ip, [r1], #4
 8005edc:	f847 cf04 	str.w	ip, [r7, #4]!
 8005ee0:	e7c2      	b.n	8005e68 <rshift+0x28>
 8005ee2:	4623      	mov	r3, r4
 8005ee4:	e7e0      	b.n	8005ea8 <rshift+0x68>

08005ee6 <__hexdig_fun>:
 8005ee6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005eea:	2b09      	cmp	r3, #9
 8005eec:	d802      	bhi.n	8005ef4 <__hexdig_fun+0xe>
 8005eee:	3820      	subs	r0, #32
 8005ef0:	b2c0      	uxtb	r0, r0
 8005ef2:	4770      	bx	lr
 8005ef4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005ef8:	2b05      	cmp	r3, #5
 8005efa:	d801      	bhi.n	8005f00 <__hexdig_fun+0x1a>
 8005efc:	3847      	subs	r0, #71	; 0x47
 8005efe:	e7f7      	b.n	8005ef0 <__hexdig_fun+0xa>
 8005f00:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005f04:	2b05      	cmp	r3, #5
 8005f06:	d801      	bhi.n	8005f0c <__hexdig_fun+0x26>
 8005f08:	3827      	subs	r0, #39	; 0x27
 8005f0a:	e7f1      	b.n	8005ef0 <__hexdig_fun+0xa>
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	4770      	bx	lr

08005f10 <__gethex>:
 8005f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	b08b      	sub	sp, #44	; 0x2c
 8005f16:	9305      	str	r3, [sp, #20]
 8005f18:	4bb2      	ldr	r3, [pc, #712]	; (80061e4 <__gethex+0x2d4>)
 8005f1a:	9002      	str	r0, [sp, #8]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	468b      	mov	fp, r1
 8005f20:	4618      	mov	r0, r3
 8005f22:	4690      	mov	r8, r2
 8005f24:	9303      	str	r3, [sp, #12]
 8005f26:	f7fa f91d 	bl	8000164 <strlen>
 8005f2a:	4682      	mov	sl, r0
 8005f2c:	9b03      	ldr	r3, [sp, #12]
 8005f2e:	f8db 2000 	ldr.w	r2, [fp]
 8005f32:	4403      	add	r3, r0
 8005f34:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005f38:	9306      	str	r3, [sp, #24]
 8005f3a:	1c93      	adds	r3, r2, #2
 8005f3c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005f40:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005f44:	32fe      	adds	r2, #254	; 0xfe
 8005f46:	18d1      	adds	r1, r2, r3
 8005f48:	461f      	mov	r7, r3
 8005f4a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005f4e:	9101      	str	r1, [sp, #4]
 8005f50:	2830      	cmp	r0, #48	; 0x30
 8005f52:	d0f8      	beq.n	8005f46 <__gethex+0x36>
 8005f54:	f7ff ffc7 	bl	8005ee6 <__hexdig_fun>
 8005f58:	4604      	mov	r4, r0
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d13a      	bne.n	8005fd4 <__gethex+0xc4>
 8005f5e:	4652      	mov	r2, sl
 8005f60:	4638      	mov	r0, r7
 8005f62:	9903      	ldr	r1, [sp, #12]
 8005f64:	f001 fabe 	bl	80074e4 <strncmp>
 8005f68:	4605      	mov	r5, r0
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d166      	bne.n	800603c <__gethex+0x12c>
 8005f6e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005f72:	eb07 060a 	add.w	r6, r7, sl
 8005f76:	f7ff ffb6 	bl	8005ee6 <__hexdig_fun>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d060      	beq.n	8006040 <__gethex+0x130>
 8005f7e:	4633      	mov	r3, r6
 8005f80:	7818      	ldrb	r0, [r3, #0]
 8005f82:	461f      	mov	r7, r3
 8005f84:	2830      	cmp	r0, #48	; 0x30
 8005f86:	f103 0301 	add.w	r3, r3, #1
 8005f8a:	d0f9      	beq.n	8005f80 <__gethex+0x70>
 8005f8c:	f7ff ffab 	bl	8005ee6 <__hexdig_fun>
 8005f90:	2301      	movs	r3, #1
 8005f92:	fab0 f480 	clz	r4, r0
 8005f96:	4635      	mov	r5, r6
 8005f98:	0964      	lsrs	r4, r4, #5
 8005f9a:	9301      	str	r3, [sp, #4]
 8005f9c:	463a      	mov	r2, r7
 8005f9e:	4616      	mov	r6, r2
 8005fa0:	7830      	ldrb	r0, [r6, #0]
 8005fa2:	3201      	adds	r2, #1
 8005fa4:	f7ff ff9f 	bl	8005ee6 <__hexdig_fun>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	d1f8      	bne.n	8005f9e <__gethex+0x8e>
 8005fac:	4652      	mov	r2, sl
 8005fae:	4630      	mov	r0, r6
 8005fb0:	9903      	ldr	r1, [sp, #12]
 8005fb2:	f001 fa97 	bl	80074e4 <strncmp>
 8005fb6:	b980      	cbnz	r0, 8005fda <__gethex+0xca>
 8005fb8:	b94d      	cbnz	r5, 8005fce <__gethex+0xbe>
 8005fba:	eb06 050a 	add.w	r5, r6, sl
 8005fbe:	462a      	mov	r2, r5
 8005fc0:	4616      	mov	r6, r2
 8005fc2:	7830      	ldrb	r0, [r6, #0]
 8005fc4:	3201      	adds	r2, #1
 8005fc6:	f7ff ff8e 	bl	8005ee6 <__hexdig_fun>
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	d1f8      	bne.n	8005fc0 <__gethex+0xb0>
 8005fce:	1bad      	subs	r5, r5, r6
 8005fd0:	00ad      	lsls	r5, r5, #2
 8005fd2:	e004      	b.n	8005fde <__gethex+0xce>
 8005fd4:	2400      	movs	r4, #0
 8005fd6:	4625      	mov	r5, r4
 8005fd8:	e7e0      	b.n	8005f9c <__gethex+0x8c>
 8005fda:	2d00      	cmp	r5, #0
 8005fdc:	d1f7      	bne.n	8005fce <__gethex+0xbe>
 8005fde:	7833      	ldrb	r3, [r6, #0]
 8005fe0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005fe4:	2b50      	cmp	r3, #80	; 0x50
 8005fe6:	d139      	bne.n	800605c <__gethex+0x14c>
 8005fe8:	7873      	ldrb	r3, [r6, #1]
 8005fea:	2b2b      	cmp	r3, #43	; 0x2b
 8005fec:	d02a      	beq.n	8006044 <__gethex+0x134>
 8005fee:	2b2d      	cmp	r3, #45	; 0x2d
 8005ff0:	d02c      	beq.n	800604c <__gethex+0x13c>
 8005ff2:	f04f 0900 	mov.w	r9, #0
 8005ff6:	1c71      	adds	r1, r6, #1
 8005ff8:	7808      	ldrb	r0, [r1, #0]
 8005ffa:	f7ff ff74 	bl	8005ee6 <__hexdig_fun>
 8005ffe:	1e43      	subs	r3, r0, #1
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b18      	cmp	r3, #24
 8006004:	d82a      	bhi.n	800605c <__gethex+0x14c>
 8006006:	f1a0 0210 	sub.w	r2, r0, #16
 800600a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800600e:	f7ff ff6a 	bl	8005ee6 <__hexdig_fun>
 8006012:	1e43      	subs	r3, r0, #1
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b18      	cmp	r3, #24
 8006018:	d91b      	bls.n	8006052 <__gethex+0x142>
 800601a:	f1b9 0f00 	cmp.w	r9, #0
 800601e:	d000      	beq.n	8006022 <__gethex+0x112>
 8006020:	4252      	negs	r2, r2
 8006022:	4415      	add	r5, r2
 8006024:	f8cb 1000 	str.w	r1, [fp]
 8006028:	b1d4      	cbz	r4, 8006060 <__gethex+0x150>
 800602a:	9b01      	ldr	r3, [sp, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	bf14      	ite	ne
 8006030:	2700      	movne	r7, #0
 8006032:	2706      	moveq	r7, #6
 8006034:	4638      	mov	r0, r7
 8006036:	b00b      	add	sp, #44	; 0x2c
 8006038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800603c:	463e      	mov	r6, r7
 800603e:	4625      	mov	r5, r4
 8006040:	2401      	movs	r4, #1
 8006042:	e7cc      	b.n	8005fde <__gethex+0xce>
 8006044:	f04f 0900 	mov.w	r9, #0
 8006048:	1cb1      	adds	r1, r6, #2
 800604a:	e7d5      	b.n	8005ff8 <__gethex+0xe8>
 800604c:	f04f 0901 	mov.w	r9, #1
 8006050:	e7fa      	b.n	8006048 <__gethex+0x138>
 8006052:	230a      	movs	r3, #10
 8006054:	fb03 0202 	mla	r2, r3, r2, r0
 8006058:	3a10      	subs	r2, #16
 800605a:	e7d6      	b.n	800600a <__gethex+0xfa>
 800605c:	4631      	mov	r1, r6
 800605e:	e7e1      	b.n	8006024 <__gethex+0x114>
 8006060:	4621      	mov	r1, r4
 8006062:	1bf3      	subs	r3, r6, r7
 8006064:	3b01      	subs	r3, #1
 8006066:	2b07      	cmp	r3, #7
 8006068:	dc0a      	bgt.n	8006080 <__gethex+0x170>
 800606a:	9802      	ldr	r0, [sp, #8]
 800606c:	f000 fa7a 	bl	8006564 <_Balloc>
 8006070:	4604      	mov	r4, r0
 8006072:	b940      	cbnz	r0, 8006086 <__gethex+0x176>
 8006074:	4602      	mov	r2, r0
 8006076:	21de      	movs	r1, #222	; 0xde
 8006078:	4b5b      	ldr	r3, [pc, #364]	; (80061e8 <__gethex+0x2d8>)
 800607a:	485c      	ldr	r0, [pc, #368]	; (80061ec <__gethex+0x2dc>)
 800607c:	f7ff feb0 	bl	8005de0 <__assert_func>
 8006080:	3101      	adds	r1, #1
 8006082:	105b      	asrs	r3, r3, #1
 8006084:	e7ef      	b.n	8006066 <__gethex+0x156>
 8006086:	f04f 0b00 	mov.w	fp, #0
 800608a:	f100 0914 	add.w	r9, r0, #20
 800608e:	f1ca 0301 	rsb	r3, sl, #1
 8006092:	f8cd 9010 	str.w	r9, [sp, #16]
 8006096:	f8cd b004 	str.w	fp, [sp, #4]
 800609a:	9308      	str	r3, [sp, #32]
 800609c:	42b7      	cmp	r7, r6
 800609e:	d33f      	bcc.n	8006120 <__gethex+0x210>
 80060a0:	9f04      	ldr	r7, [sp, #16]
 80060a2:	9b01      	ldr	r3, [sp, #4]
 80060a4:	f847 3b04 	str.w	r3, [r7], #4
 80060a8:	eba7 0709 	sub.w	r7, r7, r9
 80060ac:	10bf      	asrs	r7, r7, #2
 80060ae:	6127      	str	r7, [r4, #16]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 fb49 	bl	8006748 <__hi0bits>
 80060b6:	017f      	lsls	r7, r7, #5
 80060b8:	f8d8 6000 	ldr.w	r6, [r8]
 80060bc:	1a3f      	subs	r7, r7, r0
 80060be:	42b7      	cmp	r7, r6
 80060c0:	dd62      	ble.n	8006188 <__gethex+0x278>
 80060c2:	1bbf      	subs	r7, r7, r6
 80060c4:	4639      	mov	r1, r7
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 fee3 	bl	8006e92 <__any_on>
 80060cc:	4682      	mov	sl, r0
 80060ce:	b1a8      	cbz	r0, 80060fc <__gethex+0x1ec>
 80060d0:	f04f 0a01 	mov.w	sl, #1
 80060d4:	1e7b      	subs	r3, r7, #1
 80060d6:	1159      	asrs	r1, r3, #5
 80060d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80060dc:	f003 021f 	and.w	r2, r3, #31
 80060e0:	fa0a f202 	lsl.w	r2, sl, r2
 80060e4:	420a      	tst	r2, r1
 80060e6:	d009      	beq.n	80060fc <__gethex+0x1ec>
 80060e8:	4553      	cmp	r3, sl
 80060ea:	dd05      	ble.n	80060f8 <__gethex+0x1e8>
 80060ec:	4620      	mov	r0, r4
 80060ee:	1eb9      	subs	r1, r7, #2
 80060f0:	f000 fecf 	bl	8006e92 <__any_on>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	d144      	bne.n	8006182 <__gethex+0x272>
 80060f8:	f04f 0a02 	mov.w	sl, #2
 80060fc:	4639      	mov	r1, r7
 80060fe:	4620      	mov	r0, r4
 8006100:	f7ff fe9e 	bl	8005e40 <rshift>
 8006104:	443d      	add	r5, r7
 8006106:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800610a:	42ab      	cmp	r3, r5
 800610c:	da4a      	bge.n	80061a4 <__gethex+0x294>
 800610e:	4621      	mov	r1, r4
 8006110:	9802      	ldr	r0, [sp, #8]
 8006112:	f000 fa67 	bl	80065e4 <_Bfree>
 8006116:	2300      	movs	r3, #0
 8006118:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800611a:	27a3      	movs	r7, #163	; 0xa3
 800611c:	6013      	str	r3, [r2, #0]
 800611e:	e789      	b.n	8006034 <__gethex+0x124>
 8006120:	1e73      	subs	r3, r6, #1
 8006122:	9a06      	ldr	r2, [sp, #24]
 8006124:	9307      	str	r3, [sp, #28]
 8006126:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800612a:	4293      	cmp	r3, r2
 800612c:	d019      	beq.n	8006162 <__gethex+0x252>
 800612e:	f1bb 0f20 	cmp.w	fp, #32
 8006132:	d107      	bne.n	8006144 <__gethex+0x234>
 8006134:	9b04      	ldr	r3, [sp, #16]
 8006136:	9a01      	ldr	r2, [sp, #4]
 8006138:	f843 2b04 	str.w	r2, [r3], #4
 800613c:	9304      	str	r3, [sp, #16]
 800613e:	2300      	movs	r3, #0
 8006140:	469b      	mov	fp, r3
 8006142:	9301      	str	r3, [sp, #4]
 8006144:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006148:	f7ff fecd 	bl	8005ee6 <__hexdig_fun>
 800614c:	9b01      	ldr	r3, [sp, #4]
 800614e:	f000 000f 	and.w	r0, r0, #15
 8006152:	fa00 f00b 	lsl.w	r0, r0, fp
 8006156:	4303      	orrs	r3, r0
 8006158:	9301      	str	r3, [sp, #4]
 800615a:	f10b 0b04 	add.w	fp, fp, #4
 800615e:	9b07      	ldr	r3, [sp, #28]
 8006160:	e00d      	b.n	800617e <__gethex+0x26e>
 8006162:	9a08      	ldr	r2, [sp, #32]
 8006164:	1e73      	subs	r3, r6, #1
 8006166:	4413      	add	r3, r2
 8006168:	42bb      	cmp	r3, r7
 800616a:	d3e0      	bcc.n	800612e <__gethex+0x21e>
 800616c:	4618      	mov	r0, r3
 800616e:	4652      	mov	r2, sl
 8006170:	9903      	ldr	r1, [sp, #12]
 8006172:	9309      	str	r3, [sp, #36]	; 0x24
 8006174:	f001 f9b6 	bl	80074e4 <strncmp>
 8006178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800617a:	2800      	cmp	r0, #0
 800617c:	d1d7      	bne.n	800612e <__gethex+0x21e>
 800617e:	461e      	mov	r6, r3
 8006180:	e78c      	b.n	800609c <__gethex+0x18c>
 8006182:	f04f 0a03 	mov.w	sl, #3
 8006186:	e7b9      	b.n	80060fc <__gethex+0x1ec>
 8006188:	da09      	bge.n	800619e <__gethex+0x28e>
 800618a:	1bf7      	subs	r7, r6, r7
 800618c:	4621      	mov	r1, r4
 800618e:	463a      	mov	r2, r7
 8006190:	9802      	ldr	r0, [sp, #8]
 8006192:	f000 fc3f 	bl	8006a14 <__lshift>
 8006196:	4604      	mov	r4, r0
 8006198:	1bed      	subs	r5, r5, r7
 800619a:	f100 0914 	add.w	r9, r0, #20
 800619e:	f04f 0a00 	mov.w	sl, #0
 80061a2:	e7b0      	b.n	8006106 <__gethex+0x1f6>
 80061a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80061a8:	42a8      	cmp	r0, r5
 80061aa:	dd72      	ble.n	8006292 <__gethex+0x382>
 80061ac:	1b45      	subs	r5, r0, r5
 80061ae:	42ae      	cmp	r6, r5
 80061b0:	dc35      	bgt.n	800621e <__gethex+0x30e>
 80061b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d029      	beq.n	800620e <__gethex+0x2fe>
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d02b      	beq.n	8006216 <__gethex+0x306>
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d11c      	bne.n	80061fc <__gethex+0x2ec>
 80061c2:	42ae      	cmp	r6, r5
 80061c4:	d11a      	bne.n	80061fc <__gethex+0x2ec>
 80061c6:	2e01      	cmp	r6, #1
 80061c8:	d112      	bne.n	80061f0 <__gethex+0x2e0>
 80061ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80061ce:	9a05      	ldr	r2, [sp, #20]
 80061d0:	2762      	movs	r7, #98	; 0x62
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	2301      	movs	r3, #1
 80061d6:	6123      	str	r3, [r4, #16]
 80061d8:	f8c9 3000 	str.w	r3, [r9]
 80061dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061de:	601c      	str	r4, [r3, #0]
 80061e0:	e728      	b.n	8006034 <__gethex+0x124>
 80061e2:	bf00      	nop
 80061e4:	08007ed8 	.word	0x08007ed8
 80061e8:	08007e60 	.word	0x08007e60
 80061ec:	08007e71 	.word	0x08007e71
 80061f0:	4620      	mov	r0, r4
 80061f2:	1e71      	subs	r1, r6, #1
 80061f4:	f000 fe4d 	bl	8006e92 <__any_on>
 80061f8:	2800      	cmp	r0, #0
 80061fa:	d1e6      	bne.n	80061ca <__gethex+0x2ba>
 80061fc:	4621      	mov	r1, r4
 80061fe:	9802      	ldr	r0, [sp, #8]
 8006200:	f000 f9f0 	bl	80065e4 <_Bfree>
 8006204:	2300      	movs	r3, #0
 8006206:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006208:	2750      	movs	r7, #80	; 0x50
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	e712      	b.n	8006034 <__gethex+0x124>
 800620e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1f3      	bne.n	80061fc <__gethex+0x2ec>
 8006214:	e7d9      	b.n	80061ca <__gethex+0x2ba>
 8006216:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1d6      	bne.n	80061ca <__gethex+0x2ba>
 800621c:	e7ee      	b.n	80061fc <__gethex+0x2ec>
 800621e:	1e6f      	subs	r7, r5, #1
 8006220:	f1ba 0f00 	cmp.w	sl, #0
 8006224:	d132      	bne.n	800628c <__gethex+0x37c>
 8006226:	b127      	cbz	r7, 8006232 <__gethex+0x322>
 8006228:	4639      	mov	r1, r7
 800622a:	4620      	mov	r0, r4
 800622c:	f000 fe31 	bl	8006e92 <__any_on>
 8006230:	4682      	mov	sl, r0
 8006232:	2101      	movs	r1, #1
 8006234:	117b      	asrs	r3, r7, #5
 8006236:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800623a:	f007 071f 	and.w	r7, r7, #31
 800623e:	fa01 f707 	lsl.w	r7, r1, r7
 8006242:	421f      	tst	r7, r3
 8006244:	f04f 0702 	mov.w	r7, #2
 8006248:	4629      	mov	r1, r5
 800624a:	4620      	mov	r0, r4
 800624c:	bf18      	it	ne
 800624e:	f04a 0a02 	orrne.w	sl, sl, #2
 8006252:	1b76      	subs	r6, r6, r5
 8006254:	f7ff fdf4 	bl	8005e40 <rshift>
 8006258:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800625c:	f1ba 0f00 	cmp.w	sl, #0
 8006260:	d048      	beq.n	80062f4 <__gethex+0x3e4>
 8006262:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006266:	2b02      	cmp	r3, #2
 8006268:	d015      	beq.n	8006296 <__gethex+0x386>
 800626a:	2b03      	cmp	r3, #3
 800626c:	d017      	beq.n	800629e <__gethex+0x38e>
 800626e:	2b01      	cmp	r3, #1
 8006270:	d109      	bne.n	8006286 <__gethex+0x376>
 8006272:	f01a 0f02 	tst.w	sl, #2
 8006276:	d006      	beq.n	8006286 <__gethex+0x376>
 8006278:	f8d9 0000 	ldr.w	r0, [r9]
 800627c:	ea4a 0a00 	orr.w	sl, sl, r0
 8006280:	f01a 0f01 	tst.w	sl, #1
 8006284:	d10e      	bne.n	80062a4 <__gethex+0x394>
 8006286:	f047 0710 	orr.w	r7, r7, #16
 800628a:	e033      	b.n	80062f4 <__gethex+0x3e4>
 800628c:	f04f 0a01 	mov.w	sl, #1
 8006290:	e7cf      	b.n	8006232 <__gethex+0x322>
 8006292:	2701      	movs	r7, #1
 8006294:	e7e2      	b.n	800625c <__gethex+0x34c>
 8006296:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006298:	f1c3 0301 	rsb	r3, r3, #1
 800629c:	9315      	str	r3, [sp, #84]	; 0x54
 800629e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0f0      	beq.n	8006286 <__gethex+0x376>
 80062a4:	f04f 0c00 	mov.w	ip, #0
 80062a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80062ac:	f104 0314 	add.w	r3, r4, #20
 80062b0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80062b4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80062be:	f1b2 3fff 	cmp.w	r2, #4294967295
 80062c2:	d01c      	beq.n	80062fe <__gethex+0x3ee>
 80062c4:	3201      	adds	r2, #1
 80062c6:	6002      	str	r2, [r0, #0]
 80062c8:	2f02      	cmp	r7, #2
 80062ca:	f104 0314 	add.w	r3, r4, #20
 80062ce:	d13d      	bne.n	800634c <__gethex+0x43c>
 80062d0:	f8d8 2000 	ldr.w	r2, [r8]
 80062d4:	3a01      	subs	r2, #1
 80062d6:	42b2      	cmp	r2, r6
 80062d8:	d10a      	bne.n	80062f0 <__gethex+0x3e0>
 80062da:	2201      	movs	r2, #1
 80062dc:	1171      	asrs	r1, r6, #5
 80062de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80062e2:	f006 061f 	and.w	r6, r6, #31
 80062e6:	fa02 f606 	lsl.w	r6, r2, r6
 80062ea:	421e      	tst	r6, r3
 80062ec:	bf18      	it	ne
 80062ee:	4617      	movne	r7, r2
 80062f0:	f047 0720 	orr.w	r7, r7, #32
 80062f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062f6:	601c      	str	r4, [r3, #0]
 80062f8:	9b05      	ldr	r3, [sp, #20]
 80062fa:	601d      	str	r5, [r3, #0]
 80062fc:	e69a      	b.n	8006034 <__gethex+0x124>
 80062fe:	4299      	cmp	r1, r3
 8006300:	f843 cc04 	str.w	ip, [r3, #-4]
 8006304:	d8d8      	bhi.n	80062b8 <__gethex+0x3a8>
 8006306:	68a3      	ldr	r3, [r4, #8]
 8006308:	459b      	cmp	fp, r3
 800630a:	db17      	blt.n	800633c <__gethex+0x42c>
 800630c:	6861      	ldr	r1, [r4, #4]
 800630e:	9802      	ldr	r0, [sp, #8]
 8006310:	3101      	adds	r1, #1
 8006312:	f000 f927 	bl	8006564 <_Balloc>
 8006316:	4681      	mov	r9, r0
 8006318:	b918      	cbnz	r0, 8006322 <__gethex+0x412>
 800631a:	4602      	mov	r2, r0
 800631c:	2184      	movs	r1, #132	; 0x84
 800631e:	4b19      	ldr	r3, [pc, #100]	; (8006384 <__gethex+0x474>)
 8006320:	e6ab      	b.n	800607a <__gethex+0x16a>
 8006322:	6922      	ldr	r2, [r4, #16]
 8006324:	f104 010c 	add.w	r1, r4, #12
 8006328:	3202      	adds	r2, #2
 800632a:	0092      	lsls	r2, r2, #2
 800632c:	300c      	adds	r0, #12
 800632e:	f000 f8ff 	bl	8006530 <memcpy>
 8006332:	4621      	mov	r1, r4
 8006334:	9802      	ldr	r0, [sp, #8]
 8006336:	f000 f955 	bl	80065e4 <_Bfree>
 800633a:	464c      	mov	r4, r9
 800633c:	6923      	ldr	r3, [r4, #16]
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	6122      	str	r2, [r4, #16]
 8006342:	2201      	movs	r2, #1
 8006344:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006348:	615a      	str	r2, [r3, #20]
 800634a:	e7bd      	b.n	80062c8 <__gethex+0x3b8>
 800634c:	6922      	ldr	r2, [r4, #16]
 800634e:	455a      	cmp	r2, fp
 8006350:	dd0b      	ble.n	800636a <__gethex+0x45a>
 8006352:	2101      	movs	r1, #1
 8006354:	4620      	mov	r0, r4
 8006356:	f7ff fd73 	bl	8005e40 <rshift>
 800635a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800635e:	3501      	adds	r5, #1
 8006360:	42ab      	cmp	r3, r5
 8006362:	f6ff aed4 	blt.w	800610e <__gethex+0x1fe>
 8006366:	2701      	movs	r7, #1
 8006368:	e7c2      	b.n	80062f0 <__gethex+0x3e0>
 800636a:	f016 061f 	ands.w	r6, r6, #31
 800636e:	d0fa      	beq.n	8006366 <__gethex+0x456>
 8006370:	4453      	add	r3, sl
 8006372:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006376:	f000 f9e7 	bl	8006748 <__hi0bits>
 800637a:	f1c6 0620 	rsb	r6, r6, #32
 800637e:	42b0      	cmp	r0, r6
 8006380:	dbe7      	blt.n	8006352 <__gethex+0x442>
 8006382:	e7f0      	b.n	8006366 <__gethex+0x456>
 8006384:	08007e60 	.word	0x08007e60

08006388 <L_shift>:
 8006388:	f1c2 0208 	rsb	r2, r2, #8
 800638c:	0092      	lsls	r2, r2, #2
 800638e:	b570      	push	{r4, r5, r6, lr}
 8006390:	f1c2 0620 	rsb	r6, r2, #32
 8006394:	6843      	ldr	r3, [r0, #4]
 8006396:	6804      	ldr	r4, [r0, #0]
 8006398:	fa03 f506 	lsl.w	r5, r3, r6
 800639c:	432c      	orrs	r4, r5
 800639e:	40d3      	lsrs	r3, r2
 80063a0:	6004      	str	r4, [r0, #0]
 80063a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80063a6:	4288      	cmp	r0, r1
 80063a8:	d3f4      	bcc.n	8006394 <L_shift+0xc>
 80063aa:	bd70      	pop	{r4, r5, r6, pc}

080063ac <__match>:
 80063ac:	b530      	push	{r4, r5, lr}
 80063ae:	6803      	ldr	r3, [r0, #0]
 80063b0:	3301      	adds	r3, #1
 80063b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063b6:	b914      	cbnz	r4, 80063be <__match+0x12>
 80063b8:	6003      	str	r3, [r0, #0]
 80063ba:	2001      	movs	r0, #1
 80063bc:	bd30      	pop	{r4, r5, pc}
 80063be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80063c6:	2d19      	cmp	r5, #25
 80063c8:	bf98      	it	ls
 80063ca:	3220      	addls	r2, #32
 80063cc:	42a2      	cmp	r2, r4
 80063ce:	d0f0      	beq.n	80063b2 <__match+0x6>
 80063d0:	2000      	movs	r0, #0
 80063d2:	e7f3      	b.n	80063bc <__match+0x10>

080063d4 <__hexnan>:
 80063d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d8:	2500      	movs	r5, #0
 80063da:	680b      	ldr	r3, [r1, #0]
 80063dc:	4682      	mov	sl, r0
 80063de:	115e      	asrs	r6, r3, #5
 80063e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80063e4:	f013 031f 	ands.w	r3, r3, #31
 80063e8:	bf18      	it	ne
 80063ea:	3604      	addne	r6, #4
 80063ec:	1f37      	subs	r7, r6, #4
 80063ee:	46b9      	mov	r9, r7
 80063f0:	463c      	mov	r4, r7
 80063f2:	46ab      	mov	fp, r5
 80063f4:	b087      	sub	sp, #28
 80063f6:	4690      	mov	r8, r2
 80063f8:	6802      	ldr	r2, [r0, #0]
 80063fa:	9301      	str	r3, [sp, #4]
 80063fc:	f846 5c04 	str.w	r5, [r6, #-4]
 8006400:	9502      	str	r5, [sp, #8]
 8006402:	7851      	ldrb	r1, [r2, #1]
 8006404:	1c53      	adds	r3, r2, #1
 8006406:	9303      	str	r3, [sp, #12]
 8006408:	b341      	cbz	r1, 800645c <__hexnan+0x88>
 800640a:	4608      	mov	r0, r1
 800640c:	9205      	str	r2, [sp, #20]
 800640e:	9104      	str	r1, [sp, #16]
 8006410:	f7ff fd69 	bl	8005ee6 <__hexdig_fun>
 8006414:	2800      	cmp	r0, #0
 8006416:	d14f      	bne.n	80064b8 <__hexnan+0xe4>
 8006418:	9904      	ldr	r1, [sp, #16]
 800641a:	9a05      	ldr	r2, [sp, #20]
 800641c:	2920      	cmp	r1, #32
 800641e:	d818      	bhi.n	8006452 <__hexnan+0x7e>
 8006420:	9b02      	ldr	r3, [sp, #8]
 8006422:	459b      	cmp	fp, r3
 8006424:	dd13      	ble.n	800644e <__hexnan+0x7a>
 8006426:	454c      	cmp	r4, r9
 8006428:	d206      	bcs.n	8006438 <__hexnan+0x64>
 800642a:	2d07      	cmp	r5, #7
 800642c:	dc04      	bgt.n	8006438 <__hexnan+0x64>
 800642e:	462a      	mov	r2, r5
 8006430:	4649      	mov	r1, r9
 8006432:	4620      	mov	r0, r4
 8006434:	f7ff ffa8 	bl	8006388 <L_shift>
 8006438:	4544      	cmp	r4, r8
 800643a:	d950      	bls.n	80064de <__hexnan+0x10a>
 800643c:	2300      	movs	r3, #0
 800643e:	f1a4 0904 	sub.w	r9, r4, #4
 8006442:	f844 3c04 	str.w	r3, [r4, #-4]
 8006446:	461d      	mov	r5, r3
 8006448:	464c      	mov	r4, r9
 800644a:	f8cd b008 	str.w	fp, [sp, #8]
 800644e:	9a03      	ldr	r2, [sp, #12]
 8006450:	e7d7      	b.n	8006402 <__hexnan+0x2e>
 8006452:	2929      	cmp	r1, #41	; 0x29
 8006454:	d156      	bne.n	8006504 <__hexnan+0x130>
 8006456:	3202      	adds	r2, #2
 8006458:	f8ca 2000 	str.w	r2, [sl]
 800645c:	f1bb 0f00 	cmp.w	fp, #0
 8006460:	d050      	beq.n	8006504 <__hexnan+0x130>
 8006462:	454c      	cmp	r4, r9
 8006464:	d206      	bcs.n	8006474 <__hexnan+0xa0>
 8006466:	2d07      	cmp	r5, #7
 8006468:	dc04      	bgt.n	8006474 <__hexnan+0xa0>
 800646a:	462a      	mov	r2, r5
 800646c:	4649      	mov	r1, r9
 800646e:	4620      	mov	r0, r4
 8006470:	f7ff ff8a 	bl	8006388 <L_shift>
 8006474:	4544      	cmp	r4, r8
 8006476:	d934      	bls.n	80064e2 <__hexnan+0x10e>
 8006478:	4623      	mov	r3, r4
 800647a:	f1a8 0204 	sub.w	r2, r8, #4
 800647e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006482:	429f      	cmp	r7, r3
 8006484:	f842 1f04 	str.w	r1, [r2, #4]!
 8006488:	d2f9      	bcs.n	800647e <__hexnan+0xaa>
 800648a:	1b3b      	subs	r3, r7, r4
 800648c:	f023 0303 	bic.w	r3, r3, #3
 8006490:	3304      	adds	r3, #4
 8006492:	3401      	adds	r4, #1
 8006494:	3e03      	subs	r6, #3
 8006496:	42b4      	cmp	r4, r6
 8006498:	bf88      	it	hi
 800649a:	2304      	movhi	r3, #4
 800649c:	2200      	movs	r2, #0
 800649e:	4443      	add	r3, r8
 80064a0:	f843 2b04 	str.w	r2, [r3], #4
 80064a4:	429f      	cmp	r7, r3
 80064a6:	d2fb      	bcs.n	80064a0 <__hexnan+0xcc>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	b91b      	cbnz	r3, 80064b4 <__hexnan+0xe0>
 80064ac:	4547      	cmp	r7, r8
 80064ae:	d127      	bne.n	8006500 <__hexnan+0x12c>
 80064b0:	2301      	movs	r3, #1
 80064b2:	603b      	str	r3, [r7, #0]
 80064b4:	2005      	movs	r0, #5
 80064b6:	e026      	b.n	8006506 <__hexnan+0x132>
 80064b8:	3501      	adds	r5, #1
 80064ba:	2d08      	cmp	r5, #8
 80064bc:	f10b 0b01 	add.w	fp, fp, #1
 80064c0:	dd06      	ble.n	80064d0 <__hexnan+0xfc>
 80064c2:	4544      	cmp	r4, r8
 80064c4:	d9c3      	bls.n	800644e <__hexnan+0x7a>
 80064c6:	2300      	movs	r3, #0
 80064c8:	2501      	movs	r5, #1
 80064ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80064ce:	3c04      	subs	r4, #4
 80064d0:	6822      	ldr	r2, [r4, #0]
 80064d2:	f000 000f 	and.w	r0, r0, #15
 80064d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80064da:	6022      	str	r2, [r4, #0]
 80064dc:	e7b7      	b.n	800644e <__hexnan+0x7a>
 80064de:	2508      	movs	r5, #8
 80064e0:	e7b5      	b.n	800644e <__hexnan+0x7a>
 80064e2:	9b01      	ldr	r3, [sp, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0df      	beq.n	80064a8 <__hexnan+0xd4>
 80064e8:	f04f 32ff 	mov.w	r2, #4294967295
 80064ec:	f1c3 0320 	rsb	r3, r3, #32
 80064f0:	fa22 f303 	lsr.w	r3, r2, r3
 80064f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80064f8:	401a      	ands	r2, r3
 80064fa:	f846 2c04 	str.w	r2, [r6, #-4]
 80064fe:	e7d3      	b.n	80064a8 <__hexnan+0xd4>
 8006500:	3f04      	subs	r7, #4
 8006502:	e7d1      	b.n	80064a8 <__hexnan+0xd4>
 8006504:	2004      	movs	r0, #4
 8006506:	b007      	add	sp, #28
 8006508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800650c <__ascii_mbtowc>:
 800650c:	b082      	sub	sp, #8
 800650e:	b901      	cbnz	r1, 8006512 <__ascii_mbtowc+0x6>
 8006510:	a901      	add	r1, sp, #4
 8006512:	b142      	cbz	r2, 8006526 <__ascii_mbtowc+0x1a>
 8006514:	b14b      	cbz	r3, 800652a <__ascii_mbtowc+0x1e>
 8006516:	7813      	ldrb	r3, [r2, #0]
 8006518:	600b      	str	r3, [r1, #0]
 800651a:	7812      	ldrb	r2, [r2, #0]
 800651c:	1e10      	subs	r0, r2, #0
 800651e:	bf18      	it	ne
 8006520:	2001      	movne	r0, #1
 8006522:	b002      	add	sp, #8
 8006524:	4770      	bx	lr
 8006526:	4610      	mov	r0, r2
 8006528:	e7fb      	b.n	8006522 <__ascii_mbtowc+0x16>
 800652a:	f06f 0001 	mvn.w	r0, #1
 800652e:	e7f8      	b.n	8006522 <__ascii_mbtowc+0x16>

08006530 <memcpy>:
 8006530:	440a      	add	r2, r1
 8006532:	4291      	cmp	r1, r2
 8006534:	f100 33ff 	add.w	r3, r0, #4294967295
 8006538:	d100      	bne.n	800653c <memcpy+0xc>
 800653a:	4770      	bx	lr
 800653c:	b510      	push	{r4, lr}
 800653e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006542:	4291      	cmp	r1, r2
 8006544:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006548:	d1f9      	bne.n	800653e <memcpy+0xe>
 800654a:	bd10      	pop	{r4, pc}

0800654c <__malloc_lock>:
 800654c:	4801      	ldr	r0, [pc, #4]	; (8006554 <__malloc_lock+0x8>)
 800654e:	f001 ba67 	b.w	8007a20 <__retarget_lock_acquire_recursive>
 8006552:	bf00      	nop
 8006554:	20000684 	.word	0x20000684

08006558 <__malloc_unlock>:
 8006558:	4801      	ldr	r0, [pc, #4]	; (8006560 <__malloc_unlock+0x8>)
 800655a:	f001 ba62 	b.w	8007a22 <__retarget_lock_release_recursive>
 800655e:	bf00      	nop
 8006560:	20000684 	.word	0x20000684

08006564 <_Balloc>:
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006568:	4604      	mov	r4, r0
 800656a:	460d      	mov	r5, r1
 800656c:	b976      	cbnz	r6, 800658c <_Balloc+0x28>
 800656e:	2010      	movs	r0, #16
 8006570:	f7fe fcc8 	bl	8004f04 <malloc>
 8006574:	4602      	mov	r2, r0
 8006576:	6260      	str	r0, [r4, #36]	; 0x24
 8006578:	b920      	cbnz	r0, 8006584 <_Balloc+0x20>
 800657a:	2166      	movs	r1, #102	; 0x66
 800657c:	4b17      	ldr	r3, [pc, #92]	; (80065dc <_Balloc+0x78>)
 800657e:	4818      	ldr	r0, [pc, #96]	; (80065e0 <_Balloc+0x7c>)
 8006580:	f7ff fc2e 	bl	8005de0 <__assert_func>
 8006584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006588:	6006      	str	r6, [r0, #0]
 800658a:	60c6      	str	r6, [r0, #12]
 800658c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800658e:	68f3      	ldr	r3, [r6, #12]
 8006590:	b183      	cbz	r3, 80065b4 <_Balloc+0x50>
 8006592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800659a:	b9b8      	cbnz	r0, 80065cc <_Balloc+0x68>
 800659c:	2101      	movs	r1, #1
 800659e:	fa01 f605 	lsl.w	r6, r1, r5
 80065a2:	1d72      	adds	r2, r6, #5
 80065a4:	4620      	mov	r0, r4
 80065a6:	0092      	lsls	r2, r2, #2
 80065a8:	f000 fc94 	bl	8006ed4 <_calloc_r>
 80065ac:	b160      	cbz	r0, 80065c8 <_Balloc+0x64>
 80065ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065b2:	e00e      	b.n	80065d2 <_Balloc+0x6e>
 80065b4:	2221      	movs	r2, #33	; 0x21
 80065b6:	2104      	movs	r1, #4
 80065b8:	4620      	mov	r0, r4
 80065ba:	f000 fc8b 	bl	8006ed4 <_calloc_r>
 80065be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065c0:	60f0      	str	r0, [r6, #12]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1e4      	bne.n	8006592 <_Balloc+0x2e>
 80065c8:	2000      	movs	r0, #0
 80065ca:	bd70      	pop	{r4, r5, r6, pc}
 80065cc:	6802      	ldr	r2, [r0, #0]
 80065ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065d2:	2300      	movs	r3, #0
 80065d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065d8:	e7f7      	b.n	80065ca <_Balloc+0x66>
 80065da:	bf00      	nop
 80065dc:	08007db0 	.word	0x08007db0
 80065e0:	08007eec 	.word	0x08007eec

080065e4 <_Bfree>:
 80065e4:	b570      	push	{r4, r5, r6, lr}
 80065e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065e8:	4605      	mov	r5, r0
 80065ea:	460c      	mov	r4, r1
 80065ec:	b976      	cbnz	r6, 800660c <_Bfree+0x28>
 80065ee:	2010      	movs	r0, #16
 80065f0:	f7fe fc88 	bl	8004f04 <malloc>
 80065f4:	4602      	mov	r2, r0
 80065f6:	6268      	str	r0, [r5, #36]	; 0x24
 80065f8:	b920      	cbnz	r0, 8006604 <_Bfree+0x20>
 80065fa:	218a      	movs	r1, #138	; 0x8a
 80065fc:	4b08      	ldr	r3, [pc, #32]	; (8006620 <_Bfree+0x3c>)
 80065fe:	4809      	ldr	r0, [pc, #36]	; (8006624 <_Bfree+0x40>)
 8006600:	f7ff fbee 	bl	8005de0 <__assert_func>
 8006604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006608:	6006      	str	r6, [r0, #0]
 800660a:	60c6      	str	r6, [r0, #12]
 800660c:	b13c      	cbz	r4, 800661e <_Bfree+0x3a>
 800660e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006610:	6862      	ldr	r2, [r4, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006618:	6021      	str	r1, [r4, #0]
 800661a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800661e:	bd70      	pop	{r4, r5, r6, pc}
 8006620:	08007db0 	.word	0x08007db0
 8006624:	08007eec 	.word	0x08007eec

08006628 <__multadd>:
 8006628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800662c:	4607      	mov	r7, r0
 800662e:	460c      	mov	r4, r1
 8006630:	461e      	mov	r6, r3
 8006632:	2000      	movs	r0, #0
 8006634:	690d      	ldr	r5, [r1, #16]
 8006636:	f101 0c14 	add.w	ip, r1, #20
 800663a:	f8dc 3000 	ldr.w	r3, [ip]
 800663e:	3001      	adds	r0, #1
 8006640:	b299      	uxth	r1, r3
 8006642:	fb02 6101 	mla	r1, r2, r1, r6
 8006646:	0c1e      	lsrs	r6, r3, #16
 8006648:	0c0b      	lsrs	r3, r1, #16
 800664a:	fb02 3306 	mla	r3, r2, r6, r3
 800664e:	b289      	uxth	r1, r1
 8006650:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006654:	4285      	cmp	r5, r0
 8006656:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800665a:	f84c 1b04 	str.w	r1, [ip], #4
 800665e:	dcec      	bgt.n	800663a <__multadd+0x12>
 8006660:	b30e      	cbz	r6, 80066a6 <__multadd+0x7e>
 8006662:	68a3      	ldr	r3, [r4, #8]
 8006664:	42ab      	cmp	r3, r5
 8006666:	dc19      	bgt.n	800669c <__multadd+0x74>
 8006668:	6861      	ldr	r1, [r4, #4]
 800666a:	4638      	mov	r0, r7
 800666c:	3101      	adds	r1, #1
 800666e:	f7ff ff79 	bl	8006564 <_Balloc>
 8006672:	4680      	mov	r8, r0
 8006674:	b928      	cbnz	r0, 8006682 <__multadd+0x5a>
 8006676:	4602      	mov	r2, r0
 8006678:	21b5      	movs	r1, #181	; 0xb5
 800667a:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <__multadd+0x84>)
 800667c:	480c      	ldr	r0, [pc, #48]	; (80066b0 <__multadd+0x88>)
 800667e:	f7ff fbaf 	bl	8005de0 <__assert_func>
 8006682:	6922      	ldr	r2, [r4, #16]
 8006684:	f104 010c 	add.w	r1, r4, #12
 8006688:	3202      	adds	r2, #2
 800668a:	0092      	lsls	r2, r2, #2
 800668c:	300c      	adds	r0, #12
 800668e:	f7ff ff4f 	bl	8006530 <memcpy>
 8006692:	4621      	mov	r1, r4
 8006694:	4638      	mov	r0, r7
 8006696:	f7ff ffa5 	bl	80065e4 <_Bfree>
 800669a:	4644      	mov	r4, r8
 800669c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066a0:	3501      	adds	r5, #1
 80066a2:	615e      	str	r6, [r3, #20]
 80066a4:	6125      	str	r5, [r4, #16]
 80066a6:	4620      	mov	r0, r4
 80066a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066ac:	08007e60 	.word	0x08007e60
 80066b0:	08007eec 	.word	0x08007eec

080066b4 <__s2b>:
 80066b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066b8:	4615      	mov	r5, r2
 80066ba:	2209      	movs	r2, #9
 80066bc:	461f      	mov	r7, r3
 80066be:	3308      	adds	r3, #8
 80066c0:	460c      	mov	r4, r1
 80066c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80066c6:	4606      	mov	r6, r0
 80066c8:	2201      	movs	r2, #1
 80066ca:	2100      	movs	r1, #0
 80066cc:	429a      	cmp	r2, r3
 80066ce:	db09      	blt.n	80066e4 <__s2b+0x30>
 80066d0:	4630      	mov	r0, r6
 80066d2:	f7ff ff47 	bl	8006564 <_Balloc>
 80066d6:	b940      	cbnz	r0, 80066ea <__s2b+0x36>
 80066d8:	4602      	mov	r2, r0
 80066da:	21ce      	movs	r1, #206	; 0xce
 80066dc:	4b18      	ldr	r3, [pc, #96]	; (8006740 <__s2b+0x8c>)
 80066de:	4819      	ldr	r0, [pc, #100]	; (8006744 <__s2b+0x90>)
 80066e0:	f7ff fb7e 	bl	8005de0 <__assert_func>
 80066e4:	0052      	lsls	r2, r2, #1
 80066e6:	3101      	adds	r1, #1
 80066e8:	e7f0      	b.n	80066cc <__s2b+0x18>
 80066ea:	9b08      	ldr	r3, [sp, #32]
 80066ec:	2d09      	cmp	r5, #9
 80066ee:	6143      	str	r3, [r0, #20]
 80066f0:	f04f 0301 	mov.w	r3, #1
 80066f4:	6103      	str	r3, [r0, #16]
 80066f6:	dd16      	ble.n	8006726 <__s2b+0x72>
 80066f8:	f104 0909 	add.w	r9, r4, #9
 80066fc:	46c8      	mov	r8, r9
 80066fe:	442c      	add	r4, r5
 8006700:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006704:	4601      	mov	r1, r0
 8006706:	220a      	movs	r2, #10
 8006708:	4630      	mov	r0, r6
 800670a:	3b30      	subs	r3, #48	; 0x30
 800670c:	f7ff ff8c 	bl	8006628 <__multadd>
 8006710:	45a0      	cmp	r8, r4
 8006712:	d1f5      	bne.n	8006700 <__s2b+0x4c>
 8006714:	f1a5 0408 	sub.w	r4, r5, #8
 8006718:	444c      	add	r4, r9
 800671a:	1b2d      	subs	r5, r5, r4
 800671c:	1963      	adds	r3, r4, r5
 800671e:	42bb      	cmp	r3, r7
 8006720:	db04      	blt.n	800672c <__s2b+0x78>
 8006722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006726:	2509      	movs	r5, #9
 8006728:	340a      	adds	r4, #10
 800672a:	e7f6      	b.n	800671a <__s2b+0x66>
 800672c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006730:	4601      	mov	r1, r0
 8006732:	220a      	movs	r2, #10
 8006734:	4630      	mov	r0, r6
 8006736:	3b30      	subs	r3, #48	; 0x30
 8006738:	f7ff ff76 	bl	8006628 <__multadd>
 800673c:	e7ee      	b.n	800671c <__s2b+0x68>
 800673e:	bf00      	nop
 8006740:	08007e60 	.word	0x08007e60
 8006744:	08007eec 	.word	0x08007eec

08006748 <__hi0bits>:
 8006748:	0c02      	lsrs	r2, r0, #16
 800674a:	0412      	lsls	r2, r2, #16
 800674c:	4603      	mov	r3, r0
 800674e:	b9ca      	cbnz	r2, 8006784 <__hi0bits+0x3c>
 8006750:	0403      	lsls	r3, r0, #16
 8006752:	2010      	movs	r0, #16
 8006754:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006758:	bf04      	itt	eq
 800675a:	021b      	lsleq	r3, r3, #8
 800675c:	3008      	addeq	r0, #8
 800675e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006762:	bf04      	itt	eq
 8006764:	011b      	lsleq	r3, r3, #4
 8006766:	3004      	addeq	r0, #4
 8006768:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800676c:	bf04      	itt	eq
 800676e:	009b      	lsleq	r3, r3, #2
 8006770:	3002      	addeq	r0, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	db05      	blt.n	8006782 <__hi0bits+0x3a>
 8006776:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800677a:	f100 0001 	add.w	r0, r0, #1
 800677e:	bf08      	it	eq
 8006780:	2020      	moveq	r0, #32
 8006782:	4770      	bx	lr
 8006784:	2000      	movs	r0, #0
 8006786:	e7e5      	b.n	8006754 <__hi0bits+0xc>

08006788 <__lo0bits>:
 8006788:	6803      	ldr	r3, [r0, #0]
 800678a:	4602      	mov	r2, r0
 800678c:	f013 0007 	ands.w	r0, r3, #7
 8006790:	d00b      	beq.n	80067aa <__lo0bits+0x22>
 8006792:	07d9      	lsls	r1, r3, #31
 8006794:	d421      	bmi.n	80067da <__lo0bits+0x52>
 8006796:	0798      	lsls	r0, r3, #30
 8006798:	bf49      	itett	mi
 800679a:	085b      	lsrmi	r3, r3, #1
 800679c:	089b      	lsrpl	r3, r3, #2
 800679e:	2001      	movmi	r0, #1
 80067a0:	6013      	strmi	r3, [r2, #0]
 80067a2:	bf5c      	itt	pl
 80067a4:	2002      	movpl	r0, #2
 80067a6:	6013      	strpl	r3, [r2, #0]
 80067a8:	4770      	bx	lr
 80067aa:	b299      	uxth	r1, r3
 80067ac:	b909      	cbnz	r1, 80067b2 <__lo0bits+0x2a>
 80067ae:	2010      	movs	r0, #16
 80067b0:	0c1b      	lsrs	r3, r3, #16
 80067b2:	b2d9      	uxtb	r1, r3
 80067b4:	b909      	cbnz	r1, 80067ba <__lo0bits+0x32>
 80067b6:	3008      	adds	r0, #8
 80067b8:	0a1b      	lsrs	r3, r3, #8
 80067ba:	0719      	lsls	r1, r3, #28
 80067bc:	bf04      	itt	eq
 80067be:	091b      	lsreq	r3, r3, #4
 80067c0:	3004      	addeq	r0, #4
 80067c2:	0799      	lsls	r1, r3, #30
 80067c4:	bf04      	itt	eq
 80067c6:	089b      	lsreq	r3, r3, #2
 80067c8:	3002      	addeq	r0, #2
 80067ca:	07d9      	lsls	r1, r3, #31
 80067cc:	d403      	bmi.n	80067d6 <__lo0bits+0x4e>
 80067ce:	085b      	lsrs	r3, r3, #1
 80067d0:	f100 0001 	add.w	r0, r0, #1
 80067d4:	d003      	beq.n	80067de <__lo0bits+0x56>
 80067d6:	6013      	str	r3, [r2, #0]
 80067d8:	4770      	bx	lr
 80067da:	2000      	movs	r0, #0
 80067dc:	4770      	bx	lr
 80067de:	2020      	movs	r0, #32
 80067e0:	4770      	bx	lr
	...

080067e4 <__i2b>:
 80067e4:	b510      	push	{r4, lr}
 80067e6:	460c      	mov	r4, r1
 80067e8:	2101      	movs	r1, #1
 80067ea:	f7ff febb 	bl	8006564 <_Balloc>
 80067ee:	4602      	mov	r2, r0
 80067f0:	b928      	cbnz	r0, 80067fe <__i2b+0x1a>
 80067f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80067f6:	4b04      	ldr	r3, [pc, #16]	; (8006808 <__i2b+0x24>)
 80067f8:	4804      	ldr	r0, [pc, #16]	; (800680c <__i2b+0x28>)
 80067fa:	f7ff faf1 	bl	8005de0 <__assert_func>
 80067fe:	2301      	movs	r3, #1
 8006800:	6144      	str	r4, [r0, #20]
 8006802:	6103      	str	r3, [r0, #16]
 8006804:	bd10      	pop	{r4, pc}
 8006806:	bf00      	nop
 8006808:	08007e60 	.word	0x08007e60
 800680c:	08007eec 	.word	0x08007eec

08006810 <__multiply>:
 8006810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006814:	4691      	mov	r9, r2
 8006816:	690a      	ldr	r2, [r1, #16]
 8006818:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800681c:	460c      	mov	r4, r1
 800681e:	429a      	cmp	r2, r3
 8006820:	bfbe      	ittt	lt
 8006822:	460b      	movlt	r3, r1
 8006824:	464c      	movlt	r4, r9
 8006826:	4699      	movlt	r9, r3
 8006828:	6927      	ldr	r7, [r4, #16]
 800682a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800682e:	68a3      	ldr	r3, [r4, #8]
 8006830:	6861      	ldr	r1, [r4, #4]
 8006832:	eb07 060a 	add.w	r6, r7, sl
 8006836:	42b3      	cmp	r3, r6
 8006838:	b085      	sub	sp, #20
 800683a:	bfb8      	it	lt
 800683c:	3101      	addlt	r1, #1
 800683e:	f7ff fe91 	bl	8006564 <_Balloc>
 8006842:	b930      	cbnz	r0, 8006852 <__multiply+0x42>
 8006844:	4602      	mov	r2, r0
 8006846:	f240 115d 	movw	r1, #349	; 0x15d
 800684a:	4b43      	ldr	r3, [pc, #268]	; (8006958 <__multiply+0x148>)
 800684c:	4843      	ldr	r0, [pc, #268]	; (800695c <__multiply+0x14c>)
 800684e:	f7ff fac7 	bl	8005de0 <__assert_func>
 8006852:	f100 0514 	add.w	r5, r0, #20
 8006856:	462b      	mov	r3, r5
 8006858:	2200      	movs	r2, #0
 800685a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800685e:	4543      	cmp	r3, r8
 8006860:	d321      	bcc.n	80068a6 <__multiply+0x96>
 8006862:	f104 0314 	add.w	r3, r4, #20
 8006866:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800686a:	f109 0314 	add.w	r3, r9, #20
 800686e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006872:	9202      	str	r2, [sp, #8]
 8006874:	1b3a      	subs	r2, r7, r4
 8006876:	3a15      	subs	r2, #21
 8006878:	f022 0203 	bic.w	r2, r2, #3
 800687c:	3204      	adds	r2, #4
 800687e:	f104 0115 	add.w	r1, r4, #21
 8006882:	428f      	cmp	r7, r1
 8006884:	bf38      	it	cc
 8006886:	2204      	movcc	r2, #4
 8006888:	9201      	str	r2, [sp, #4]
 800688a:	9a02      	ldr	r2, [sp, #8]
 800688c:	9303      	str	r3, [sp, #12]
 800688e:	429a      	cmp	r2, r3
 8006890:	d80c      	bhi.n	80068ac <__multiply+0x9c>
 8006892:	2e00      	cmp	r6, #0
 8006894:	dd03      	ble.n	800689e <__multiply+0x8e>
 8006896:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800689a:	2b00      	cmp	r3, #0
 800689c:	d059      	beq.n	8006952 <__multiply+0x142>
 800689e:	6106      	str	r6, [r0, #16]
 80068a0:	b005      	add	sp, #20
 80068a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a6:	f843 2b04 	str.w	r2, [r3], #4
 80068aa:	e7d8      	b.n	800685e <__multiply+0x4e>
 80068ac:	f8b3 a000 	ldrh.w	sl, [r3]
 80068b0:	f1ba 0f00 	cmp.w	sl, #0
 80068b4:	d023      	beq.n	80068fe <__multiply+0xee>
 80068b6:	46a9      	mov	r9, r5
 80068b8:	f04f 0c00 	mov.w	ip, #0
 80068bc:	f104 0e14 	add.w	lr, r4, #20
 80068c0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80068c4:	f8d9 1000 	ldr.w	r1, [r9]
 80068c8:	fa1f fb82 	uxth.w	fp, r2
 80068cc:	b289      	uxth	r1, r1
 80068ce:	fb0a 110b 	mla	r1, sl, fp, r1
 80068d2:	4461      	add	r1, ip
 80068d4:	f8d9 c000 	ldr.w	ip, [r9]
 80068d8:	0c12      	lsrs	r2, r2, #16
 80068da:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80068de:	fb0a c202 	mla	r2, sl, r2, ip
 80068e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80068e6:	b289      	uxth	r1, r1
 80068e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80068ec:	4577      	cmp	r7, lr
 80068ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80068f2:	f849 1b04 	str.w	r1, [r9], #4
 80068f6:	d8e3      	bhi.n	80068c0 <__multiply+0xb0>
 80068f8:	9a01      	ldr	r2, [sp, #4]
 80068fa:	f845 c002 	str.w	ip, [r5, r2]
 80068fe:	9a03      	ldr	r2, [sp, #12]
 8006900:	3304      	adds	r3, #4
 8006902:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006906:	f1b9 0f00 	cmp.w	r9, #0
 800690a:	d020      	beq.n	800694e <__multiply+0x13e>
 800690c:	46ae      	mov	lr, r5
 800690e:	f04f 0a00 	mov.w	sl, #0
 8006912:	6829      	ldr	r1, [r5, #0]
 8006914:	f104 0c14 	add.w	ip, r4, #20
 8006918:	f8bc b000 	ldrh.w	fp, [ip]
 800691c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006920:	b289      	uxth	r1, r1
 8006922:	fb09 220b 	mla	r2, r9, fp, r2
 8006926:	4492      	add	sl, r2
 8006928:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800692c:	f84e 1b04 	str.w	r1, [lr], #4
 8006930:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006934:	f8be 1000 	ldrh.w	r1, [lr]
 8006938:	0c12      	lsrs	r2, r2, #16
 800693a:	fb09 1102 	mla	r1, r9, r2, r1
 800693e:	4567      	cmp	r7, ip
 8006940:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006944:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006948:	d8e6      	bhi.n	8006918 <__multiply+0x108>
 800694a:	9a01      	ldr	r2, [sp, #4]
 800694c:	50a9      	str	r1, [r5, r2]
 800694e:	3504      	adds	r5, #4
 8006950:	e79b      	b.n	800688a <__multiply+0x7a>
 8006952:	3e01      	subs	r6, #1
 8006954:	e79d      	b.n	8006892 <__multiply+0x82>
 8006956:	bf00      	nop
 8006958:	08007e60 	.word	0x08007e60
 800695c:	08007eec 	.word	0x08007eec

08006960 <__pow5mult>:
 8006960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006964:	4615      	mov	r5, r2
 8006966:	f012 0203 	ands.w	r2, r2, #3
 800696a:	4606      	mov	r6, r0
 800696c:	460f      	mov	r7, r1
 800696e:	d007      	beq.n	8006980 <__pow5mult+0x20>
 8006970:	4c25      	ldr	r4, [pc, #148]	; (8006a08 <__pow5mult+0xa8>)
 8006972:	3a01      	subs	r2, #1
 8006974:	2300      	movs	r3, #0
 8006976:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800697a:	f7ff fe55 	bl	8006628 <__multadd>
 800697e:	4607      	mov	r7, r0
 8006980:	10ad      	asrs	r5, r5, #2
 8006982:	d03d      	beq.n	8006a00 <__pow5mult+0xa0>
 8006984:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006986:	b97c      	cbnz	r4, 80069a8 <__pow5mult+0x48>
 8006988:	2010      	movs	r0, #16
 800698a:	f7fe fabb 	bl	8004f04 <malloc>
 800698e:	4602      	mov	r2, r0
 8006990:	6270      	str	r0, [r6, #36]	; 0x24
 8006992:	b928      	cbnz	r0, 80069a0 <__pow5mult+0x40>
 8006994:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006998:	4b1c      	ldr	r3, [pc, #112]	; (8006a0c <__pow5mult+0xac>)
 800699a:	481d      	ldr	r0, [pc, #116]	; (8006a10 <__pow5mult+0xb0>)
 800699c:	f7ff fa20 	bl	8005de0 <__assert_func>
 80069a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069a4:	6004      	str	r4, [r0, #0]
 80069a6:	60c4      	str	r4, [r0, #12]
 80069a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80069ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069b0:	b94c      	cbnz	r4, 80069c6 <__pow5mult+0x66>
 80069b2:	f240 2171 	movw	r1, #625	; 0x271
 80069b6:	4630      	mov	r0, r6
 80069b8:	f7ff ff14 	bl	80067e4 <__i2b>
 80069bc:	2300      	movs	r3, #0
 80069be:	4604      	mov	r4, r0
 80069c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80069c4:	6003      	str	r3, [r0, #0]
 80069c6:	f04f 0900 	mov.w	r9, #0
 80069ca:	07eb      	lsls	r3, r5, #31
 80069cc:	d50a      	bpl.n	80069e4 <__pow5mult+0x84>
 80069ce:	4639      	mov	r1, r7
 80069d0:	4622      	mov	r2, r4
 80069d2:	4630      	mov	r0, r6
 80069d4:	f7ff ff1c 	bl	8006810 <__multiply>
 80069d8:	4680      	mov	r8, r0
 80069da:	4639      	mov	r1, r7
 80069dc:	4630      	mov	r0, r6
 80069de:	f7ff fe01 	bl	80065e4 <_Bfree>
 80069e2:	4647      	mov	r7, r8
 80069e4:	106d      	asrs	r5, r5, #1
 80069e6:	d00b      	beq.n	8006a00 <__pow5mult+0xa0>
 80069e8:	6820      	ldr	r0, [r4, #0]
 80069ea:	b938      	cbnz	r0, 80069fc <__pow5mult+0x9c>
 80069ec:	4622      	mov	r2, r4
 80069ee:	4621      	mov	r1, r4
 80069f0:	4630      	mov	r0, r6
 80069f2:	f7ff ff0d 	bl	8006810 <__multiply>
 80069f6:	6020      	str	r0, [r4, #0]
 80069f8:	f8c0 9000 	str.w	r9, [r0]
 80069fc:	4604      	mov	r4, r0
 80069fe:	e7e4      	b.n	80069ca <__pow5mult+0x6a>
 8006a00:	4638      	mov	r0, r7
 8006a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a06:	bf00      	nop
 8006a08:	08008038 	.word	0x08008038
 8006a0c:	08007db0 	.word	0x08007db0
 8006a10:	08007eec 	.word	0x08007eec

08006a14 <__lshift>:
 8006a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a18:	460c      	mov	r4, r1
 8006a1a:	4607      	mov	r7, r0
 8006a1c:	4691      	mov	r9, r2
 8006a1e:	6923      	ldr	r3, [r4, #16]
 8006a20:	6849      	ldr	r1, [r1, #4]
 8006a22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a26:	68a3      	ldr	r3, [r4, #8]
 8006a28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a2c:	f108 0601 	add.w	r6, r8, #1
 8006a30:	42b3      	cmp	r3, r6
 8006a32:	db0b      	blt.n	8006a4c <__lshift+0x38>
 8006a34:	4638      	mov	r0, r7
 8006a36:	f7ff fd95 	bl	8006564 <_Balloc>
 8006a3a:	4605      	mov	r5, r0
 8006a3c:	b948      	cbnz	r0, 8006a52 <__lshift+0x3e>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a44:	4b29      	ldr	r3, [pc, #164]	; (8006aec <__lshift+0xd8>)
 8006a46:	482a      	ldr	r0, [pc, #168]	; (8006af0 <__lshift+0xdc>)
 8006a48:	f7ff f9ca 	bl	8005de0 <__assert_func>
 8006a4c:	3101      	adds	r1, #1
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	e7ee      	b.n	8006a30 <__lshift+0x1c>
 8006a52:	2300      	movs	r3, #0
 8006a54:	f100 0114 	add.w	r1, r0, #20
 8006a58:	f100 0210 	add.w	r2, r0, #16
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	4553      	cmp	r3, sl
 8006a60:	db37      	blt.n	8006ad2 <__lshift+0xbe>
 8006a62:	6920      	ldr	r0, [r4, #16]
 8006a64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a68:	f104 0314 	add.w	r3, r4, #20
 8006a6c:	f019 091f 	ands.w	r9, r9, #31
 8006a70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006a78:	d02f      	beq.n	8006ada <__lshift+0xc6>
 8006a7a:	468a      	mov	sl, r1
 8006a7c:	f04f 0c00 	mov.w	ip, #0
 8006a80:	f1c9 0e20 	rsb	lr, r9, #32
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	fa02 f209 	lsl.w	r2, r2, r9
 8006a8a:	ea42 020c 	orr.w	r2, r2, ip
 8006a8e:	f84a 2b04 	str.w	r2, [sl], #4
 8006a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a96:	4298      	cmp	r0, r3
 8006a98:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006a9c:	d8f2      	bhi.n	8006a84 <__lshift+0x70>
 8006a9e:	1b03      	subs	r3, r0, r4
 8006aa0:	3b15      	subs	r3, #21
 8006aa2:	f023 0303 	bic.w	r3, r3, #3
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	f104 0215 	add.w	r2, r4, #21
 8006aac:	4290      	cmp	r0, r2
 8006aae:	bf38      	it	cc
 8006ab0:	2304      	movcc	r3, #4
 8006ab2:	f841 c003 	str.w	ip, [r1, r3]
 8006ab6:	f1bc 0f00 	cmp.w	ip, #0
 8006aba:	d001      	beq.n	8006ac0 <__lshift+0xac>
 8006abc:	f108 0602 	add.w	r6, r8, #2
 8006ac0:	3e01      	subs	r6, #1
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	612e      	str	r6, [r5, #16]
 8006ac8:	f7ff fd8c 	bl	80065e4 <_Bfree>
 8006acc:	4628      	mov	r0, r5
 8006ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	e7c1      	b.n	8006a5e <__lshift+0x4a>
 8006ada:	3904      	subs	r1, #4
 8006adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ae0:	4298      	cmp	r0, r3
 8006ae2:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ae6:	d8f9      	bhi.n	8006adc <__lshift+0xc8>
 8006ae8:	e7ea      	b.n	8006ac0 <__lshift+0xac>
 8006aea:	bf00      	nop
 8006aec:	08007e60 	.word	0x08007e60
 8006af0:	08007eec 	.word	0x08007eec

08006af4 <__mcmp>:
 8006af4:	4603      	mov	r3, r0
 8006af6:	690a      	ldr	r2, [r1, #16]
 8006af8:	6900      	ldr	r0, [r0, #16]
 8006afa:	b530      	push	{r4, r5, lr}
 8006afc:	1a80      	subs	r0, r0, r2
 8006afe:	d10d      	bne.n	8006b1c <__mcmp+0x28>
 8006b00:	3314      	adds	r3, #20
 8006b02:	3114      	adds	r1, #20
 8006b04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b14:	4295      	cmp	r5, r2
 8006b16:	d002      	beq.n	8006b1e <__mcmp+0x2a>
 8006b18:	d304      	bcc.n	8006b24 <__mcmp+0x30>
 8006b1a:	2001      	movs	r0, #1
 8006b1c:	bd30      	pop	{r4, r5, pc}
 8006b1e:	42a3      	cmp	r3, r4
 8006b20:	d3f4      	bcc.n	8006b0c <__mcmp+0x18>
 8006b22:	e7fb      	b.n	8006b1c <__mcmp+0x28>
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295
 8006b28:	e7f8      	b.n	8006b1c <__mcmp+0x28>
	...

08006b2c <__mdiff>:
 8006b2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b30:	460d      	mov	r5, r1
 8006b32:	4607      	mov	r7, r0
 8006b34:	4611      	mov	r1, r2
 8006b36:	4628      	mov	r0, r5
 8006b38:	4614      	mov	r4, r2
 8006b3a:	f7ff ffdb 	bl	8006af4 <__mcmp>
 8006b3e:	1e06      	subs	r6, r0, #0
 8006b40:	d111      	bne.n	8006b66 <__mdiff+0x3a>
 8006b42:	4631      	mov	r1, r6
 8006b44:	4638      	mov	r0, r7
 8006b46:	f7ff fd0d 	bl	8006564 <_Balloc>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	b928      	cbnz	r0, 8006b5a <__mdiff+0x2e>
 8006b4e:	f240 2132 	movw	r1, #562	; 0x232
 8006b52:	4b3a      	ldr	r3, [pc, #232]	; (8006c3c <__mdiff+0x110>)
 8006b54:	483a      	ldr	r0, [pc, #232]	; (8006c40 <__mdiff+0x114>)
 8006b56:	f7ff f943 	bl	8005de0 <__assert_func>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006b60:	4610      	mov	r0, r2
 8006b62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b66:	bfa4      	itt	ge
 8006b68:	4623      	movge	r3, r4
 8006b6a:	462c      	movge	r4, r5
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	6861      	ldr	r1, [r4, #4]
 8006b70:	bfa6      	itte	ge
 8006b72:	461d      	movge	r5, r3
 8006b74:	2600      	movge	r6, #0
 8006b76:	2601      	movlt	r6, #1
 8006b78:	f7ff fcf4 	bl	8006564 <_Balloc>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	b918      	cbnz	r0, 8006b88 <__mdiff+0x5c>
 8006b80:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006b84:	4b2d      	ldr	r3, [pc, #180]	; (8006c3c <__mdiff+0x110>)
 8006b86:	e7e5      	b.n	8006b54 <__mdiff+0x28>
 8006b88:	f102 0814 	add.w	r8, r2, #20
 8006b8c:	46c2      	mov	sl, r8
 8006b8e:	f04f 0c00 	mov.w	ip, #0
 8006b92:	6927      	ldr	r7, [r4, #16]
 8006b94:	60c6      	str	r6, [r0, #12]
 8006b96:	692e      	ldr	r6, [r5, #16]
 8006b98:	f104 0014 	add.w	r0, r4, #20
 8006b9c:	f105 0914 	add.w	r9, r5, #20
 8006ba0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006ba4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ba8:	3410      	adds	r4, #16
 8006baa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006bae:	f859 3b04 	ldr.w	r3, [r9], #4
 8006bb2:	fa1f f18b 	uxth.w	r1, fp
 8006bb6:	448c      	add	ip, r1
 8006bb8:	b299      	uxth	r1, r3
 8006bba:	0c1b      	lsrs	r3, r3, #16
 8006bbc:	ebac 0101 	sub.w	r1, ip, r1
 8006bc0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006bc4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006bc8:	b289      	uxth	r1, r1
 8006bca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006bce:	454e      	cmp	r6, r9
 8006bd0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006bd4:	f84a 3b04 	str.w	r3, [sl], #4
 8006bd8:	d8e7      	bhi.n	8006baa <__mdiff+0x7e>
 8006bda:	1b73      	subs	r3, r6, r5
 8006bdc:	3b15      	subs	r3, #21
 8006bde:	f023 0303 	bic.w	r3, r3, #3
 8006be2:	3515      	adds	r5, #21
 8006be4:	3304      	adds	r3, #4
 8006be6:	42ae      	cmp	r6, r5
 8006be8:	bf38      	it	cc
 8006bea:	2304      	movcc	r3, #4
 8006bec:	4418      	add	r0, r3
 8006bee:	4443      	add	r3, r8
 8006bf0:	461e      	mov	r6, r3
 8006bf2:	4605      	mov	r5, r0
 8006bf4:	4575      	cmp	r5, lr
 8006bf6:	d30e      	bcc.n	8006c16 <__mdiff+0xea>
 8006bf8:	f10e 0103 	add.w	r1, lr, #3
 8006bfc:	1a09      	subs	r1, r1, r0
 8006bfe:	f021 0103 	bic.w	r1, r1, #3
 8006c02:	3803      	subs	r0, #3
 8006c04:	4586      	cmp	lr, r0
 8006c06:	bf38      	it	cc
 8006c08:	2100      	movcc	r1, #0
 8006c0a:	4419      	add	r1, r3
 8006c0c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006c10:	b18b      	cbz	r3, 8006c36 <__mdiff+0x10a>
 8006c12:	6117      	str	r7, [r2, #16]
 8006c14:	e7a4      	b.n	8006b60 <__mdiff+0x34>
 8006c16:	f855 8b04 	ldr.w	r8, [r5], #4
 8006c1a:	fa1f f188 	uxth.w	r1, r8
 8006c1e:	4461      	add	r1, ip
 8006c20:	140c      	asrs	r4, r1, #16
 8006c22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c26:	b289      	uxth	r1, r1
 8006c28:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c2c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006c30:	f846 1b04 	str.w	r1, [r6], #4
 8006c34:	e7de      	b.n	8006bf4 <__mdiff+0xc8>
 8006c36:	3f01      	subs	r7, #1
 8006c38:	e7e8      	b.n	8006c0c <__mdiff+0xe0>
 8006c3a:	bf00      	nop
 8006c3c:	08007e60 	.word	0x08007e60
 8006c40:	08007eec 	.word	0x08007eec

08006c44 <__ulp>:
 8006c44:	4b11      	ldr	r3, [pc, #68]	; (8006c8c <__ulp+0x48>)
 8006c46:	400b      	ands	r3, r1
 8006c48:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	dd02      	ble.n	8006c56 <__ulp+0x12>
 8006c50:	2000      	movs	r0, #0
 8006c52:	4619      	mov	r1, r3
 8006c54:	4770      	bx	lr
 8006c56:	425b      	negs	r3, r3
 8006c58:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006c5c:	f04f 0000 	mov.w	r0, #0
 8006c60:	f04f 0100 	mov.w	r1, #0
 8006c64:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006c68:	da04      	bge.n	8006c74 <__ulp+0x30>
 8006c6a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006c6e:	fa43 f102 	asr.w	r1, r3, r2
 8006c72:	4770      	bx	lr
 8006c74:	f1a2 0314 	sub.w	r3, r2, #20
 8006c78:	2b1e      	cmp	r3, #30
 8006c7a:	bfd6      	itet	le
 8006c7c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006c80:	2301      	movgt	r3, #1
 8006c82:	fa22 f303 	lsrle.w	r3, r2, r3
 8006c86:	4618      	mov	r0, r3
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	7ff00000 	.word	0x7ff00000

08006c90 <__b2d>:
 8006c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c94:	6907      	ldr	r7, [r0, #16]
 8006c96:	f100 0914 	add.w	r9, r0, #20
 8006c9a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006c9e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006ca2:	f1a7 0804 	sub.w	r8, r7, #4
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	f7ff fd4e 	bl	8006748 <__hi0bits>
 8006cac:	f1c0 0320 	rsb	r3, r0, #32
 8006cb0:	280a      	cmp	r0, #10
 8006cb2:	600b      	str	r3, [r1, #0]
 8006cb4:	491f      	ldr	r1, [pc, #124]	; (8006d34 <__b2d+0xa4>)
 8006cb6:	dc17      	bgt.n	8006ce8 <__b2d+0x58>
 8006cb8:	45c1      	cmp	r9, r8
 8006cba:	bf28      	it	cs
 8006cbc:	2200      	movcs	r2, #0
 8006cbe:	f1c0 0c0b 	rsb	ip, r0, #11
 8006cc2:	fa26 f30c 	lsr.w	r3, r6, ip
 8006cc6:	bf38      	it	cc
 8006cc8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006ccc:	ea43 0501 	orr.w	r5, r3, r1
 8006cd0:	f100 0315 	add.w	r3, r0, #21
 8006cd4:	fa06 f303 	lsl.w	r3, r6, r3
 8006cd8:	fa22 f20c 	lsr.w	r2, r2, ip
 8006cdc:	ea43 0402 	orr.w	r4, r3, r2
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ce8:	45c1      	cmp	r9, r8
 8006cea:	bf2e      	itee	cs
 8006cec:	2200      	movcs	r2, #0
 8006cee:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006cf2:	f1a7 0808 	subcc.w	r8, r7, #8
 8006cf6:	f1b0 030b 	subs.w	r3, r0, #11
 8006cfa:	d016      	beq.n	8006d2a <__b2d+0x9a>
 8006cfc:	f1c3 0720 	rsb	r7, r3, #32
 8006d00:	fa22 f107 	lsr.w	r1, r2, r7
 8006d04:	45c8      	cmp	r8, r9
 8006d06:	fa06 f603 	lsl.w	r6, r6, r3
 8006d0a:	ea46 0601 	orr.w	r6, r6, r1
 8006d0e:	bf94      	ite	ls
 8006d10:	2100      	movls	r1, #0
 8006d12:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006d16:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006d1a:	fa02 f003 	lsl.w	r0, r2, r3
 8006d1e:	40f9      	lsrs	r1, r7
 8006d20:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006d24:	ea40 0401 	orr.w	r4, r0, r1
 8006d28:	e7da      	b.n	8006ce0 <__b2d+0x50>
 8006d2a:	4614      	mov	r4, r2
 8006d2c:	ea46 0501 	orr.w	r5, r6, r1
 8006d30:	e7d6      	b.n	8006ce0 <__b2d+0x50>
 8006d32:	bf00      	nop
 8006d34:	3ff00000 	.word	0x3ff00000

08006d38 <__d2b>:
 8006d38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006d42:	4690      	mov	r8, r2
 8006d44:	461d      	mov	r5, r3
 8006d46:	f7ff fc0d 	bl	8006564 <_Balloc>
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	b930      	cbnz	r0, 8006d5c <__d2b+0x24>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	f240 310a 	movw	r1, #778	; 0x30a
 8006d54:	4b24      	ldr	r3, [pc, #144]	; (8006de8 <__d2b+0xb0>)
 8006d56:	4825      	ldr	r0, [pc, #148]	; (8006dec <__d2b+0xb4>)
 8006d58:	f7ff f842 	bl	8005de0 <__assert_func>
 8006d5c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006d60:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006d64:	bb2d      	cbnz	r5, 8006db2 <__d2b+0x7a>
 8006d66:	9301      	str	r3, [sp, #4]
 8006d68:	f1b8 0300 	subs.w	r3, r8, #0
 8006d6c:	d026      	beq.n	8006dbc <__d2b+0x84>
 8006d6e:	4668      	mov	r0, sp
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	f7ff fd09 	bl	8006788 <__lo0bits>
 8006d76:	9900      	ldr	r1, [sp, #0]
 8006d78:	b1f0      	cbz	r0, 8006db8 <__d2b+0x80>
 8006d7a:	9a01      	ldr	r2, [sp, #4]
 8006d7c:	f1c0 0320 	rsb	r3, r0, #32
 8006d80:	fa02 f303 	lsl.w	r3, r2, r3
 8006d84:	430b      	orrs	r3, r1
 8006d86:	40c2      	lsrs	r2, r0
 8006d88:	6163      	str	r3, [r4, #20]
 8006d8a:	9201      	str	r2, [sp, #4]
 8006d8c:	9b01      	ldr	r3, [sp, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	bf14      	ite	ne
 8006d92:	2102      	movne	r1, #2
 8006d94:	2101      	moveq	r1, #1
 8006d96:	61a3      	str	r3, [r4, #24]
 8006d98:	6121      	str	r1, [r4, #16]
 8006d9a:	b1c5      	cbz	r5, 8006dce <__d2b+0x96>
 8006d9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006da0:	4405      	add	r5, r0
 8006da2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006da6:	603d      	str	r5, [r7, #0]
 8006da8:	6030      	str	r0, [r6, #0]
 8006daa:	4620      	mov	r0, r4
 8006dac:	b002      	add	sp, #8
 8006dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006db6:	e7d6      	b.n	8006d66 <__d2b+0x2e>
 8006db8:	6161      	str	r1, [r4, #20]
 8006dba:	e7e7      	b.n	8006d8c <__d2b+0x54>
 8006dbc:	a801      	add	r0, sp, #4
 8006dbe:	f7ff fce3 	bl	8006788 <__lo0bits>
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	9b01      	ldr	r3, [sp, #4]
 8006dc6:	6121      	str	r1, [r4, #16]
 8006dc8:	6163      	str	r3, [r4, #20]
 8006dca:	3020      	adds	r0, #32
 8006dcc:	e7e5      	b.n	8006d9a <__d2b+0x62>
 8006dce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006dd2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006dd6:	6038      	str	r0, [r7, #0]
 8006dd8:	6918      	ldr	r0, [r3, #16]
 8006dda:	f7ff fcb5 	bl	8006748 <__hi0bits>
 8006dde:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006de2:	6031      	str	r1, [r6, #0]
 8006de4:	e7e1      	b.n	8006daa <__d2b+0x72>
 8006de6:	bf00      	nop
 8006de8:	08007e60 	.word	0x08007e60
 8006dec:	08007eec 	.word	0x08007eec

08006df0 <__ratio>:
 8006df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df4:	4688      	mov	r8, r1
 8006df6:	4669      	mov	r1, sp
 8006df8:	4681      	mov	r9, r0
 8006dfa:	f7ff ff49 	bl	8006c90 <__b2d>
 8006dfe:	460f      	mov	r7, r1
 8006e00:	4604      	mov	r4, r0
 8006e02:	460d      	mov	r5, r1
 8006e04:	4640      	mov	r0, r8
 8006e06:	a901      	add	r1, sp, #4
 8006e08:	f7ff ff42 	bl	8006c90 <__b2d>
 8006e0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e10:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006e14:	468b      	mov	fp, r1
 8006e16:	eba3 0c02 	sub.w	ip, r3, r2
 8006e1a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006e1e:	1a9b      	subs	r3, r3, r2
 8006e20:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	bfd5      	itete	le
 8006e28:	460a      	movle	r2, r1
 8006e2a:	462a      	movgt	r2, r5
 8006e2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006e30:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006e34:	bfd8      	it	le
 8006e36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006e3a:	465b      	mov	r3, fp
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	4639      	mov	r1, r7
 8006e40:	4620      	mov	r0, r4
 8006e42:	f7f9 fc7d 	bl	8000740 <__aeabi_ddiv>
 8006e46:	b003      	add	sp, #12
 8006e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006e4c <__copybits>:
 8006e4c:	3901      	subs	r1, #1
 8006e4e:	b570      	push	{r4, r5, r6, lr}
 8006e50:	1149      	asrs	r1, r1, #5
 8006e52:	6914      	ldr	r4, [r2, #16]
 8006e54:	3101      	adds	r1, #1
 8006e56:	f102 0314 	add.w	r3, r2, #20
 8006e5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006e5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006e62:	1f05      	subs	r5, r0, #4
 8006e64:	42a3      	cmp	r3, r4
 8006e66:	d30c      	bcc.n	8006e82 <__copybits+0x36>
 8006e68:	1aa3      	subs	r3, r4, r2
 8006e6a:	3b11      	subs	r3, #17
 8006e6c:	f023 0303 	bic.w	r3, r3, #3
 8006e70:	3211      	adds	r2, #17
 8006e72:	42a2      	cmp	r2, r4
 8006e74:	bf88      	it	hi
 8006e76:	2300      	movhi	r3, #0
 8006e78:	4418      	add	r0, r3
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	4288      	cmp	r0, r1
 8006e7e:	d305      	bcc.n	8006e8c <__copybits+0x40>
 8006e80:	bd70      	pop	{r4, r5, r6, pc}
 8006e82:	f853 6b04 	ldr.w	r6, [r3], #4
 8006e86:	f845 6f04 	str.w	r6, [r5, #4]!
 8006e8a:	e7eb      	b.n	8006e64 <__copybits+0x18>
 8006e8c:	f840 3b04 	str.w	r3, [r0], #4
 8006e90:	e7f4      	b.n	8006e7c <__copybits+0x30>

08006e92 <__any_on>:
 8006e92:	f100 0214 	add.w	r2, r0, #20
 8006e96:	6900      	ldr	r0, [r0, #16]
 8006e98:	114b      	asrs	r3, r1, #5
 8006e9a:	4298      	cmp	r0, r3
 8006e9c:	b510      	push	{r4, lr}
 8006e9e:	db11      	blt.n	8006ec4 <__any_on+0x32>
 8006ea0:	dd0a      	ble.n	8006eb8 <__any_on+0x26>
 8006ea2:	f011 011f 	ands.w	r1, r1, #31
 8006ea6:	d007      	beq.n	8006eb8 <__any_on+0x26>
 8006ea8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006eac:	fa24 f001 	lsr.w	r0, r4, r1
 8006eb0:	fa00 f101 	lsl.w	r1, r0, r1
 8006eb4:	428c      	cmp	r4, r1
 8006eb6:	d10b      	bne.n	8006ed0 <__any_on+0x3e>
 8006eb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d803      	bhi.n	8006ec8 <__any_on+0x36>
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	bd10      	pop	{r4, pc}
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	e7f7      	b.n	8006eb8 <__any_on+0x26>
 8006ec8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ecc:	2900      	cmp	r1, #0
 8006ece:	d0f5      	beq.n	8006ebc <__any_on+0x2a>
 8006ed0:	2001      	movs	r0, #1
 8006ed2:	e7f6      	b.n	8006ec2 <__any_on+0x30>

08006ed4 <_calloc_r>:
 8006ed4:	b570      	push	{r4, r5, r6, lr}
 8006ed6:	fba1 5402 	umull	r5, r4, r1, r2
 8006eda:	b934      	cbnz	r4, 8006eea <_calloc_r+0x16>
 8006edc:	4629      	mov	r1, r5
 8006ede:	f7fe f889 	bl	8004ff4 <_malloc_r>
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	b928      	cbnz	r0, 8006ef2 <_calloc_r+0x1e>
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	bd70      	pop	{r4, r5, r6, pc}
 8006eea:	220c      	movs	r2, #12
 8006eec:	2600      	movs	r6, #0
 8006eee:	6002      	str	r2, [r0, #0]
 8006ef0:	e7f9      	b.n	8006ee6 <_calloc_r+0x12>
 8006ef2:	462a      	mov	r2, r5
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	f7fe f80d 	bl	8004f14 <memset>
 8006efa:	e7f4      	b.n	8006ee6 <_calloc_r+0x12>

08006efc <__sfputc_r>:
 8006efc:	6893      	ldr	r3, [r2, #8]
 8006efe:	b410      	push	{r4}
 8006f00:	3b01      	subs	r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	6093      	str	r3, [r2, #8]
 8006f06:	da07      	bge.n	8006f18 <__sfputc_r+0x1c>
 8006f08:	6994      	ldr	r4, [r2, #24]
 8006f0a:	42a3      	cmp	r3, r4
 8006f0c:	db01      	blt.n	8006f12 <__sfputc_r+0x16>
 8006f0e:	290a      	cmp	r1, #10
 8006f10:	d102      	bne.n	8006f18 <__sfputc_r+0x1c>
 8006f12:	bc10      	pop	{r4}
 8006f14:	f000 bafa 	b.w	800750c <__swbuf_r>
 8006f18:	6813      	ldr	r3, [r2, #0]
 8006f1a:	1c58      	adds	r0, r3, #1
 8006f1c:	6010      	str	r0, [r2, #0]
 8006f1e:	7019      	strb	r1, [r3, #0]
 8006f20:	4608      	mov	r0, r1
 8006f22:	bc10      	pop	{r4}
 8006f24:	4770      	bx	lr

08006f26 <__sfputs_r>:
 8006f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f28:	4606      	mov	r6, r0
 8006f2a:	460f      	mov	r7, r1
 8006f2c:	4614      	mov	r4, r2
 8006f2e:	18d5      	adds	r5, r2, r3
 8006f30:	42ac      	cmp	r4, r5
 8006f32:	d101      	bne.n	8006f38 <__sfputs_r+0x12>
 8006f34:	2000      	movs	r0, #0
 8006f36:	e007      	b.n	8006f48 <__sfputs_r+0x22>
 8006f38:	463a      	mov	r2, r7
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f40:	f7ff ffdc 	bl	8006efc <__sfputc_r>
 8006f44:	1c43      	adds	r3, r0, #1
 8006f46:	d1f3      	bne.n	8006f30 <__sfputs_r+0xa>
 8006f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f4c <_vfiprintf_r>:
 8006f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f50:	460d      	mov	r5, r1
 8006f52:	4614      	mov	r4, r2
 8006f54:	4698      	mov	r8, r3
 8006f56:	4606      	mov	r6, r0
 8006f58:	b09d      	sub	sp, #116	; 0x74
 8006f5a:	b118      	cbz	r0, 8006f64 <_vfiprintf_r+0x18>
 8006f5c:	6983      	ldr	r3, [r0, #24]
 8006f5e:	b90b      	cbnz	r3, 8006f64 <_vfiprintf_r+0x18>
 8006f60:	f000 fcc0 	bl	80078e4 <__sinit>
 8006f64:	4b89      	ldr	r3, [pc, #548]	; (800718c <_vfiprintf_r+0x240>)
 8006f66:	429d      	cmp	r5, r3
 8006f68:	d11b      	bne.n	8006fa2 <_vfiprintf_r+0x56>
 8006f6a:	6875      	ldr	r5, [r6, #4]
 8006f6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f6e:	07d9      	lsls	r1, r3, #31
 8006f70:	d405      	bmi.n	8006f7e <_vfiprintf_r+0x32>
 8006f72:	89ab      	ldrh	r3, [r5, #12]
 8006f74:	059a      	lsls	r2, r3, #22
 8006f76:	d402      	bmi.n	8006f7e <_vfiprintf_r+0x32>
 8006f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f7a:	f000 fd51 	bl	8007a20 <__retarget_lock_acquire_recursive>
 8006f7e:	89ab      	ldrh	r3, [r5, #12]
 8006f80:	071b      	lsls	r3, r3, #28
 8006f82:	d501      	bpl.n	8006f88 <_vfiprintf_r+0x3c>
 8006f84:	692b      	ldr	r3, [r5, #16]
 8006f86:	b9eb      	cbnz	r3, 8006fc4 <_vfiprintf_r+0x78>
 8006f88:	4629      	mov	r1, r5
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	f000 fb1e 	bl	80075cc <__swsetup_r>
 8006f90:	b1c0      	cbz	r0, 8006fc4 <_vfiprintf_r+0x78>
 8006f92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f94:	07dc      	lsls	r4, r3, #31
 8006f96:	d50e      	bpl.n	8006fb6 <_vfiprintf_r+0x6a>
 8006f98:	f04f 30ff 	mov.w	r0, #4294967295
 8006f9c:	b01d      	add	sp, #116	; 0x74
 8006f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa2:	4b7b      	ldr	r3, [pc, #492]	; (8007190 <_vfiprintf_r+0x244>)
 8006fa4:	429d      	cmp	r5, r3
 8006fa6:	d101      	bne.n	8006fac <_vfiprintf_r+0x60>
 8006fa8:	68b5      	ldr	r5, [r6, #8]
 8006faa:	e7df      	b.n	8006f6c <_vfiprintf_r+0x20>
 8006fac:	4b79      	ldr	r3, [pc, #484]	; (8007194 <_vfiprintf_r+0x248>)
 8006fae:	429d      	cmp	r5, r3
 8006fb0:	bf08      	it	eq
 8006fb2:	68f5      	ldreq	r5, [r6, #12]
 8006fb4:	e7da      	b.n	8006f6c <_vfiprintf_r+0x20>
 8006fb6:	89ab      	ldrh	r3, [r5, #12]
 8006fb8:	0598      	lsls	r0, r3, #22
 8006fba:	d4ed      	bmi.n	8006f98 <_vfiprintf_r+0x4c>
 8006fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fbe:	f000 fd30 	bl	8007a22 <__retarget_lock_release_recursive>
 8006fc2:	e7e9      	b.n	8006f98 <_vfiprintf_r+0x4c>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc8:	2320      	movs	r3, #32
 8006fca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fce:	2330      	movs	r3, #48	; 0x30
 8006fd0:	f04f 0901 	mov.w	r9, #1
 8006fd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fd8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007198 <_vfiprintf_r+0x24c>
 8006fdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fe0:	4623      	mov	r3, r4
 8006fe2:	469a      	mov	sl, r3
 8006fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fe8:	b10a      	cbz	r2, 8006fee <_vfiprintf_r+0xa2>
 8006fea:	2a25      	cmp	r2, #37	; 0x25
 8006fec:	d1f9      	bne.n	8006fe2 <_vfiprintf_r+0x96>
 8006fee:	ebba 0b04 	subs.w	fp, sl, r4
 8006ff2:	d00b      	beq.n	800700c <_vfiprintf_r+0xc0>
 8006ff4:	465b      	mov	r3, fp
 8006ff6:	4622      	mov	r2, r4
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f7ff ff93 	bl	8006f26 <__sfputs_r>
 8007000:	3001      	adds	r0, #1
 8007002:	f000 80aa 	beq.w	800715a <_vfiprintf_r+0x20e>
 8007006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007008:	445a      	add	r2, fp
 800700a:	9209      	str	r2, [sp, #36]	; 0x24
 800700c:	f89a 3000 	ldrb.w	r3, [sl]
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 80a2 	beq.w	800715a <_vfiprintf_r+0x20e>
 8007016:	2300      	movs	r3, #0
 8007018:	f04f 32ff 	mov.w	r2, #4294967295
 800701c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007020:	f10a 0a01 	add.w	sl, sl, #1
 8007024:	9304      	str	r3, [sp, #16]
 8007026:	9307      	str	r3, [sp, #28]
 8007028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800702c:	931a      	str	r3, [sp, #104]	; 0x68
 800702e:	4654      	mov	r4, sl
 8007030:	2205      	movs	r2, #5
 8007032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007036:	4858      	ldr	r0, [pc, #352]	; (8007198 <_vfiprintf_r+0x24c>)
 8007038:	f000 fd5a 	bl	8007af0 <memchr>
 800703c:	9a04      	ldr	r2, [sp, #16]
 800703e:	b9d8      	cbnz	r0, 8007078 <_vfiprintf_r+0x12c>
 8007040:	06d1      	lsls	r1, r2, #27
 8007042:	bf44      	itt	mi
 8007044:	2320      	movmi	r3, #32
 8007046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800704a:	0713      	lsls	r3, r2, #28
 800704c:	bf44      	itt	mi
 800704e:	232b      	movmi	r3, #43	; 0x2b
 8007050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007054:	f89a 3000 	ldrb.w	r3, [sl]
 8007058:	2b2a      	cmp	r3, #42	; 0x2a
 800705a:	d015      	beq.n	8007088 <_vfiprintf_r+0x13c>
 800705c:	4654      	mov	r4, sl
 800705e:	2000      	movs	r0, #0
 8007060:	f04f 0c0a 	mov.w	ip, #10
 8007064:	9a07      	ldr	r2, [sp, #28]
 8007066:	4621      	mov	r1, r4
 8007068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800706c:	3b30      	subs	r3, #48	; 0x30
 800706e:	2b09      	cmp	r3, #9
 8007070:	d94e      	bls.n	8007110 <_vfiprintf_r+0x1c4>
 8007072:	b1b0      	cbz	r0, 80070a2 <_vfiprintf_r+0x156>
 8007074:	9207      	str	r2, [sp, #28]
 8007076:	e014      	b.n	80070a2 <_vfiprintf_r+0x156>
 8007078:	eba0 0308 	sub.w	r3, r0, r8
 800707c:	fa09 f303 	lsl.w	r3, r9, r3
 8007080:	4313      	orrs	r3, r2
 8007082:	46a2      	mov	sl, r4
 8007084:	9304      	str	r3, [sp, #16]
 8007086:	e7d2      	b.n	800702e <_vfiprintf_r+0xe2>
 8007088:	9b03      	ldr	r3, [sp, #12]
 800708a:	1d19      	adds	r1, r3, #4
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	9103      	str	r1, [sp, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	bfbb      	ittet	lt
 8007094:	425b      	neglt	r3, r3
 8007096:	f042 0202 	orrlt.w	r2, r2, #2
 800709a:	9307      	strge	r3, [sp, #28]
 800709c:	9307      	strlt	r3, [sp, #28]
 800709e:	bfb8      	it	lt
 80070a0:	9204      	strlt	r2, [sp, #16]
 80070a2:	7823      	ldrb	r3, [r4, #0]
 80070a4:	2b2e      	cmp	r3, #46	; 0x2e
 80070a6:	d10c      	bne.n	80070c2 <_vfiprintf_r+0x176>
 80070a8:	7863      	ldrb	r3, [r4, #1]
 80070aa:	2b2a      	cmp	r3, #42	; 0x2a
 80070ac:	d135      	bne.n	800711a <_vfiprintf_r+0x1ce>
 80070ae:	9b03      	ldr	r3, [sp, #12]
 80070b0:	3402      	adds	r4, #2
 80070b2:	1d1a      	adds	r2, r3, #4
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	9203      	str	r2, [sp, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	bfb8      	it	lt
 80070bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80070c0:	9305      	str	r3, [sp, #20]
 80070c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800719c <_vfiprintf_r+0x250>
 80070c6:	2203      	movs	r2, #3
 80070c8:	4650      	mov	r0, sl
 80070ca:	7821      	ldrb	r1, [r4, #0]
 80070cc:	f000 fd10 	bl	8007af0 <memchr>
 80070d0:	b140      	cbz	r0, 80070e4 <_vfiprintf_r+0x198>
 80070d2:	2340      	movs	r3, #64	; 0x40
 80070d4:	eba0 000a 	sub.w	r0, r0, sl
 80070d8:	fa03 f000 	lsl.w	r0, r3, r0
 80070dc:	9b04      	ldr	r3, [sp, #16]
 80070de:	3401      	adds	r4, #1
 80070e0:	4303      	orrs	r3, r0
 80070e2:	9304      	str	r3, [sp, #16]
 80070e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070e8:	2206      	movs	r2, #6
 80070ea:	482d      	ldr	r0, [pc, #180]	; (80071a0 <_vfiprintf_r+0x254>)
 80070ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070f0:	f000 fcfe 	bl	8007af0 <memchr>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d03f      	beq.n	8007178 <_vfiprintf_r+0x22c>
 80070f8:	4b2a      	ldr	r3, [pc, #168]	; (80071a4 <_vfiprintf_r+0x258>)
 80070fa:	bb1b      	cbnz	r3, 8007144 <_vfiprintf_r+0x1f8>
 80070fc:	9b03      	ldr	r3, [sp, #12]
 80070fe:	3307      	adds	r3, #7
 8007100:	f023 0307 	bic.w	r3, r3, #7
 8007104:	3308      	adds	r3, #8
 8007106:	9303      	str	r3, [sp, #12]
 8007108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800710a:	443b      	add	r3, r7
 800710c:	9309      	str	r3, [sp, #36]	; 0x24
 800710e:	e767      	b.n	8006fe0 <_vfiprintf_r+0x94>
 8007110:	460c      	mov	r4, r1
 8007112:	2001      	movs	r0, #1
 8007114:	fb0c 3202 	mla	r2, ip, r2, r3
 8007118:	e7a5      	b.n	8007066 <_vfiprintf_r+0x11a>
 800711a:	2300      	movs	r3, #0
 800711c:	f04f 0c0a 	mov.w	ip, #10
 8007120:	4619      	mov	r1, r3
 8007122:	3401      	adds	r4, #1
 8007124:	9305      	str	r3, [sp, #20]
 8007126:	4620      	mov	r0, r4
 8007128:	f810 2b01 	ldrb.w	r2, [r0], #1
 800712c:	3a30      	subs	r2, #48	; 0x30
 800712e:	2a09      	cmp	r2, #9
 8007130:	d903      	bls.n	800713a <_vfiprintf_r+0x1ee>
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0c5      	beq.n	80070c2 <_vfiprintf_r+0x176>
 8007136:	9105      	str	r1, [sp, #20]
 8007138:	e7c3      	b.n	80070c2 <_vfiprintf_r+0x176>
 800713a:	4604      	mov	r4, r0
 800713c:	2301      	movs	r3, #1
 800713e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007142:	e7f0      	b.n	8007126 <_vfiprintf_r+0x1da>
 8007144:	ab03      	add	r3, sp, #12
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	462a      	mov	r2, r5
 800714a:	4630      	mov	r0, r6
 800714c:	4b16      	ldr	r3, [pc, #88]	; (80071a8 <_vfiprintf_r+0x25c>)
 800714e:	a904      	add	r1, sp, #16
 8007150:	f3af 8000 	nop.w
 8007154:	4607      	mov	r7, r0
 8007156:	1c78      	adds	r0, r7, #1
 8007158:	d1d6      	bne.n	8007108 <_vfiprintf_r+0x1bc>
 800715a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800715c:	07d9      	lsls	r1, r3, #31
 800715e:	d405      	bmi.n	800716c <_vfiprintf_r+0x220>
 8007160:	89ab      	ldrh	r3, [r5, #12]
 8007162:	059a      	lsls	r2, r3, #22
 8007164:	d402      	bmi.n	800716c <_vfiprintf_r+0x220>
 8007166:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007168:	f000 fc5b 	bl	8007a22 <__retarget_lock_release_recursive>
 800716c:	89ab      	ldrh	r3, [r5, #12]
 800716e:	065b      	lsls	r3, r3, #25
 8007170:	f53f af12 	bmi.w	8006f98 <_vfiprintf_r+0x4c>
 8007174:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007176:	e711      	b.n	8006f9c <_vfiprintf_r+0x50>
 8007178:	ab03      	add	r3, sp, #12
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	462a      	mov	r2, r5
 800717e:	4630      	mov	r0, r6
 8007180:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <_vfiprintf_r+0x25c>)
 8007182:	a904      	add	r1, sp, #16
 8007184:	f000 f882 	bl	800728c <_printf_i>
 8007188:	e7e4      	b.n	8007154 <_vfiprintf_r+0x208>
 800718a:	bf00      	nop
 800718c:	08008198 	.word	0x08008198
 8007190:	080081b8 	.word	0x080081b8
 8007194:	08008178 	.word	0x08008178
 8007198:	08008044 	.word	0x08008044
 800719c:	0800804a 	.word	0x0800804a
 80071a0:	0800804e 	.word	0x0800804e
 80071a4:	00000000 	.word	0x00000000
 80071a8:	08006f27 	.word	0x08006f27

080071ac <_printf_common>:
 80071ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b0:	4616      	mov	r6, r2
 80071b2:	4699      	mov	r9, r3
 80071b4:	688a      	ldr	r2, [r1, #8]
 80071b6:	690b      	ldr	r3, [r1, #16]
 80071b8:	4607      	mov	r7, r0
 80071ba:	4293      	cmp	r3, r2
 80071bc:	bfb8      	it	lt
 80071be:	4613      	movlt	r3, r2
 80071c0:	6033      	str	r3, [r6, #0]
 80071c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071c6:	460c      	mov	r4, r1
 80071c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071cc:	b10a      	cbz	r2, 80071d2 <_printf_common+0x26>
 80071ce:	3301      	adds	r3, #1
 80071d0:	6033      	str	r3, [r6, #0]
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	0699      	lsls	r1, r3, #26
 80071d6:	bf42      	ittt	mi
 80071d8:	6833      	ldrmi	r3, [r6, #0]
 80071da:	3302      	addmi	r3, #2
 80071dc:	6033      	strmi	r3, [r6, #0]
 80071de:	6825      	ldr	r5, [r4, #0]
 80071e0:	f015 0506 	ands.w	r5, r5, #6
 80071e4:	d106      	bne.n	80071f4 <_printf_common+0x48>
 80071e6:	f104 0a19 	add.w	sl, r4, #25
 80071ea:	68e3      	ldr	r3, [r4, #12]
 80071ec:	6832      	ldr	r2, [r6, #0]
 80071ee:	1a9b      	subs	r3, r3, r2
 80071f0:	42ab      	cmp	r3, r5
 80071f2:	dc28      	bgt.n	8007246 <_printf_common+0x9a>
 80071f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071f8:	1e13      	subs	r3, r2, #0
 80071fa:	6822      	ldr	r2, [r4, #0]
 80071fc:	bf18      	it	ne
 80071fe:	2301      	movne	r3, #1
 8007200:	0692      	lsls	r2, r2, #26
 8007202:	d42d      	bmi.n	8007260 <_printf_common+0xb4>
 8007204:	4649      	mov	r1, r9
 8007206:	4638      	mov	r0, r7
 8007208:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800720c:	47c0      	blx	r8
 800720e:	3001      	adds	r0, #1
 8007210:	d020      	beq.n	8007254 <_printf_common+0xa8>
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	68e5      	ldr	r5, [r4, #12]
 8007216:	f003 0306 	and.w	r3, r3, #6
 800721a:	2b04      	cmp	r3, #4
 800721c:	bf18      	it	ne
 800721e:	2500      	movne	r5, #0
 8007220:	6832      	ldr	r2, [r6, #0]
 8007222:	f04f 0600 	mov.w	r6, #0
 8007226:	68a3      	ldr	r3, [r4, #8]
 8007228:	bf08      	it	eq
 800722a:	1aad      	subeq	r5, r5, r2
 800722c:	6922      	ldr	r2, [r4, #16]
 800722e:	bf08      	it	eq
 8007230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007234:	4293      	cmp	r3, r2
 8007236:	bfc4      	itt	gt
 8007238:	1a9b      	subgt	r3, r3, r2
 800723a:	18ed      	addgt	r5, r5, r3
 800723c:	341a      	adds	r4, #26
 800723e:	42b5      	cmp	r5, r6
 8007240:	d11a      	bne.n	8007278 <_printf_common+0xcc>
 8007242:	2000      	movs	r0, #0
 8007244:	e008      	b.n	8007258 <_printf_common+0xac>
 8007246:	2301      	movs	r3, #1
 8007248:	4652      	mov	r2, sl
 800724a:	4649      	mov	r1, r9
 800724c:	4638      	mov	r0, r7
 800724e:	47c0      	blx	r8
 8007250:	3001      	adds	r0, #1
 8007252:	d103      	bne.n	800725c <_printf_common+0xb0>
 8007254:	f04f 30ff 	mov.w	r0, #4294967295
 8007258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800725c:	3501      	adds	r5, #1
 800725e:	e7c4      	b.n	80071ea <_printf_common+0x3e>
 8007260:	2030      	movs	r0, #48	; 0x30
 8007262:	18e1      	adds	r1, r4, r3
 8007264:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800726e:	4422      	add	r2, r4
 8007270:	3302      	adds	r3, #2
 8007272:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007276:	e7c5      	b.n	8007204 <_printf_common+0x58>
 8007278:	2301      	movs	r3, #1
 800727a:	4622      	mov	r2, r4
 800727c:	4649      	mov	r1, r9
 800727e:	4638      	mov	r0, r7
 8007280:	47c0      	blx	r8
 8007282:	3001      	adds	r0, #1
 8007284:	d0e6      	beq.n	8007254 <_printf_common+0xa8>
 8007286:	3601      	adds	r6, #1
 8007288:	e7d9      	b.n	800723e <_printf_common+0x92>
	...

0800728c <_printf_i>:
 800728c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007290:	7e0f      	ldrb	r7, [r1, #24]
 8007292:	4691      	mov	r9, r2
 8007294:	2f78      	cmp	r7, #120	; 0x78
 8007296:	4680      	mov	r8, r0
 8007298:	460c      	mov	r4, r1
 800729a:	469a      	mov	sl, r3
 800729c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800729e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072a2:	d807      	bhi.n	80072b4 <_printf_i+0x28>
 80072a4:	2f62      	cmp	r7, #98	; 0x62
 80072a6:	d80a      	bhi.n	80072be <_printf_i+0x32>
 80072a8:	2f00      	cmp	r7, #0
 80072aa:	f000 80d9 	beq.w	8007460 <_printf_i+0x1d4>
 80072ae:	2f58      	cmp	r7, #88	; 0x58
 80072b0:	f000 80a4 	beq.w	80073fc <_printf_i+0x170>
 80072b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072bc:	e03a      	b.n	8007334 <_printf_i+0xa8>
 80072be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072c2:	2b15      	cmp	r3, #21
 80072c4:	d8f6      	bhi.n	80072b4 <_printf_i+0x28>
 80072c6:	a101      	add	r1, pc, #4	; (adr r1, 80072cc <_printf_i+0x40>)
 80072c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072cc:	08007325 	.word	0x08007325
 80072d0:	08007339 	.word	0x08007339
 80072d4:	080072b5 	.word	0x080072b5
 80072d8:	080072b5 	.word	0x080072b5
 80072dc:	080072b5 	.word	0x080072b5
 80072e0:	080072b5 	.word	0x080072b5
 80072e4:	08007339 	.word	0x08007339
 80072e8:	080072b5 	.word	0x080072b5
 80072ec:	080072b5 	.word	0x080072b5
 80072f0:	080072b5 	.word	0x080072b5
 80072f4:	080072b5 	.word	0x080072b5
 80072f8:	08007447 	.word	0x08007447
 80072fc:	08007369 	.word	0x08007369
 8007300:	08007429 	.word	0x08007429
 8007304:	080072b5 	.word	0x080072b5
 8007308:	080072b5 	.word	0x080072b5
 800730c:	08007469 	.word	0x08007469
 8007310:	080072b5 	.word	0x080072b5
 8007314:	08007369 	.word	0x08007369
 8007318:	080072b5 	.word	0x080072b5
 800731c:	080072b5 	.word	0x080072b5
 8007320:	08007431 	.word	0x08007431
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	1d1a      	adds	r2, r3, #4
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	602a      	str	r2, [r5, #0]
 800732c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007334:	2301      	movs	r3, #1
 8007336:	e0a4      	b.n	8007482 <_printf_i+0x1f6>
 8007338:	6820      	ldr	r0, [r4, #0]
 800733a:	6829      	ldr	r1, [r5, #0]
 800733c:	0606      	lsls	r6, r0, #24
 800733e:	f101 0304 	add.w	r3, r1, #4
 8007342:	d50a      	bpl.n	800735a <_printf_i+0xce>
 8007344:	680e      	ldr	r6, [r1, #0]
 8007346:	602b      	str	r3, [r5, #0]
 8007348:	2e00      	cmp	r6, #0
 800734a:	da03      	bge.n	8007354 <_printf_i+0xc8>
 800734c:	232d      	movs	r3, #45	; 0x2d
 800734e:	4276      	negs	r6, r6
 8007350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007354:	230a      	movs	r3, #10
 8007356:	485e      	ldr	r0, [pc, #376]	; (80074d0 <_printf_i+0x244>)
 8007358:	e019      	b.n	800738e <_printf_i+0x102>
 800735a:	680e      	ldr	r6, [r1, #0]
 800735c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007360:	602b      	str	r3, [r5, #0]
 8007362:	bf18      	it	ne
 8007364:	b236      	sxthne	r6, r6
 8007366:	e7ef      	b.n	8007348 <_printf_i+0xbc>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	6820      	ldr	r0, [r4, #0]
 800736c:	1d19      	adds	r1, r3, #4
 800736e:	6029      	str	r1, [r5, #0]
 8007370:	0601      	lsls	r1, r0, #24
 8007372:	d501      	bpl.n	8007378 <_printf_i+0xec>
 8007374:	681e      	ldr	r6, [r3, #0]
 8007376:	e002      	b.n	800737e <_printf_i+0xf2>
 8007378:	0646      	lsls	r6, r0, #25
 800737a:	d5fb      	bpl.n	8007374 <_printf_i+0xe8>
 800737c:	881e      	ldrh	r6, [r3, #0]
 800737e:	2f6f      	cmp	r7, #111	; 0x6f
 8007380:	bf0c      	ite	eq
 8007382:	2308      	moveq	r3, #8
 8007384:	230a      	movne	r3, #10
 8007386:	4852      	ldr	r0, [pc, #328]	; (80074d0 <_printf_i+0x244>)
 8007388:	2100      	movs	r1, #0
 800738a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800738e:	6865      	ldr	r5, [r4, #4]
 8007390:	2d00      	cmp	r5, #0
 8007392:	bfa8      	it	ge
 8007394:	6821      	ldrge	r1, [r4, #0]
 8007396:	60a5      	str	r5, [r4, #8]
 8007398:	bfa4      	itt	ge
 800739a:	f021 0104 	bicge.w	r1, r1, #4
 800739e:	6021      	strge	r1, [r4, #0]
 80073a0:	b90e      	cbnz	r6, 80073a6 <_printf_i+0x11a>
 80073a2:	2d00      	cmp	r5, #0
 80073a4:	d04d      	beq.n	8007442 <_printf_i+0x1b6>
 80073a6:	4615      	mov	r5, r2
 80073a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80073ac:	fb03 6711 	mls	r7, r3, r1, r6
 80073b0:	5dc7      	ldrb	r7, [r0, r7]
 80073b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073b6:	4637      	mov	r7, r6
 80073b8:	42bb      	cmp	r3, r7
 80073ba:	460e      	mov	r6, r1
 80073bc:	d9f4      	bls.n	80073a8 <_printf_i+0x11c>
 80073be:	2b08      	cmp	r3, #8
 80073c0:	d10b      	bne.n	80073da <_printf_i+0x14e>
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	07de      	lsls	r6, r3, #31
 80073c6:	d508      	bpl.n	80073da <_printf_i+0x14e>
 80073c8:	6923      	ldr	r3, [r4, #16]
 80073ca:	6861      	ldr	r1, [r4, #4]
 80073cc:	4299      	cmp	r1, r3
 80073ce:	bfde      	ittt	le
 80073d0:	2330      	movle	r3, #48	; 0x30
 80073d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073da:	1b52      	subs	r2, r2, r5
 80073dc:	6122      	str	r2, [r4, #16]
 80073de:	464b      	mov	r3, r9
 80073e0:	4621      	mov	r1, r4
 80073e2:	4640      	mov	r0, r8
 80073e4:	f8cd a000 	str.w	sl, [sp]
 80073e8:	aa03      	add	r2, sp, #12
 80073ea:	f7ff fedf 	bl	80071ac <_printf_common>
 80073ee:	3001      	adds	r0, #1
 80073f0:	d14c      	bne.n	800748c <_printf_i+0x200>
 80073f2:	f04f 30ff 	mov.w	r0, #4294967295
 80073f6:	b004      	add	sp, #16
 80073f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fc:	4834      	ldr	r0, [pc, #208]	; (80074d0 <_printf_i+0x244>)
 80073fe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007402:	6829      	ldr	r1, [r5, #0]
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	f851 6b04 	ldr.w	r6, [r1], #4
 800740a:	6029      	str	r1, [r5, #0]
 800740c:	061d      	lsls	r5, r3, #24
 800740e:	d514      	bpl.n	800743a <_printf_i+0x1ae>
 8007410:	07df      	lsls	r7, r3, #31
 8007412:	bf44      	itt	mi
 8007414:	f043 0320 	orrmi.w	r3, r3, #32
 8007418:	6023      	strmi	r3, [r4, #0]
 800741a:	b91e      	cbnz	r6, 8007424 <_printf_i+0x198>
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	f023 0320 	bic.w	r3, r3, #32
 8007422:	6023      	str	r3, [r4, #0]
 8007424:	2310      	movs	r3, #16
 8007426:	e7af      	b.n	8007388 <_printf_i+0xfc>
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	f043 0320 	orr.w	r3, r3, #32
 800742e:	6023      	str	r3, [r4, #0]
 8007430:	2378      	movs	r3, #120	; 0x78
 8007432:	4828      	ldr	r0, [pc, #160]	; (80074d4 <_printf_i+0x248>)
 8007434:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007438:	e7e3      	b.n	8007402 <_printf_i+0x176>
 800743a:	0659      	lsls	r1, r3, #25
 800743c:	bf48      	it	mi
 800743e:	b2b6      	uxthmi	r6, r6
 8007440:	e7e6      	b.n	8007410 <_printf_i+0x184>
 8007442:	4615      	mov	r5, r2
 8007444:	e7bb      	b.n	80073be <_printf_i+0x132>
 8007446:	682b      	ldr	r3, [r5, #0]
 8007448:	6826      	ldr	r6, [r4, #0]
 800744a:	1d18      	adds	r0, r3, #4
 800744c:	6961      	ldr	r1, [r4, #20]
 800744e:	6028      	str	r0, [r5, #0]
 8007450:	0635      	lsls	r5, r6, #24
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	d501      	bpl.n	800745a <_printf_i+0x1ce>
 8007456:	6019      	str	r1, [r3, #0]
 8007458:	e002      	b.n	8007460 <_printf_i+0x1d4>
 800745a:	0670      	lsls	r0, r6, #25
 800745c:	d5fb      	bpl.n	8007456 <_printf_i+0x1ca>
 800745e:	8019      	strh	r1, [r3, #0]
 8007460:	2300      	movs	r3, #0
 8007462:	4615      	mov	r5, r2
 8007464:	6123      	str	r3, [r4, #16]
 8007466:	e7ba      	b.n	80073de <_printf_i+0x152>
 8007468:	682b      	ldr	r3, [r5, #0]
 800746a:	2100      	movs	r1, #0
 800746c:	1d1a      	adds	r2, r3, #4
 800746e:	602a      	str	r2, [r5, #0]
 8007470:	681d      	ldr	r5, [r3, #0]
 8007472:	6862      	ldr	r2, [r4, #4]
 8007474:	4628      	mov	r0, r5
 8007476:	f000 fb3b 	bl	8007af0 <memchr>
 800747a:	b108      	cbz	r0, 8007480 <_printf_i+0x1f4>
 800747c:	1b40      	subs	r0, r0, r5
 800747e:	6060      	str	r0, [r4, #4]
 8007480:	6863      	ldr	r3, [r4, #4]
 8007482:	6123      	str	r3, [r4, #16]
 8007484:	2300      	movs	r3, #0
 8007486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800748a:	e7a8      	b.n	80073de <_printf_i+0x152>
 800748c:	462a      	mov	r2, r5
 800748e:	4649      	mov	r1, r9
 8007490:	4640      	mov	r0, r8
 8007492:	6923      	ldr	r3, [r4, #16]
 8007494:	47d0      	blx	sl
 8007496:	3001      	adds	r0, #1
 8007498:	d0ab      	beq.n	80073f2 <_printf_i+0x166>
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	079b      	lsls	r3, r3, #30
 800749e:	d413      	bmi.n	80074c8 <_printf_i+0x23c>
 80074a0:	68e0      	ldr	r0, [r4, #12]
 80074a2:	9b03      	ldr	r3, [sp, #12]
 80074a4:	4298      	cmp	r0, r3
 80074a6:	bfb8      	it	lt
 80074a8:	4618      	movlt	r0, r3
 80074aa:	e7a4      	b.n	80073f6 <_printf_i+0x16a>
 80074ac:	2301      	movs	r3, #1
 80074ae:	4632      	mov	r2, r6
 80074b0:	4649      	mov	r1, r9
 80074b2:	4640      	mov	r0, r8
 80074b4:	47d0      	blx	sl
 80074b6:	3001      	adds	r0, #1
 80074b8:	d09b      	beq.n	80073f2 <_printf_i+0x166>
 80074ba:	3501      	adds	r5, #1
 80074bc:	68e3      	ldr	r3, [r4, #12]
 80074be:	9903      	ldr	r1, [sp, #12]
 80074c0:	1a5b      	subs	r3, r3, r1
 80074c2:	42ab      	cmp	r3, r5
 80074c4:	dcf2      	bgt.n	80074ac <_printf_i+0x220>
 80074c6:	e7eb      	b.n	80074a0 <_printf_i+0x214>
 80074c8:	2500      	movs	r5, #0
 80074ca:	f104 0619 	add.w	r6, r4, #25
 80074ce:	e7f5      	b.n	80074bc <_printf_i+0x230>
 80074d0:	08008055 	.word	0x08008055
 80074d4:	08008066 	.word	0x08008066

080074d8 <nan>:
 80074d8:	2000      	movs	r0, #0
 80074da:	4901      	ldr	r1, [pc, #4]	; (80074e0 <nan+0x8>)
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	7ff80000 	.word	0x7ff80000

080074e4 <strncmp>:
 80074e4:	4603      	mov	r3, r0
 80074e6:	b510      	push	{r4, lr}
 80074e8:	b172      	cbz	r2, 8007508 <strncmp+0x24>
 80074ea:	3901      	subs	r1, #1
 80074ec:	1884      	adds	r4, r0, r2
 80074ee:	f813 0b01 	ldrb.w	r0, [r3], #1
 80074f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80074f6:	4290      	cmp	r0, r2
 80074f8:	d101      	bne.n	80074fe <strncmp+0x1a>
 80074fa:	42a3      	cmp	r3, r4
 80074fc:	d101      	bne.n	8007502 <strncmp+0x1e>
 80074fe:	1a80      	subs	r0, r0, r2
 8007500:	bd10      	pop	{r4, pc}
 8007502:	2800      	cmp	r0, #0
 8007504:	d1f3      	bne.n	80074ee <strncmp+0xa>
 8007506:	e7fa      	b.n	80074fe <strncmp+0x1a>
 8007508:	4610      	mov	r0, r2
 800750a:	e7f9      	b.n	8007500 <strncmp+0x1c>

0800750c <__swbuf_r>:
 800750c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750e:	460e      	mov	r6, r1
 8007510:	4614      	mov	r4, r2
 8007512:	4605      	mov	r5, r0
 8007514:	b118      	cbz	r0, 800751e <__swbuf_r+0x12>
 8007516:	6983      	ldr	r3, [r0, #24]
 8007518:	b90b      	cbnz	r3, 800751e <__swbuf_r+0x12>
 800751a:	f000 f9e3 	bl	80078e4 <__sinit>
 800751e:	4b21      	ldr	r3, [pc, #132]	; (80075a4 <__swbuf_r+0x98>)
 8007520:	429c      	cmp	r4, r3
 8007522:	d12b      	bne.n	800757c <__swbuf_r+0x70>
 8007524:	686c      	ldr	r4, [r5, #4]
 8007526:	69a3      	ldr	r3, [r4, #24]
 8007528:	60a3      	str	r3, [r4, #8]
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	071a      	lsls	r2, r3, #28
 800752e:	d52f      	bpl.n	8007590 <__swbuf_r+0x84>
 8007530:	6923      	ldr	r3, [r4, #16]
 8007532:	b36b      	cbz	r3, 8007590 <__swbuf_r+0x84>
 8007534:	6923      	ldr	r3, [r4, #16]
 8007536:	6820      	ldr	r0, [r4, #0]
 8007538:	b2f6      	uxtb	r6, r6
 800753a:	1ac0      	subs	r0, r0, r3
 800753c:	6963      	ldr	r3, [r4, #20]
 800753e:	4637      	mov	r7, r6
 8007540:	4283      	cmp	r3, r0
 8007542:	dc04      	bgt.n	800754e <__swbuf_r+0x42>
 8007544:	4621      	mov	r1, r4
 8007546:	4628      	mov	r0, r5
 8007548:	f000 f938 	bl	80077bc <_fflush_r>
 800754c:	bb30      	cbnz	r0, 800759c <__swbuf_r+0x90>
 800754e:	68a3      	ldr	r3, [r4, #8]
 8007550:	3001      	adds	r0, #1
 8007552:	3b01      	subs	r3, #1
 8007554:	60a3      	str	r3, [r4, #8]
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	1c5a      	adds	r2, r3, #1
 800755a:	6022      	str	r2, [r4, #0]
 800755c:	701e      	strb	r6, [r3, #0]
 800755e:	6963      	ldr	r3, [r4, #20]
 8007560:	4283      	cmp	r3, r0
 8007562:	d004      	beq.n	800756e <__swbuf_r+0x62>
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	07db      	lsls	r3, r3, #31
 8007568:	d506      	bpl.n	8007578 <__swbuf_r+0x6c>
 800756a:	2e0a      	cmp	r6, #10
 800756c:	d104      	bne.n	8007578 <__swbuf_r+0x6c>
 800756e:	4621      	mov	r1, r4
 8007570:	4628      	mov	r0, r5
 8007572:	f000 f923 	bl	80077bc <_fflush_r>
 8007576:	b988      	cbnz	r0, 800759c <__swbuf_r+0x90>
 8007578:	4638      	mov	r0, r7
 800757a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800757c:	4b0a      	ldr	r3, [pc, #40]	; (80075a8 <__swbuf_r+0x9c>)
 800757e:	429c      	cmp	r4, r3
 8007580:	d101      	bne.n	8007586 <__swbuf_r+0x7a>
 8007582:	68ac      	ldr	r4, [r5, #8]
 8007584:	e7cf      	b.n	8007526 <__swbuf_r+0x1a>
 8007586:	4b09      	ldr	r3, [pc, #36]	; (80075ac <__swbuf_r+0xa0>)
 8007588:	429c      	cmp	r4, r3
 800758a:	bf08      	it	eq
 800758c:	68ec      	ldreq	r4, [r5, #12]
 800758e:	e7ca      	b.n	8007526 <__swbuf_r+0x1a>
 8007590:	4621      	mov	r1, r4
 8007592:	4628      	mov	r0, r5
 8007594:	f000 f81a 	bl	80075cc <__swsetup_r>
 8007598:	2800      	cmp	r0, #0
 800759a:	d0cb      	beq.n	8007534 <__swbuf_r+0x28>
 800759c:	f04f 37ff 	mov.w	r7, #4294967295
 80075a0:	e7ea      	b.n	8007578 <__swbuf_r+0x6c>
 80075a2:	bf00      	nop
 80075a4:	08008198 	.word	0x08008198
 80075a8:	080081b8 	.word	0x080081b8
 80075ac:	08008178 	.word	0x08008178

080075b0 <__ascii_wctomb>:
 80075b0:	4603      	mov	r3, r0
 80075b2:	4608      	mov	r0, r1
 80075b4:	b141      	cbz	r1, 80075c8 <__ascii_wctomb+0x18>
 80075b6:	2aff      	cmp	r2, #255	; 0xff
 80075b8:	d904      	bls.n	80075c4 <__ascii_wctomb+0x14>
 80075ba:	228a      	movs	r2, #138	; 0x8a
 80075bc:	f04f 30ff 	mov.w	r0, #4294967295
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	4770      	bx	lr
 80075c4:	2001      	movs	r0, #1
 80075c6:	700a      	strb	r2, [r1, #0]
 80075c8:	4770      	bx	lr
	...

080075cc <__swsetup_r>:
 80075cc:	4b32      	ldr	r3, [pc, #200]	; (8007698 <__swsetup_r+0xcc>)
 80075ce:	b570      	push	{r4, r5, r6, lr}
 80075d0:	681d      	ldr	r5, [r3, #0]
 80075d2:	4606      	mov	r6, r0
 80075d4:	460c      	mov	r4, r1
 80075d6:	b125      	cbz	r5, 80075e2 <__swsetup_r+0x16>
 80075d8:	69ab      	ldr	r3, [r5, #24]
 80075da:	b913      	cbnz	r3, 80075e2 <__swsetup_r+0x16>
 80075dc:	4628      	mov	r0, r5
 80075de:	f000 f981 	bl	80078e4 <__sinit>
 80075e2:	4b2e      	ldr	r3, [pc, #184]	; (800769c <__swsetup_r+0xd0>)
 80075e4:	429c      	cmp	r4, r3
 80075e6:	d10f      	bne.n	8007608 <__swsetup_r+0x3c>
 80075e8:	686c      	ldr	r4, [r5, #4]
 80075ea:	89a3      	ldrh	r3, [r4, #12]
 80075ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075f0:	0719      	lsls	r1, r3, #28
 80075f2:	d42c      	bmi.n	800764e <__swsetup_r+0x82>
 80075f4:	06dd      	lsls	r5, r3, #27
 80075f6:	d411      	bmi.n	800761c <__swsetup_r+0x50>
 80075f8:	2309      	movs	r3, #9
 80075fa:	6033      	str	r3, [r6, #0]
 80075fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007600:	f04f 30ff 	mov.w	r0, #4294967295
 8007604:	81a3      	strh	r3, [r4, #12]
 8007606:	e03e      	b.n	8007686 <__swsetup_r+0xba>
 8007608:	4b25      	ldr	r3, [pc, #148]	; (80076a0 <__swsetup_r+0xd4>)
 800760a:	429c      	cmp	r4, r3
 800760c:	d101      	bne.n	8007612 <__swsetup_r+0x46>
 800760e:	68ac      	ldr	r4, [r5, #8]
 8007610:	e7eb      	b.n	80075ea <__swsetup_r+0x1e>
 8007612:	4b24      	ldr	r3, [pc, #144]	; (80076a4 <__swsetup_r+0xd8>)
 8007614:	429c      	cmp	r4, r3
 8007616:	bf08      	it	eq
 8007618:	68ec      	ldreq	r4, [r5, #12]
 800761a:	e7e6      	b.n	80075ea <__swsetup_r+0x1e>
 800761c:	0758      	lsls	r0, r3, #29
 800761e:	d512      	bpl.n	8007646 <__swsetup_r+0x7a>
 8007620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007622:	b141      	cbz	r1, 8007636 <__swsetup_r+0x6a>
 8007624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007628:	4299      	cmp	r1, r3
 800762a:	d002      	beq.n	8007632 <__swsetup_r+0x66>
 800762c:	4630      	mov	r0, r6
 800762e:	f7fd fc79 	bl	8004f24 <_free_r>
 8007632:	2300      	movs	r3, #0
 8007634:	6363      	str	r3, [r4, #52]	; 0x34
 8007636:	89a3      	ldrh	r3, [r4, #12]
 8007638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800763c:	81a3      	strh	r3, [r4, #12]
 800763e:	2300      	movs	r3, #0
 8007640:	6063      	str	r3, [r4, #4]
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	6023      	str	r3, [r4, #0]
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	f043 0308 	orr.w	r3, r3, #8
 800764c:	81a3      	strh	r3, [r4, #12]
 800764e:	6923      	ldr	r3, [r4, #16]
 8007650:	b94b      	cbnz	r3, 8007666 <__swsetup_r+0x9a>
 8007652:	89a3      	ldrh	r3, [r4, #12]
 8007654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800765c:	d003      	beq.n	8007666 <__swsetup_r+0x9a>
 800765e:	4621      	mov	r1, r4
 8007660:	4630      	mov	r0, r6
 8007662:	f000 fa05 	bl	8007a70 <__smakebuf_r>
 8007666:	89a0      	ldrh	r0, [r4, #12]
 8007668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800766c:	f010 0301 	ands.w	r3, r0, #1
 8007670:	d00a      	beq.n	8007688 <__swsetup_r+0xbc>
 8007672:	2300      	movs	r3, #0
 8007674:	60a3      	str	r3, [r4, #8]
 8007676:	6963      	ldr	r3, [r4, #20]
 8007678:	425b      	negs	r3, r3
 800767a:	61a3      	str	r3, [r4, #24]
 800767c:	6923      	ldr	r3, [r4, #16]
 800767e:	b943      	cbnz	r3, 8007692 <__swsetup_r+0xc6>
 8007680:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007684:	d1ba      	bne.n	80075fc <__swsetup_r+0x30>
 8007686:	bd70      	pop	{r4, r5, r6, pc}
 8007688:	0781      	lsls	r1, r0, #30
 800768a:	bf58      	it	pl
 800768c:	6963      	ldrpl	r3, [r4, #20]
 800768e:	60a3      	str	r3, [r4, #8]
 8007690:	e7f4      	b.n	800767c <__swsetup_r+0xb0>
 8007692:	2000      	movs	r0, #0
 8007694:	e7f7      	b.n	8007686 <__swsetup_r+0xba>
 8007696:	bf00      	nop
 8007698:	20000024 	.word	0x20000024
 800769c:	08008198 	.word	0x08008198
 80076a0:	080081b8 	.word	0x080081b8
 80076a4:	08008178 	.word	0x08008178

080076a8 <abort>:
 80076a8:	2006      	movs	r0, #6
 80076aa:	b508      	push	{r3, lr}
 80076ac:	f000 fa56 	bl	8007b5c <raise>
 80076b0:	2001      	movs	r0, #1
 80076b2:	f7fa fa94 	bl	8001bde <_exit>
	...

080076b8 <__sflush_r>:
 80076b8:	898a      	ldrh	r2, [r1, #12]
 80076ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076bc:	4605      	mov	r5, r0
 80076be:	0710      	lsls	r0, r2, #28
 80076c0:	460c      	mov	r4, r1
 80076c2:	d457      	bmi.n	8007774 <__sflush_r+0xbc>
 80076c4:	684b      	ldr	r3, [r1, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	dc04      	bgt.n	80076d4 <__sflush_r+0x1c>
 80076ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	dc01      	bgt.n	80076d4 <__sflush_r+0x1c>
 80076d0:	2000      	movs	r0, #0
 80076d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076d6:	2e00      	cmp	r6, #0
 80076d8:	d0fa      	beq.n	80076d0 <__sflush_r+0x18>
 80076da:	2300      	movs	r3, #0
 80076dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076e0:	682f      	ldr	r7, [r5, #0]
 80076e2:	602b      	str	r3, [r5, #0]
 80076e4:	d032      	beq.n	800774c <__sflush_r+0x94>
 80076e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	075a      	lsls	r2, r3, #29
 80076ec:	d505      	bpl.n	80076fa <__sflush_r+0x42>
 80076ee:	6863      	ldr	r3, [r4, #4]
 80076f0:	1ac0      	subs	r0, r0, r3
 80076f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076f4:	b10b      	cbz	r3, 80076fa <__sflush_r+0x42>
 80076f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076f8:	1ac0      	subs	r0, r0, r3
 80076fa:	2300      	movs	r3, #0
 80076fc:	4602      	mov	r2, r0
 80076fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007700:	4628      	mov	r0, r5
 8007702:	6a21      	ldr	r1, [r4, #32]
 8007704:	47b0      	blx	r6
 8007706:	1c43      	adds	r3, r0, #1
 8007708:	89a3      	ldrh	r3, [r4, #12]
 800770a:	d106      	bne.n	800771a <__sflush_r+0x62>
 800770c:	6829      	ldr	r1, [r5, #0]
 800770e:	291d      	cmp	r1, #29
 8007710:	d82c      	bhi.n	800776c <__sflush_r+0xb4>
 8007712:	4a29      	ldr	r2, [pc, #164]	; (80077b8 <__sflush_r+0x100>)
 8007714:	40ca      	lsrs	r2, r1
 8007716:	07d6      	lsls	r6, r2, #31
 8007718:	d528      	bpl.n	800776c <__sflush_r+0xb4>
 800771a:	2200      	movs	r2, #0
 800771c:	6062      	str	r2, [r4, #4]
 800771e:	6922      	ldr	r2, [r4, #16]
 8007720:	04d9      	lsls	r1, r3, #19
 8007722:	6022      	str	r2, [r4, #0]
 8007724:	d504      	bpl.n	8007730 <__sflush_r+0x78>
 8007726:	1c42      	adds	r2, r0, #1
 8007728:	d101      	bne.n	800772e <__sflush_r+0x76>
 800772a:	682b      	ldr	r3, [r5, #0]
 800772c:	b903      	cbnz	r3, 8007730 <__sflush_r+0x78>
 800772e:	6560      	str	r0, [r4, #84]	; 0x54
 8007730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007732:	602f      	str	r7, [r5, #0]
 8007734:	2900      	cmp	r1, #0
 8007736:	d0cb      	beq.n	80076d0 <__sflush_r+0x18>
 8007738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800773c:	4299      	cmp	r1, r3
 800773e:	d002      	beq.n	8007746 <__sflush_r+0x8e>
 8007740:	4628      	mov	r0, r5
 8007742:	f7fd fbef 	bl	8004f24 <_free_r>
 8007746:	2000      	movs	r0, #0
 8007748:	6360      	str	r0, [r4, #52]	; 0x34
 800774a:	e7c2      	b.n	80076d2 <__sflush_r+0x1a>
 800774c:	6a21      	ldr	r1, [r4, #32]
 800774e:	2301      	movs	r3, #1
 8007750:	4628      	mov	r0, r5
 8007752:	47b0      	blx	r6
 8007754:	1c41      	adds	r1, r0, #1
 8007756:	d1c7      	bne.n	80076e8 <__sflush_r+0x30>
 8007758:	682b      	ldr	r3, [r5, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0c4      	beq.n	80076e8 <__sflush_r+0x30>
 800775e:	2b1d      	cmp	r3, #29
 8007760:	d001      	beq.n	8007766 <__sflush_r+0xae>
 8007762:	2b16      	cmp	r3, #22
 8007764:	d101      	bne.n	800776a <__sflush_r+0xb2>
 8007766:	602f      	str	r7, [r5, #0]
 8007768:	e7b2      	b.n	80076d0 <__sflush_r+0x18>
 800776a:	89a3      	ldrh	r3, [r4, #12]
 800776c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007770:	81a3      	strh	r3, [r4, #12]
 8007772:	e7ae      	b.n	80076d2 <__sflush_r+0x1a>
 8007774:	690f      	ldr	r7, [r1, #16]
 8007776:	2f00      	cmp	r7, #0
 8007778:	d0aa      	beq.n	80076d0 <__sflush_r+0x18>
 800777a:	0793      	lsls	r3, r2, #30
 800777c:	bf18      	it	ne
 800777e:	2300      	movne	r3, #0
 8007780:	680e      	ldr	r6, [r1, #0]
 8007782:	bf08      	it	eq
 8007784:	694b      	ldreq	r3, [r1, #20]
 8007786:	1bf6      	subs	r6, r6, r7
 8007788:	600f      	str	r7, [r1, #0]
 800778a:	608b      	str	r3, [r1, #8]
 800778c:	2e00      	cmp	r6, #0
 800778e:	dd9f      	ble.n	80076d0 <__sflush_r+0x18>
 8007790:	4633      	mov	r3, r6
 8007792:	463a      	mov	r2, r7
 8007794:	4628      	mov	r0, r5
 8007796:	6a21      	ldr	r1, [r4, #32]
 8007798:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800779c:	47e0      	blx	ip
 800779e:	2800      	cmp	r0, #0
 80077a0:	dc06      	bgt.n	80077b0 <__sflush_r+0xf8>
 80077a2:	89a3      	ldrh	r3, [r4, #12]
 80077a4:	f04f 30ff 	mov.w	r0, #4294967295
 80077a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ac:	81a3      	strh	r3, [r4, #12]
 80077ae:	e790      	b.n	80076d2 <__sflush_r+0x1a>
 80077b0:	4407      	add	r7, r0
 80077b2:	1a36      	subs	r6, r6, r0
 80077b4:	e7ea      	b.n	800778c <__sflush_r+0xd4>
 80077b6:	bf00      	nop
 80077b8:	20400001 	.word	0x20400001

080077bc <_fflush_r>:
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	690b      	ldr	r3, [r1, #16]
 80077c0:	4605      	mov	r5, r0
 80077c2:	460c      	mov	r4, r1
 80077c4:	b913      	cbnz	r3, 80077cc <_fflush_r+0x10>
 80077c6:	2500      	movs	r5, #0
 80077c8:	4628      	mov	r0, r5
 80077ca:	bd38      	pop	{r3, r4, r5, pc}
 80077cc:	b118      	cbz	r0, 80077d6 <_fflush_r+0x1a>
 80077ce:	6983      	ldr	r3, [r0, #24]
 80077d0:	b90b      	cbnz	r3, 80077d6 <_fflush_r+0x1a>
 80077d2:	f000 f887 	bl	80078e4 <__sinit>
 80077d6:	4b14      	ldr	r3, [pc, #80]	; (8007828 <_fflush_r+0x6c>)
 80077d8:	429c      	cmp	r4, r3
 80077da:	d11b      	bne.n	8007814 <_fflush_r+0x58>
 80077dc:	686c      	ldr	r4, [r5, #4]
 80077de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d0ef      	beq.n	80077c6 <_fflush_r+0xa>
 80077e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077e8:	07d0      	lsls	r0, r2, #31
 80077ea:	d404      	bmi.n	80077f6 <_fflush_r+0x3a>
 80077ec:	0599      	lsls	r1, r3, #22
 80077ee:	d402      	bmi.n	80077f6 <_fflush_r+0x3a>
 80077f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077f2:	f000 f915 	bl	8007a20 <__retarget_lock_acquire_recursive>
 80077f6:	4628      	mov	r0, r5
 80077f8:	4621      	mov	r1, r4
 80077fa:	f7ff ff5d 	bl	80076b8 <__sflush_r>
 80077fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007800:	4605      	mov	r5, r0
 8007802:	07da      	lsls	r2, r3, #31
 8007804:	d4e0      	bmi.n	80077c8 <_fflush_r+0xc>
 8007806:	89a3      	ldrh	r3, [r4, #12]
 8007808:	059b      	lsls	r3, r3, #22
 800780a:	d4dd      	bmi.n	80077c8 <_fflush_r+0xc>
 800780c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800780e:	f000 f908 	bl	8007a22 <__retarget_lock_release_recursive>
 8007812:	e7d9      	b.n	80077c8 <_fflush_r+0xc>
 8007814:	4b05      	ldr	r3, [pc, #20]	; (800782c <_fflush_r+0x70>)
 8007816:	429c      	cmp	r4, r3
 8007818:	d101      	bne.n	800781e <_fflush_r+0x62>
 800781a:	68ac      	ldr	r4, [r5, #8]
 800781c:	e7df      	b.n	80077de <_fflush_r+0x22>
 800781e:	4b04      	ldr	r3, [pc, #16]	; (8007830 <_fflush_r+0x74>)
 8007820:	429c      	cmp	r4, r3
 8007822:	bf08      	it	eq
 8007824:	68ec      	ldreq	r4, [r5, #12]
 8007826:	e7da      	b.n	80077de <_fflush_r+0x22>
 8007828:	08008198 	.word	0x08008198
 800782c:	080081b8 	.word	0x080081b8
 8007830:	08008178 	.word	0x08008178

08007834 <std>:
 8007834:	2300      	movs	r3, #0
 8007836:	b510      	push	{r4, lr}
 8007838:	4604      	mov	r4, r0
 800783a:	e9c0 3300 	strd	r3, r3, [r0]
 800783e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007842:	6083      	str	r3, [r0, #8]
 8007844:	8181      	strh	r1, [r0, #12]
 8007846:	6643      	str	r3, [r0, #100]	; 0x64
 8007848:	81c2      	strh	r2, [r0, #14]
 800784a:	6183      	str	r3, [r0, #24]
 800784c:	4619      	mov	r1, r3
 800784e:	2208      	movs	r2, #8
 8007850:	305c      	adds	r0, #92	; 0x5c
 8007852:	f7fd fb5f 	bl	8004f14 <memset>
 8007856:	4b05      	ldr	r3, [pc, #20]	; (800786c <std+0x38>)
 8007858:	6224      	str	r4, [r4, #32]
 800785a:	6263      	str	r3, [r4, #36]	; 0x24
 800785c:	4b04      	ldr	r3, [pc, #16]	; (8007870 <std+0x3c>)
 800785e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007860:	4b04      	ldr	r3, [pc, #16]	; (8007874 <std+0x40>)
 8007862:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007864:	4b04      	ldr	r3, [pc, #16]	; (8007878 <std+0x44>)
 8007866:	6323      	str	r3, [r4, #48]	; 0x30
 8007868:	bd10      	pop	{r4, pc}
 800786a:	bf00      	nop
 800786c:	08007b95 	.word	0x08007b95
 8007870:	08007bb7 	.word	0x08007bb7
 8007874:	08007bef 	.word	0x08007bef
 8007878:	08007c13 	.word	0x08007c13

0800787c <_cleanup_r>:
 800787c:	4901      	ldr	r1, [pc, #4]	; (8007884 <_cleanup_r+0x8>)
 800787e:	f000 b8af 	b.w	80079e0 <_fwalk_reent>
 8007882:	bf00      	nop
 8007884:	080077bd 	.word	0x080077bd

08007888 <__sfmoreglue>:
 8007888:	2268      	movs	r2, #104	; 0x68
 800788a:	b570      	push	{r4, r5, r6, lr}
 800788c:	1e4d      	subs	r5, r1, #1
 800788e:	4355      	muls	r5, r2
 8007890:	460e      	mov	r6, r1
 8007892:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007896:	f7fd fbad 	bl	8004ff4 <_malloc_r>
 800789a:	4604      	mov	r4, r0
 800789c:	b140      	cbz	r0, 80078b0 <__sfmoreglue+0x28>
 800789e:	2100      	movs	r1, #0
 80078a0:	e9c0 1600 	strd	r1, r6, [r0]
 80078a4:	300c      	adds	r0, #12
 80078a6:	60a0      	str	r0, [r4, #8]
 80078a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078ac:	f7fd fb32 	bl	8004f14 <memset>
 80078b0:	4620      	mov	r0, r4
 80078b2:	bd70      	pop	{r4, r5, r6, pc}

080078b4 <__sfp_lock_acquire>:
 80078b4:	4801      	ldr	r0, [pc, #4]	; (80078bc <__sfp_lock_acquire+0x8>)
 80078b6:	f000 b8b3 	b.w	8007a20 <__retarget_lock_acquire_recursive>
 80078ba:	bf00      	nop
 80078bc:	20000685 	.word	0x20000685

080078c0 <__sfp_lock_release>:
 80078c0:	4801      	ldr	r0, [pc, #4]	; (80078c8 <__sfp_lock_release+0x8>)
 80078c2:	f000 b8ae 	b.w	8007a22 <__retarget_lock_release_recursive>
 80078c6:	bf00      	nop
 80078c8:	20000685 	.word	0x20000685

080078cc <__sinit_lock_acquire>:
 80078cc:	4801      	ldr	r0, [pc, #4]	; (80078d4 <__sinit_lock_acquire+0x8>)
 80078ce:	f000 b8a7 	b.w	8007a20 <__retarget_lock_acquire_recursive>
 80078d2:	bf00      	nop
 80078d4:	20000686 	.word	0x20000686

080078d8 <__sinit_lock_release>:
 80078d8:	4801      	ldr	r0, [pc, #4]	; (80078e0 <__sinit_lock_release+0x8>)
 80078da:	f000 b8a2 	b.w	8007a22 <__retarget_lock_release_recursive>
 80078de:	bf00      	nop
 80078e0:	20000686 	.word	0x20000686

080078e4 <__sinit>:
 80078e4:	b510      	push	{r4, lr}
 80078e6:	4604      	mov	r4, r0
 80078e8:	f7ff fff0 	bl	80078cc <__sinit_lock_acquire>
 80078ec:	69a3      	ldr	r3, [r4, #24]
 80078ee:	b11b      	cbz	r3, 80078f8 <__sinit+0x14>
 80078f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078f4:	f7ff bff0 	b.w	80078d8 <__sinit_lock_release>
 80078f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078fc:	6523      	str	r3, [r4, #80]	; 0x50
 80078fe:	4b13      	ldr	r3, [pc, #76]	; (800794c <__sinit+0x68>)
 8007900:	4a13      	ldr	r2, [pc, #76]	; (8007950 <__sinit+0x6c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	62a2      	str	r2, [r4, #40]	; 0x28
 8007906:	42a3      	cmp	r3, r4
 8007908:	bf08      	it	eq
 800790a:	2301      	moveq	r3, #1
 800790c:	4620      	mov	r0, r4
 800790e:	bf08      	it	eq
 8007910:	61a3      	streq	r3, [r4, #24]
 8007912:	f000 f81f 	bl	8007954 <__sfp>
 8007916:	6060      	str	r0, [r4, #4]
 8007918:	4620      	mov	r0, r4
 800791a:	f000 f81b 	bl	8007954 <__sfp>
 800791e:	60a0      	str	r0, [r4, #8]
 8007920:	4620      	mov	r0, r4
 8007922:	f000 f817 	bl	8007954 <__sfp>
 8007926:	2200      	movs	r2, #0
 8007928:	2104      	movs	r1, #4
 800792a:	60e0      	str	r0, [r4, #12]
 800792c:	6860      	ldr	r0, [r4, #4]
 800792e:	f7ff ff81 	bl	8007834 <std>
 8007932:	2201      	movs	r2, #1
 8007934:	2109      	movs	r1, #9
 8007936:	68a0      	ldr	r0, [r4, #8]
 8007938:	f7ff ff7c 	bl	8007834 <std>
 800793c:	2202      	movs	r2, #2
 800793e:	2112      	movs	r1, #18
 8007940:	68e0      	ldr	r0, [r4, #12]
 8007942:	f7ff ff77 	bl	8007834 <std>
 8007946:	2301      	movs	r3, #1
 8007948:	61a3      	str	r3, [r4, #24]
 800794a:	e7d1      	b.n	80078f0 <__sinit+0xc>
 800794c:	08007d4c 	.word	0x08007d4c
 8007950:	0800787d 	.word	0x0800787d

08007954 <__sfp>:
 8007954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007956:	4607      	mov	r7, r0
 8007958:	f7ff ffac 	bl	80078b4 <__sfp_lock_acquire>
 800795c:	4b1e      	ldr	r3, [pc, #120]	; (80079d8 <__sfp+0x84>)
 800795e:	681e      	ldr	r6, [r3, #0]
 8007960:	69b3      	ldr	r3, [r6, #24]
 8007962:	b913      	cbnz	r3, 800796a <__sfp+0x16>
 8007964:	4630      	mov	r0, r6
 8007966:	f7ff ffbd 	bl	80078e4 <__sinit>
 800796a:	3648      	adds	r6, #72	; 0x48
 800796c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007970:	3b01      	subs	r3, #1
 8007972:	d503      	bpl.n	800797c <__sfp+0x28>
 8007974:	6833      	ldr	r3, [r6, #0]
 8007976:	b30b      	cbz	r3, 80079bc <__sfp+0x68>
 8007978:	6836      	ldr	r6, [r6, #0]
 800797a:	e7f7      	b.n	800796c <__sfp+0x18>
 800797c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007980:	b9d5      	cbnz	r5, 80079b8 <__sfp+0x64>
 8007982:	4b16      	ldr	r3, [pc, #88]	; (80079dc <__sfp+0x88>)
 8007984:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007988:	60e3      	str	r3, [r4, #12]
 800798a:	6665      	str	r5, [r4, #100]	; 0x64
 800798c:	f000 f847 	bl	8007a1e <__retarget_lock_init_recursive>
 8007990:	f7ff ff96 	bl	80078c0 <__sfp_lock_release>
 8007994:	2208      	movs	r2, #8
 8007996:	4629      	mov	r1, r5
 8007998:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800799c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079a0:	6025      	str	r5, [r4, #0]
 80079a2:	61a5      	str	r5, [r4, #24]
 80079a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079a8:	f7fd fab4 	bl	8004f14 <memset>
 80079ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079b4:	4620      	mov	r0, r4
 80079b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b8:	3468      	adds	r4, #104	; 0x68
 80079ba:	e7d9      	b.n	8007970 <__sfp+0x1c>
 80079bc:	2104      	movs	r1, #4
 80079be:	4638      	mov	r0, r7
 80079c0:	f7ff ff62 	bl	8007888 <__sfmoreglue>
 80079c4:	4604      	mov	r4, r0
 80079c6:	6030      	str	r0, [r6, #0]
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d1d5      	bne.n	8007978 <__sfp+0x24>
 80079cc:	f7ff ff78 	bl	80078c0 <__sfp_lock_release>
 80079d0:	230c      	movs	r3, #12
 80079d2:	603b      	str	r3, [r7, #0]
 80079d4:	e7ee      	b.n	80079b4 <__sfp+0x60>
 80079d6:	bf00      	nop
 80079d8:	08007d4c 	.word	0x08007d4c
 80079dc:	ffff0001 	.word	0xffff0001

080079e0 <_fwalk_reent>:
 80079e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079e4:	4606      	mov	r6, r0
 80079e6:	4688      	mov	r8, r1
 80079e8:	2700      	movs	r7, #0
 80079ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079f2:	f1b9 0901 	subs.w	r9, r9, #1
 80079f6:	d505      	bpl.n	8007a04 <_fwalk_reent+0x24>
 80079f8:	6824      	ldr	r4, [r4, #0]
 80079fa:	2c00      	cmp	r4, #0
 80079fc:	d1f7      	bne.n	80079ee <_fwalk_reent+0xe>
 80079fe:	4638      	mov	r0, r7
 8007a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a04:	89ab      	ldrh	r3, [r5, #12]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d907      	bls.n	8007a1a <_fwalk_reent+0x3a>
 8007a0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	d003      	beq.n	8007a1a <_fwalk_reent+0x3a>
 8007a12:	4629      	mov	r1, r5
 8007a14:	4630      	mov	r0, r6
 8007a16:	47c0      	blx	r8
 8007a18:	4307      	orrs	r7, r0
 8007a1a:	3568      	adds	r5, #104	; 0x68
 8007a1c:	e7e9      	b.n	80079f2 <_fwalk_reent+0x12>

08007a1e <__retarget_lock_init_recursive>:
 8007a1e:	4770      	bx	lr

08007a20 <__retarget_lock_acquire_recursive>:
 8007a20:	4770      	bx	lr

08007a22 <__retarget_lock_release_recursive>:
 8007a22:	4770      	bx	lr

08007a24 <__swhatbuf_r>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	460e      	mov	r6, r1
 8007a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a2c:	4614      	mov	r4, r2
 8007a2e:	2900      	cmp	r1, #0
 8007a30:	461d      	mov	r5, r3
 8007a32:	b096      	sub	sp, #88	; 0x58
 8007a34:	da08      	bge.n	8007a48 <__swhatbuf_r+0x24>
 8007a36:	2200      	movs	r2, #0
 8007a38:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a3c:	602a      	str	r2, [r5, #0]
 8007a3e:	061a      	lsls	r2, r3, #24
 8007a40:	d410      	bmi.n	8007a64 <__swhatbuf_r+0x40>
 8007a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a46:	e00e      	b.n	8007a66 <__swhatbuf_r+0x42>
 8007a48:	466a      	mov	r2, sp
 8007a4a:	f000 f909 	bl	8007c60 <_fstat_r>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	dbf1      	blt.n	8007a36 <__swhatbuf_r+0x12>
 8007a52:	9a01      	ldr	r2, [sp, #4]
 8007a54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a5c:	425a      	negs	r2, r3
 8007a5e:	415a      	adcs	r2, r3
 8007a60:	602a      	str	r2, [r5, #0]
 8007a62:	e7ee      	b.n	8007a42 <__swhatbuf_r+0x1e>
 8007a64:	2340      	movs	r3, #64	; 0x40
 8007a66:	2000      	movs	r0, #0
 8007a68:	6023      	str	r3, [r4, #0]
 8007a6a:	b016      	add	sp, #88	; 0x58
 8007a6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a70 <__smakebuf_r>:
 8007a70:	898b      	ldrh	r3, [r1, #12]
 8007a72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a74:	079d      	lsls	r5, r3, #30
 8007a76:	4606      	mov	r6, r0
 8007a78:	460c      	mov	r4, r1
 8007a7a:	d507      	bpl.n	8007a8c <__smakebuf_r+0x1c>
 8007a7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a80:	6023      	str	r3, [r4, #0]
 8007a82:	6123      	str	r3, [r4, #16]
 8007a84:	2301      	movs	r3, #1
 8007a86:	6163      	str	r3, [r4, #20]
 8007a88:	b002      	add	sp, #8
 8007a8a:	bd70      	pop	{r4, r5, r6, pc}
 8007a8c:	466a      	mov	r2, sp
 8007a8e:	ab01      	add	r3, sp, #4
 8007a90:	f7ff ffc8 	bl	8007a24 <__swhatbuf_r>
 8007a94:	9900      	ldr	r1, [sp, #0]
 8007a96:	4605      	mov	r5, r0
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f7fd faab 	bl	8004ff4 <_malloc_r>
 8007a9e:	b948      	cbnz	r0, 8007ab4 <__smakebuf_r+0x44>
 8007aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aa4:	059a      	lsls	r2, r3, #22
 8007aa6:	d4ef      	bmi.n	8007a88 <__smakebuf_r+0x18>
 8007aa8:	f023 0303 	bic.w	r3, r3, #3
 8007aac:	f043 0302 	orr.w	r3, r3, #2
 8007ab0:	81a3      	strh	r3, [r4, #12]
 8007ab2:	e7e3      	b.n	8007a7c <__smakebuf_r+0xc>
 8007ab4:	4b0d      	ldr	r3, [pc, #52]	; (8007aec <__smakebuf_r+0x7c>)
 8007ab6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ab8:	89a3      	ldrh	r3, [r4, #12]
 8007aba:	6020      	str	r0, [r4, #0]
 8007abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ac0:	81a3      	strh	r3, [r4, #12]
 8007ac2:	9b00      	ldr	r3, [sp, #0]
 8007ac4:	6120      	str	r0, [r4, #16]
 8007ac6:	6163      	str	r3, [r4, #20]
 8007ac8:	9b01      	ldr	r3, [sp, #4]
 8007aca:	b15b      	cbz	r3, 8007ae4 <__smakebuf_r+0x74>
 8007acc:	4630      	mov	r0, r6
 8007ace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ad2:	f000 f8d7 	bl	8007c84 <_isatty_r>
 8007ad6:	b128      	cbz	r0, 8007ae4 <__smakebuf_r+0x74>
 8007ad8:	89a3      	ldrh	r3, [r4, #12]
 8007ada:	f023 0303 	bic.w	r3, r3, #3
 8007ade:	f043 0301 	orr.w	r3, r3, #1
 8007ae2:	81a3      	strh	r3, [r4, #12]
 8007ae4:	89a0      	ldrh	r0, [r4, #12]
 8007ae6:	4305      	orrs	r5, r0
 8007ae8:	81a5      	strh	r5, [r4, #12]
 8007aea:	e7cd      	b.n	8007a88 <__smakebuf_r+0x18>
 8007aec:	0800787d 	.word	0x0800787d

08007af0 <memchr>:
 8007af0:	4603      	mov	r3, r0
 8007af2:	b510      	push	{r4, lr}
 8007af4:	b2c9      	uxtb	r1, r1
 8007af6:	4402      	add	r2, r0
 8007af8:	4293      	cmp	r3, r2
 8007afa:	4618      	mov	r0, r3
 8007afc:	d101      	bne.n	8007b02 <memchr+0x12>
 8007afe:	2000      	movs	r0, #0
 8007b00:	e003      	b.n	8007b0a <memchr+0x1a>
 8007b02:	7804      	ldrb	r4, [r0, #0]
 8007b04:	3301      	adds	r3, #1
 8007b06:	428c      	cmp	r4, r1
 8007b08:	d1f6      	bne.n	8007af8 <memchr+0x8>
 8007b0a:	bd10      	pop	{r4, pc}

08007b0c <_raise_r>:
 8007b0c:	291f      	cmp	r1, #31
 8007b0e:	b538      	push	{r3, r4, r5, lr}
 8007b10:	4604      	mov	r4, r0
 8007b12:	460d      	mov	r5, r1
 8007b14:	d904      	bls.n	8007b20 <_raise_r+0x14>
 8007b16:	2316      	movs	r3, #22
 8007b18:	6003      	str	r3, [r0, #0]
 8007b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1e:	bd38      	pop	{r3, r4, r5, pc}
 8007b20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b22:	b112      	cbz	r2, 8007b2a <_raise_r+0x1e>
 8007b24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b28:	b94b      	cbnz	r3, 8007b3e <_raise_r+0x32>
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 f830 	bl	8007b90 <_getpid_r>
 8007b30:	462a      	mov	r2, r5
 8007b32:	4601      	mov	r1, r0
 8007b34:	4620      	mov	r0, r4
 8007b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b3a:	f000 b817 	b.w	8007b6c <_kill_r>
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d00a      	beq.n	8007b58 <_raise_r+0x4c>
 8007b42:	1c59      	adds	r1, r3, #1
 8007b44:	d103      	bne.n	8007b4e <_raise_r+0x42>
 8007b46:	2316      	movs	r3, #22
 8007b48:	6003      	str	r3, [r0, #0]
 8007b4a:	2001      	movs	r0, #1
 8007b4c:	e7e7      	b.n	8007b1e <_raise_r+0x12>
 8007b4e:	2400      	movs	r4, #0
 8007b50:	4628      	mov	r0, r5
 8007b52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b56:	4798      	blx	r3
 8007b58:	2000      	movs	r0, #0
 8007b5a:	e7e0      	b.n	8007b1e <_raise_r+0x12>

08007b5c <raise>:
 8007b5c:	4b02      	ldr	r3, [pc, #8]	; (8007b68 <raise+0xc>)
 8007b5e:	4601      	mov	r1, r0
 8007b60:	6818      	ldr	r0, [r3, #0]
 8007b62:	f7ff bfd3 	b.w	8007b0c <_raise_r>
 8007b66:	bf00      	nop
 8007b68:	20000024 	.word	0x20000024

08007b6c <_kill_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	2300      	movs	r3, #0
 8007b70:	4d06      	ldr	r5, [pc, #24]	; (8007b8c <_kill_r+0x20>)
 8007b72:	4604      	mov	r4, r0
 8007b74:	4608      	mov	r0, r1
 8007b76:	4611      	mov	r1, r2
 8007b78:	602b      	str	r3, [r5, #0]
 8007b7a:	f7fa f820 	bl	8001bbe <_kill>
 8007b7e:	1c43      	adds	r3, r0, #1
 8007b80:	d102      	bne.n	8007b88 <_kill_r+0x1c>
 8007b82:	682b      	ldr	r3, [r5, #0]
 8007b84:	b103      	cbz	r3, 8007b88 <_kill_r+0x1c>
 8007b86:	6023      	str	r3, [r4, #0]
 8007b88:	bd38      	pop	{r3, r4, r5, pc}
 8007b8a:	bf00      	nop
 8007b8c:	20000680 	.word	0x20000680

08007b90 <_getpid_r>:
 8007b90:	f7fa b80e 	b.w	8001bb0 <_getpid>

08007b94 <__sread>:
 8007b94:	b510      	push	{r4, lr}
 8007b96:	460c      	mov	r4, r1
 8007b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9c:	f000 f894 	bl	8007cc8 <_read_r>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	bfab      	itete	ge
 8007ba4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ba8:	181b      	addge	r3, r3, r0
 8007baa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bae:	bfac      	ite	ge
 8007bb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bb2:	81a3      	strhlt	r3, [r4, #12]
 8007bb4:	bd10      	pop	{r4, pc}

08007bb6 <__swrite>:
 8007bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bba:	461f      	mov	r7, r3
 8007bbc:	898b      	ldrh	r3, [r1, #12]
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	05db      	lsls	r3, r3, #23
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	4616      	mov	r6, r2
 8007bc6:	d505      	bpl.n	8007bd4 <__swrite+0x1e>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd0:	f000 f868 	bl	8007ca4 <_lseek_r>
 8007bd4:	89a3      	ldrh	r3, [r4, #12]
 8007bd6:	4632      	mov	r2, r6
 8007bd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bdc:	81a3      	strh	r3, [r4, #12]
 8007bde:	4628      	mov	r0, r5
 8007be0:	463b      	mov	r3, r7
 8007be2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bea:	f000 b817 	b.w	8007c1c <_write_r>

08007bee <__sseek>:
 8007bee:	b510      	push	{r4, lr}
 8007bf0:	460c      	mov	r4, r1
 8007bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf6:	f000 f855 	bl	8007ca4 <_lseek_r>
 8007bfa:	1c43      	adds	r3, r0, #1
 8007bfc:	89a3      	ldrh	r3, [r4, #12]
 8007bfe:	bf15      	itete	ne
 8007c00:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c0a:	81a3      	strheq	r3, [r4, #12]
 8007c0c:	bf18      	it	ne
 8007c0e:	81a3      	strhne	r3, [r4, #12]
 8007c10:	bd10      	pop	{r4, pc}

08007c12 <__sclose>:
 8007c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c16:	f000 b813 	b.w	8007c40 <_close_r>
	...

08007c1c <_write_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	4611      	mov	r1, r2
 8007c24:	2200      	movs	r2, #0
 8007c26:	4d05      	ldr	r5, [pc, #20]	; (8007c3c <_write_r+0x20>)
 8007c28:	602a      	str	r2, [r5, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f7f9 fffe 	bl	8001c2c <_write>
 8007c30:	1c43      	adds	r3, r0, #1
 8007c32:	d102      	bne.n	8007c3a <_write_r+0x1e>
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	b103      	cbz	r3, 8007c3a <_write_r+0x1e>
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	bd38      	pop	{r3, r4, r5, pc}
 8007c3c:	20000680 	.word	0x20000680

08007c40 <_close_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	2300      	movs	r3, #0
 8007c44:	4d05      	ldr	r5, [pc, #20]	; (8007c5c <_close_r+0x1c>)
 8007c46:	4604      	mov	r4, r0
 8007c48:	4608      	mov	r0, r1
 8007c4a:	602b      	str	r3, [r5, #0]
 8007c4c:	f7fa f80a 	bl	8001c64 <_close>
 8007c50:	1c43      	adds	r3, r0, #1
 8007c52:	d102      	bne.n	8007c5a <_close_r+0x1a>
 8007c54:	682b      	ldr	r3, [r5, #0]
 8007c56:	b103      	cbz	r3, 8007c5a <_close_r+0x1a>
 8007c58:	6023      	str	r3, [r4, #0]
 8007c5a:	bd38      	pop	{r3, r4, r5, pc}
 8007c5c:	20000680 	.word	0x20000680

08007c60 <_fstat_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	2300      	movs	r3, #0
 8007c64:	4d06      	ldr	r5, [pc, #24]	; (8007c80 <_fstat_r+0x20>)
 8007c66:	4604      	mov	r4, r0
 8007c68:	4608      	mov	r0, r1
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	602b      	str	r3, [r5, #0]
 8007c6e:	f7fa f804 	bl	8001c7a <_fstat>
 8007c72:	1c43      	adds	r3, r0, #1
 8007c74:	d102      	bne.n	8007c7c <_fstat_r+0x1c>
 8007c76:	682b      	ldr	r3, [r5, #0]
 8007c78:	b103      	cbz	r3, 8007c7c <_fstat_r+0x1c>
 8007c7a:	6023      	str	r3, [r4, #0]
 8007c7c:	bd38      	pop	{r3, r4, r5, pc}
 8007c7e:	bf00      	nop
 8007c80:	20000680 	.word	0x20000680

08007c84 <_isatty_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	2300      	movs	r3, #0
 8007c88:	4d05      	ldr	r5, [pc, #20]	; (8007ca0 <_isatty_r+0x1c>)
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	4608      	mov	r0, r1
 8007c8e:	602b      	str	r3, [r5, #0]
 8007c90:	f7fa f802 	bl	8001c98 <_isatty>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_isatty_r+0x1a>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_isatty_r+0x1a>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	20000680 	.word	0x20000680

08007ca4 <_lseek_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	4608      	mov	r0, r1
 8007caa:	4611      	mov	r1, r2
 8007cac:	2200      	movs	r2, #0
 8007cae:	4d05      	ldr	r5, [pc, #20]	; (8007cc4 <_lseek_r+0x20>)
 8007cb0:	602a      	str	r2, [r5, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f7f9 fffa 	bl	8001cac <_lseek>
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d102      	bne.n	8007cc2 <_lseek_r+0x1e>
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	b103      	cbz	r3, 8007cc2 <_lseek_r+0x1e>
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	20000680 	.word	0x20000680

08007cc8 <_read_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	4604      	mov	r4, r0
 8007ccc:	4608      	mov	r0, r1
 8007cce:	4611      	mov	r1, r2
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	4d05      	ldr	r5, [pc, #20]	; (8007ce8 <_read_r+0x20>)
 8007cd4:	602a      	str	r2, [r5, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f7f9 ff8b 	bl	8001bf2 <_read>
 8007cdc:	1c43      	adds	r3, r0, #1
 8007cde:	d102      	bne.n	8007ce6 <_read_r+0x1e>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	b103      	cbz	r3, 8007ce6 <_read_r+0x1e>
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	20000680 	.word	0x20000680

08007cec <_init>:
 8007cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cee:	bf00      	nop
 8007cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf2:	bc08      	pop	{r3}
 8007cf4:	469e      	mov	lr, r3
 8007cf6:	4770      	bx	lr

08007cf8 <_fini>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	bf00      	nop
 8007cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfe:	bc08      	pop	{r3}
 8007d00:	469e      	mov	lr, r3
 8007d02:	4770      	bx	lr
